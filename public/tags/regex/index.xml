<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Regex on Recology</title>
    <link>http://localhost:1313/tags/regex/</link>
    <description>Recent content in Regex on Recology</description>
    <generator>Hugo -- 0.144.2</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 06 Oct 2011 10:50:00 -0500</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/regex/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>R talk on regular expressions (regex)</title>
      <link>http://localhost:1313/2011/10/r-talk-on-regular-expressions-regex/</link>
      <pubDate>Thu, 06 Oct 2011 10:50:00 -0500</pubDate>
      <guid>http://localhost:1313/2011/10/r-talk-on-regular-expressions-regex/</guid>
      <description>&lt;p&gt;Regular expressions are a powerful in any language to manipulate, search, etc. data.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; fruit &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;apple&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;banana&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pear&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pineapple&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; fruit
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[1] &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;apple&amp;#34;&lt;/span&gt;     &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;banana&amp;#34;&lt;/span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pear&amp;#34;&lt;/span&gt;      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pineapple&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;grep&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;, fruit) &lt;span style=&#34;color:#75715e&#34;&gt;# there is an &amp;#34;a&amp;#34; in each of the words&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[1] &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;strsplit&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;a string&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;s&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;# strsplit splits the string on the &amp;#34;s&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[[1]]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[1] &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;a &amp;#34;&lt;/span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;tring&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;R base has many functions for regular expressions, see slide 9 of Ed&amp;rsquo;s talk below.  The package stringr, created by Hadley Wickham, is a nice alternative that wraps the base regex functions for easier use. I highly recommend &lt;a href=&#34;http://cran.r-project.org/web/packages/stringr/index.html&#34;&gt;stringr&lt;/a&gt;.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>Regular expressions are a powerful in any language to manipulate, search, etc. data.</p>
<p>For example:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#f92672">&gt;</span> fruit <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">c</span>(<span style="color:#e6db74">&#34;apple&#34;</span>, <span style="color:#e6db74">&#34;banana&#34;</span>, <span style="color:#e6db74">&#34;pear&#34;</span>, <span style="color:#e6db74">&#34;pineapple&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;</span> fruit
</span></span><span style="display:flex;"><span>[1] <span style="color:#e6db74">&#34;apple&#34;</span>     <span style="color:#e6db74">&#34;banana&#34;</span>    <span style="color:#e6db74">&#34;pear&#34;</span>      <span style="color:#e6db74">&#34;pineapple&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;</span> <span style="color:#a6e22e">grep</span>(<span style="color:#e6db74">&#34;a&#34;</span>, fruit) <span style="color:#75715e"># there is an &#34;a&#34; in each of the words</span>
</span></span><span style="display:flex;"><span>[1] <span style="color:#ae81ff">1</span> <span style="color:#ae81ff">2</span> <span style="color:#ae81ff">3</span> <span style="color:#ae81ff">4</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;</span> 
</span></span><span style="display:flex;"><span><span style="color:#f92672">&gt;</span> <span style="color:#a6e22e">strsplit</span>(<span style="color:#e6db74">&#34;a string&#34;</span>, <span style="color:#e6db74">&#34;s&#34;</span>) <span style="color:#75715e"># strsplit splits the string on the &#34;s&#34;</span>
</span></span><span style="display:flex;"><span>[[1]]
</span></span><span style="display:flex;"><span>[1] <span style="color:#e6db74">&#34;a &#34;</span>    <span style="color:#e6db74">&#34;tring&#34;</span>
</span></span></code></pre></div><p>R base has many functions for regular expressions, see slide 9 of Ed&rsquo;s talk below.  The package stringr, created by Hadley Wickham, is a nice alternative that wraps the base regex functions for easier use. I highly recommend <a href="http://cran.r-project.org/web/packages/stringr/index.html">stringr</a>.</p>
<p>Ed Goodwin, the coordinator of the <a href="http://www.meetup.com/houstonr/">Houston R Users group</a>, gave a presentation to the group last night on regular expressions in R. It was a great talk, and he is allowing me to post his talk here.</p>
<p>Enjoy!  And thanks for sharing Ed!</p>

<div style="width:425px" id="__ss_9576621"> <strong style="display:block;margin:12px 0 4px"><a href="http://www.slideshare.net/schamber/regexpresentationedgoodwin" title="regex-presentation_ed_goodwin" target="_blank">regex-presentation_ed_goodwin</a></strong> <iframe src="http://www.slideshare.net/slideshow/embed_code/9576621" width="425" height="355" frameborder="0" marginwidth="0" marginheight="0" scrolling="no"></iframe> <div style="padding:5px 0 12px"> View more <a href="http://www.slideshare.net/" target="_blank">presentations</a> from <a href="http://www.slideshare.net/schamber" target="_blank">schamber</a> </div> </div>

]]></content:encoded>
    </item>
  </channel>
</rss>
