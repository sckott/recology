<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Ruby on Recology</title>
    <link>http://localhost:1313/tags/ruby/</link>
    <description>Recent content in Ruby on Recology</description>
    <generator>Hugo -- 0.144.1</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 19 Feb 2019 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/ruby/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Notes on porting Ruby to R</title>
      <link>http://localhost:1313/2019/02/ruby-ports-to-r/</link>
      <pubDate>Tue, 19 Feb 2019 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2019/02/ruby-ports-to-r/</guid>
      <description>&lt;p&gt;In doing a number of ports of Ruby gems to R (&lt;a href=&#34;https://github.com/ropensci/vcr&#34;&gt;vcr&lt;/a&gt;, &lt;a href=&#34;https://github.com/ropensci/webmockr&#34;&gt;webmockr&lt;/a&gt;), I&amp;rsquo;ve noticed a few differences between the languages that are fun to dive into, at least for me.&lt;/p&gt;
&lt;h2 id=&#34;monkey-patching&#34;&gt;monkey patching&lt;/h2&gt;
&lt;p&gt;Ruby has a nice thing where you can &lt;a href=&#34;https://en.wikipedia.org/wiki/Monkey_patch&#34;&gt;&amp;ldquo;monkey patch&amp;rdquo;&lt;/a&gt; classes/methods/etc. in other Ruby libraries. For example, lets say you have Ruby gems &lt;code&gt;foo&lt;/code&gt; and &lt;code&gt;bar&lt;/code&gt;. If &lt;code&gt;foo&lt;/code&gt; has a method &lt;code&gt;hello&lt;/code&gt;, you can override the &lt;code&gt;hello&lt;/code&gt; method in &lt;code&gt;foo&lt;/code&gt; with one from &lt;code&gt;bar&lt;/code&gt;. AFAICT this is acceptable in gems on Rubygems.org and in general in the community.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>In doing a number of ports of Ruby gems to R (<a href="https://github.com/ropensci/vcr">vcr</a>, <a href="https://github.com/ropensci/webmockr">webmockr</a>), I&rsquo;ve noticed a few differences between the languages that are fun to dive into, at least for me.</p>
<h2 id="monkey-patching">monkey patching</h2>
<p>Ruby has a nice thing where you can <a href="https://en.wikipedia.org/wiki/Monkey_patch">&ldquo;monkey patch&rdquo;</a> classes/methods/etc. in other Ruby libraries. For example, lets say you have Ruby gems <code>foo</code> and <code>bar</code>. If <code>foo</code> has a method <code>hello</code>, you can override the <code>hello</code> method in <code>foo</code> with one from <code>bar</code>. AFAICT this is acceptable in gems on Rubygems.org and in general in the community.</p>
<p>Monkey patching is technically possible in R, but is not allowed in packages on CRAN (see <code>?assignInNamespace</code> help for the warnings), even though <a href="https://github.com/search?p=1&amp;q=org%3Acran+assignInNamespace&amp;type=Code">there is some usage in CRAN packages</a>. We can do this using <code>utils::assignInNamespace</code>. Let&rsquo;s say you have an R package <code>foo</code> and another R package <code>bar</code>. Here, we can assign a new <code>hello</code> method to the one already defined in <code>foo</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#75715e"># the foo::hello method looks like</span>
</span></span><span style="display:flex;"><span>hello <span style="color:#f92672">&lt;-</span> <span style="color:#66d9ef">function</span>() <span style="color:#66d9ef">return</span>(<span style="color:#e6db74">&#34;world!&#34;</span>)
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#75715e"># make a new hello method</span>
</span></span><span style="display:flex;"><span>hello2 <span style="color:#f92672">&lt;-</span> <span style="color:#66d9ef">function</span>() <span style="color:#66d9ef">return</span>(<span style="color:#e6db74">&#34;mars!&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#75715e"># override the hello method in foo</span>
</span></span><span style="display:flex;"><span>utils<span style="color:#f92672">::</span><span style="color:#a6e22e">assignInNamespace</span>(<span style="color:#e6db74">&#34;hello&#34;</span>, hello2, <span style="color:#e6db74">&#34;foo&#34;</span>)
</span></span></code></pre></div><p>Try it with any package. It&rsquo;s fun.</p>
<p>You can do this in a package, by using a <code>.onAttach</code> directive.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>.onAttach <span style="color:#f92672">&lt;-</span> <span style="color:#66d9ef">function</span>(libname, pkgname) {
</span></span><span style="display:flex;"><span>  utils<span style="color:#f92672">::</span><span style="color:#a6e22e">assignInNamespace</span>(<span style="color:#e6db74">&#34;bar&#34;</span>, bar, <span style="color:#e6db74">&#34;foo&#34;</span>)
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Anyway, monkey patching isn&rsquo;t really a thing in R, so that makes it more difficult to port Ruby things to R. The inability to do this in R makes many things much harder. For example, in <a href="https://github.com/ropensci/vcr">vcr</a> and <a href="https://github.com/ropensci/webmockr">webmockr</a> I couldn&rsquo;t simply override methods in http libraries they hook into, but have to make changes in the http libraries themselves to support the HTTP mocking - we get there in the end, but it takes much longer, though possibly safer?</p>
<h2 id="0-ruby-vs-1-r-based-indexing">0 (Ruby) vs. 1 (R) based indexing</h2>
<p>Never hurts to keep repeating this.</p>
<h2 id="sequences">sequences</h2>
<p>Ruby has the ability to construct numeric sequences with <code>..</code> and <code>...</code>, e.g.,</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ruby" data-lang="ruby"><span style="display:flex;"><span><span style="color:#75715e"># inclusive of second number</span>
</span></span><span style="display:flex;"><span>x <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span><span style="color:#f92672">..</span><span style="color:#ae81ff">3</span>
</span></span><span style="display:flex;"><span>x<span style="color:#f92672">.</span>to_a
</span></span><span style="display:flex;"><span><span style="color:#f92672">=&gt;</span>  <span style="color:#f92672">[</span><span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">3</span><span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># exclusive of second number</span>
</span></span><span style="display:flex;"><span>x <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span><span style="color:#f92672">...</span><span style="color:#ae81ff">3</span>
</span></span><span style="display:flex;"><span>x<span style="color:#f92672">.</span>to_a
</span></span><span style="display:flex;"><span><span style="color:#f92672">=&gt;</span>  <span style="color:#f92672">[</span><span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span><span style="color:#f92672">]</span>
</span></span></code></pre></div><p>AFAIK, in R we can only do inclusive sequences</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#ae81ff">1</span><span style="color:#f92672">:</span><span style="color:#ae81ff">3</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] 1 2 3</span>
</span></span></code></pre></div><h2 id="explicit-imports">explicit imports</h2>
<p>In at least Ruby and Python you have to be explicit about saying where to import methods from other files.</p>
<p>Whereas in R you can just use a function/etc. from any other file in the package without stating that you need it. This makes it harder to reason about the dependent functions/etc. needed in any one file. One tool that helps with this is <a href="https://github.com/MangoTheCat/functionMap">functionMap</a> (though last commit in 2016, not sure if maintained anymore, is it GÃ¡bor?).</p>
<p>On a related note, in Ruby we can use global variables like:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ruby" data-lang="ruby"><span style="display:flex;"><span>$foo <span style="color:#f92672">=</span> <span style="color:#ae81ff">5</span>
</span></span></code></pre></div><p>From what I understand the above is bad pratice, but I do use them sometimes in my own Ruby stuff.</p>
<p>In R all variables/methods/classes are &ldquo;global&rdquo; within the namespace of the package.</p>
<h2 id="adding-strings">adding strings</h2>
<p>ugh, I wish R had the ability to add strings together with <code>+</code>.</p>
<h2 id="-as-a-valid-character">? as a valid character</h2>
<p>um, yes please. I love methods in Ruby like <code>nil?</code>, <code>empty?</code>, etc. Such a straight-forward way to indicate intent. Wish we had these in R, but <code>?</code> isn&rsquo;t even a valid character on its own, so not (ever?) gonna happen.</p>
<h2 id="classes">Classes</h2>
<p>R&rsquo;s closest class system to Ruby (that I&rsquo;m willing to use) is <a href="https://cran.rstudio.com/web/packages/R6/">R6</a> from Winston Chang. Using <code>R6</code> makes it a bit easier to port from Ruby or a similar language as you can directly translate classes that have public vs. private methods, an initializer, print method, etc. Plus, with any sufficiently complex R package, using <code>R6</code> makes it much easier to manage the complexity.</p>
<h2 id="rubys-">Ruby&rsquo;s ||=</h2>
<p>In ruby this operator means essentially &ldquo;if a is undefined or falsey, evaluate b and set a to the result&rdquo;. In R there&rsquo;s AFAIK nothing like this. <code>||=</code> was used extensively in the Ruby gems I was porting, making the ported version in R more verbose. I could do in R <code>a %||% b</code> (where <code>%||% = function(x, y) if (is.null(x) || !x) y else x</code>) essentially doing &ldquo;if a is null, undefined or falsey, evaluate b&rdquo;; but then I have to still assign the result, giving <code>a = a %||% b</code>.</p>
<h2 id="splat-args">splat args</h2>
<p>The splat operator is used heavily in Ruby. It looks like:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ruby" data-lang="ruby"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">foo</span>(<span style="color:#f92672">*</span>args)
</span></span><span style="display:flex;"><span>  p args
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">end</span>
</span></span><span style="display:flex;"><span>foo(<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">3</span>)
</span></span><span style="display:flex;"><span><span style="color:#75715e"># =&gt; [1, 2, 3]</span>
</span></span></code></pre></div><p>In R the most similar thing we have is the ellipsis, so</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>foo <span style="color:#f92672">&lt;-</span> <span style="color:#66d9ef">function</span>(<span style="color:#66d9ef">...</span>) <span style="color:#a6e22e">c</span>(<span style="color:#66d9ef">...</span>)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">foo</span>(<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">3</span>)
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] 1 2 3</span>
</span></span></code></pre></div><p>Ruby splat args won&rsquo;t trip you up if you know how to do this conversion. Of course there&rsquo;s <code>rlang</code> and such in R as well.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Playing with Ruby Patterns in R</title>
      <link>http://localhost:1313/2018/01/ruby-and-r/</link>
      <pubDate>Thu, 25 Jan 2018 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2018/01/ruby-and-r/</guid>
      <description>&lt;p&gt;I was returning to a long-term project I&amp;rsquo;ve been working on - a package for caching HTTP requests in R called &lt;a href=&#34;https://github.com/ropensci/vcr&#34;&gt;vcr&lt;/a&gt;, a port of the Ruby gem &lt;a href=&#34;https://github.com/vcr/vcr&#34;&gt;vcr&lt;/a&gt; - when you do that thing you do when you are porting a library from one language to another. I stumbled upon some methods/functions I wasn&amp;rsquo;t familiar with.&lt;/p&gt;
&lt;p&gt;For example, &lt;a href=&#34;https://apidock.com/ruby/Array/take_while&#34;&gt;take_while&lt;/a&gt; I had never seeen before. It iterates over an array, returning the elements of the array that evalulate to &lt;code&gt;true&lt;/code&gt; (for those new to Ruby, they use &lt;code&gt;true&lt;/code&gt; instead of &lt;code&gt;TRUE&lt;/code&gt; as we do in R) when passed through the function given. R has lists and vectors - R&amp;rsquo;s lists are the most similar to Ruby arrays because both can have mixed objects in them (e.g., a string and an integer) while still retaining those objects as is.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>I was returning to a long-term project I&rsquo;ve been working on - a package for caching HTTP requests in R called <a href="https://github.com/ropensci/vcr">vcr</a>, a port of the Ruby gem <a href="https://github.com/vcr/vcr">vcr</a> - when you do that thing you do when you are porting a library from one language to another. I stumbled upon some methods/functions I wasn&rsquo;t familiar with.</p>
<p>For example, <a href="https://apidock.com/ruby/Array/take_while">take_while</a> I had never seeen before. It iterates over an array, returning the elements of the array that evalulate to <code>true</code> (for those new to Ruby, they use <code>true</code> instead of <code>TRUE</code> as we do in R) when passed through the function given. R has lists and vectors - R&rsquo;s lists are the most similar to Ruby arrays because both can have mixed objects in them (e.g., a string and an integer) while still retaining those objects as is.</p>
<p>In another example, I had never seen <a href="https://apidock.com/ruby/Array/unshift">unshift</a> or it&rsquo;s sister <a href="https://apidock.com/ruby/v1_9_3_392/Array/shift">shift</a>. <code>unshift</code> is pretty simple - it prepends objects to the front of the array. <code>shift</code> has more complicated behavior - called without values passed deletes first element of the array, AND returns that deleted value. With <code>shift</code> you can also pass an index that is treated as a range (e.g., <code>1</code> is treated as <code>0</code> and <code>1</code>; Ruby has zero based indexing, unlike R&rsquo;s 1 based indexing).</p>
<p>Anyway, I wanted to explore these new Ruby methods more by trying to implement them in R. Thus, started a bag of functions package called <a href="https://github.com/ropenscilabs/rubfuns">rubfuns</a> for &ldquo;Ruby functions&rdquo; to play while being able to have documentation, etc.</p>
<p>It&rsquo;s entirely possible the stuff in <code>rubfuns</code> is already implemented in R elsewhere - the point is for me to learn more about both Ruby and R.</p>
<p>A big difference between Ruby and R is that Rubys&rsquo;s arrays have methods that can be called on them, e.g.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ruby" data-lang="ruby"><span style="display:flex;"><span>a <span style="color:#f92672">=</span> <span style="color:#f92672">[</span><span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">3</span><span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>a<span style="color:#f92672">.</span>count
</span></span><span style="display:flex;"><span><span style="color:#f92672">=&gt;</span> <span style="color:#ae81ff">3</span>
</span></span></code></pre></div><p>Whereas the equivalent in R requires passing the vector to a method, rather than calling the method on the object itself</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>a <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">3</span>)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">length</span>(a)
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] 3</span>
</span></span></code></pre></div><p>Of course one could create a <code>R6</code> object in R and add methods to that object that can be called on a vector:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">library</span>(<span style="color:#e6db74">&#34;R6&#34;</span>)
</span></span><span style="display:flex;"><span>Vec <span style="color:#f92672">&lt;-</span> R6<span style="color:#f92672">::</span><span style="color:#a6e22e">R6Class</span>(
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;Vec&#34;</span>,
</span></span><span style="display:flex;"><span>  public <span style="color:#f92672">=</span> <span style="color:#a6e22e">list</span>(
</span></span><span style="display:flex;"><span>    x <span style="color:#f92672">=</span> <span style="color:#66d9ef">NULL</span>,
</span></span><span style="display:flex;"><span>    initialize <span style="color:#f92672">=</span> <span style="color:#66d9ef">function</span>(x) {
</span></span><span style="display:flex;"><span>      self<span style="color:#f92672">$</span>x <span style="color:#f92672">&lt;-</span> x
</span></span><span style="display:flex;"><span>    },
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    count <span style="color:#f92672">=</span> <span style="color:#66d9ef">function</span>() <span style="color:#a6e22e">length</span>(self<span style="color:#f92672">$</span>x)
</span></span><span style="display:flex;"><span>  )
</span></span><span style="display:flex;"><span>)
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>myvec <span style="color:#f92672">&lt;-</span> Vec<span style="color:#f92672">$</span><span style="color:#a6e22e">new</span>(<span style="color:#ae81ff">1</span><span style="color:#f92672">:</span><span style="color:#ae81ff">3</span>)
</span></span><span style="display:flex;"><span>myvec<span style="color:#f92672">$</span><span style="color:#a6e22e">count</span>()
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] 3</span>
</span></span></code></pre></div><p>But that&rsquo;s not baked into R itself, so not ideal.</p>
<p>Anyway, on with <code>rubfuns</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>devtools<span style="color:#f92672">::</span><span style="color:#a6e22e">install_github</span>(<span style="color:#e6db74">&#34;ropenscilabs/rubfuns&#34;</span>)
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">library</span>(<span style="color:#e6db74">&#34;rubfuns&#34;</span>)
</span></span></code></pre></div><p><code>take_while</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>x <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">c</span>(<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">4</span>, <span style="color:#ae81ff">5</span>, <span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span>x <span style="color:#f92672">%&gt;%</span> <span style="color:#a6e22e">take_while</span>(<span style="color:#66d9ef">function</span>(z) z <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">3</span>)
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] 1 2 0</span>
</span></span><span style="display:flex;"><span>x <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">c</span>(<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">4</span>, <span style="color:#ae81ff">9</span>, <span style="color:#ae81ff">-1</span>)
</span></span><span style="display:flex;"><span>x <span style="color:#f92672">%&gt;%</span> <span style="color:#a6e22e">take_while</span>(<span style="color:#66d9ef">function</span>(z) z <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">3</span>)
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1]  1  2 -1</span>
</span></span></code></pre></div><p><code>drop_while</code> is a similar function to <code>take_while</code> but drops the elements that when passed to the supplied function evaluate to <code>TRUE</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>x <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">c</span>(<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">4</span>, <span style="color:#ae81ff">5</span>, <span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span>x <span style="color:#f92672">%&gt;%</span> <span style="color:#a6e22e">drop_while</span>(<span style="color:#66d9ef">function</span>(z) z <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">3</span>)
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] 3 4 5</span>
</span></span><span style="display:flex;"><span>x <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">c</span>(<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">4</span>, <span style="color:#ae81ff">9</span>, <span style="color:#ae81ff">-1</span>)
</span></span><span style="display:flex;"><span>x <span style="color:#f92672">%&gt;%</span> <span style="color:#a6e22e">drop_while</span>(<span style="color:#66d9ef">function</span>(z) z <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">3</span>)
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] 3 4 9</span>
</span></span></code></pre></div><p><code>delete_at</code> was in interesting function I saw in <a href="https://github.com/vcr/vcr">vcr</a>. It deletes the elements of an array at the positions given (remember, 0 based indexing in Ruby)</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>x <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">c</span>(<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">4</span>, <span style="color:#ae81ff">5</span>, <span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">delete_at</span>(x, <span style="color:#ae81ff">5</span>)
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] 1 2 3 4 0</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">delete_at</span>(x, <span style="color:#ae81ff">4</span><span style="color:#f92672">:</span><span style="color:#ae81ff">5</span>)
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] 1 2 3 0</span>
</span></span></code></pre></div><p><code>delete_if</code> is similar to <code>delete_at</code> but instead you pass a function that when evaluates to <code>TRUE</code> deletes that element</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>x <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">c</span>(<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">4</span>, <span style="color:#ae81ff">5</span>, <span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">delete_if</span>(x, <span style="color:#66d9ef">function</span>(z) z <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">2</span>)
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] 1 2 0</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">delete_if</span>(x, <span style="color:#66d9ef">function</span>(z) z <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">4</span>)
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] 4 5</span>
</span></span></code></pre></div><p><code>unshift</code> is quite simple. it prepends whatever you pass to it to the front of the vector</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>x <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">c</span>(<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">3</span>)
</span></span><span style="display:flex;"><span>x <span style="color:#f92672">%&gt;%</span> <span style="color:#a6e22e">unshift</span>(<span style="color:#ae81ff">4</span>)
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] 4 1 2 3</span>
</span></span></code></pre></div><p><code>shift</code> is more complicated. called without any values deletes the first element. called with a value deletes all elements up to and including that value</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>x <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">c</span>(<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">3</span>)
</span></span><span style="display:flex;"><span>x <span style="color:#f92672">%&gt;%</span> shift
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] 2 3</span>
</span></span><span style="display:flex;"><span>x <span style="color:#f92672">%&gt;%</span> <span style="color:#a6e22e">shift</span>(<span style="color:#ae81ff">2</span>)
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] 3</span>
</span></span></code></pre></div><p>That&rsquo;s all I&rsquo;ve got so far. Will likely add more functions as time goes on.</p>
<p>Unfortunately we can&rsquo;t follow what Ruby does by being able to modify the vector or list while also returning something. There are of course ways to achieve this, e.g., <code>R6</code> solution above or something like <a href="https://github.com/nteetor/zeallot">zeallot</a> - but if it&rsquo;s not baked into the R language it seems less likely to get wide adoption.</p>
<p><strong>todo</strong>: plan to make sure the functions work with vectors and lists</p>
]]></content:encoded>
    </item>
    <item>
      <title>Web APIs with Sinatra, Mongo, Docker, and Caddy</title>
      <link>http://localhost:1313/2017/11/sinatra-mongo-docker-caddy/</link>
      <pubDate>Tue, 14 Nov 2017 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2017/11/sinatra-mongo-docker-caddy/</guid>
      <description>&lt;h2 id=&#34;the-problem&#34;&gt;The problem&lt;/h2&gt;
&lt;p&gt;The R community has a package distribution thing called &lt;a href=&#34;https://cran.rstudio.com/web/packages/&#34;&gt;CRAN&lt;/a&gt; just like Ruby has &lt;a href=&#34;https://rubygems.org/&#34;&gt;Rubygems&lt;/a&gt;, and Python has &lt;a href=&#34;https://pypi.python.org/pypi&#34;&gt;Pypi&lt;/a&gt;, etc. On all packages on CRAN, the CRAN maintainers run checks on each package on multiple versions of R and on many operating systems. They report those results on a page associated with the package, like &lt;a href=&#34;https://cran.rstudio.com/web/checks/check_results_crul.html&#34;&gt;this one&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You might be thinking: okay, but we have Travis-CI and friends, so who cares about that?  Well, it&amp;rsquo;s these checks that CRAN runs that will determine if your package on CRAN leads to emails to you asking for changes, and possibly the package being taken down if e.g., they email and you don&amp;rsquo;t respond for a period of time.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<h2 id="the-problem">The problem</h2>
<p>The R community has a package distribution thing called <a href="https://cran.rstudio.com/web/packages/">CRAN</a> just like Ruby has <a href="https://rubygems.org/">Rubygems</a>, and Python has <a href="https://pypi.python.org/pypi">Pypi</a>, etc. On all packages on CRAN, the CRAN maintainers run checks on each package on multiple versions of R and on many operating systems. They report those results on a page associated with the package, like <a href="https://cran.rstudio.com/web/checks/check_results_crul.html">this one</a>.</p>
<p>You might be thinking: okay, but we have Travis-CI and friends, so who cares about that?  Well, it&rsquo;s these checks that CRAN runs that will determine if your package on CRAN leads to emails to you asking for changes, and possibly the package being taken down if e.g., they email and you don&rsquo;t respond for a period of time.</p>
<p>So CRAN provides these package checks. Now what?  Ideally, these would be available through an API so that the data is machine readable, which then makes many other things possible (see <a href="#whats-next">What&rsquo;s Next</a> below).</p>
<p>So how to build the API?</p>
<h2 id="building-the-cran-checks-api">Building the CRAN checks API</h2>
<p>On GitHub: <a href="https://github.com/ropensci/cchecksapi">https://github.com/ropensci/cchecksapi</a></p>
<p>My main goal learning goals with this API tech wise were two fold:</p>
<ul>
<li>learn how to dockerize the application</li>
<li>learn how to use MongoDB</li>
</ul>
<p>I hadn&rsquo;t Dockerized a web API myself before, so that was an important goal - and I had actually never used MongoDB, but wanted to give it a shot to get familiar with it.</p>
<p>The whole stack is:</p>
<ul>
<li>language: Ruby</li>
<li>web API framework: Sinatra</li>
<li>http Ruby gem: faraday</li>
<li>database: mongodb</li>
<li>server: caddy</li>
<li>container: all wrapped up in docker (docker-compose)</li>
<li>hosting: Amazon EC2</li>
<li>scheduling: crontab</li>
</ul>
<p>At a high level, the system is as so:</p>
<ul>
<li>Once a day a few Ruby scripts (<a href="https://github.com/ropensci/cchecksapi/blob/master/scrape.rb">for packages</a>, <a href="https://github.com/ropensci/cchecksapi/blob/master/scrape_maintainer.rb">for maintainers</a>):
<ul>
<li>collects the names of packages on CRAN from GÃ¡bor CsÃ¡rdi&rsquo;s <a href="https://crandb.r-pkg.org">https://crandb.r-pkg.org</a> API and maintainer emails from CRAN itself, then</li>
<li>goes out to the CRAN website and collects check results for each package, then</li>
<li>insert data into a MongoDB database</li>
</ul>
</li>
<li>The API provides routes for getting data on specific packages by name, or all packages, and data on all packages for any given maintainers email adddress, or all maintainers
<ul>
<li>API calls make a query into the MongoDB database matching on the package name or maintainer email address</li>
<li>data is given back as JSON</li>
</ul>
</li>
</ul>
<p>The API doesn&rsquo;t currently use caching, but may add if it seems needed.</p>
<h2 id="ruby-and-sinatra">Ruby and Sinatra</h2>
<p>I really like Ruby. It&rsquo;s a language that is fun to use, the community is great, and there&rsquo;s tons of packages.  Ruby is great for making web stuff, including web APIs. When doing web stuff, for me that means web APIs. For web APIs in Ruby, Rails is too heavy for all the stuff I do - that&rsquo;s where <a href="https://www.sinatrarb.com/">Sinatra</a> comes in.</p>
<p>Sinatra is a lightweight framework for making web apps/APIs. I make all my web APIs with Sinatra, and have had few complaints. Some may say &ldquo;you should use X or Y because faster&rdquo;, or whatever, but Sinatra is plenty fast for my use cases. Not every use case is &ldquo;we&rsquo;re Facebook&rdquo;, or &ldquo;we&rsquo;re Google&rdquo;.</p>
<p>Until recently I&rsquo;ve been very much manually managing my Sinatra web APIs on servers - that is, installing/updating everything on the server itself, without using containers or any configuration management. This blog post is the blog post I would have wanted to read when I was figuring out how to dockerize my web APIs.</p>
<h2 id="the-api">The API</h2>
<p>The main meat of the API is definitions of routes. In addition, I&rsquo;ve included a number of rules about what HTTP verbs are allowed to be used, what headers to send in each response, how to respond to client and server failures, etc.</p>
<p>This is what one of the route definitions looks like:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ruby" data-lang="ruby"><span style="display:flex;"><span>get <span style="color:#e6db74">&#39;/pkgs/?&#39;</span> <span style="color:#66d9ef">do</span>
</span></span><span style="display:flex;"><span>  headers_get
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">begin</span>
</span></span><span style="display:flex;"><span>    lim <span style="color:#f92672">=</span> (params<span style="color:#f92672">[</span><span style="color:#e6db74">:limit</span><span style="color:#f92672">]</span> <span style="color:#f92672">||</span> <span style="color:#ae81ff">10</span>)<span style="color:#f92672">.</span>to_i
</span></span><span style="display:flex;"><span>    off <span style="color:#f92672">=</span> (params<span style="color:#f92672">[</span><span style="color:#e6db74">:offset</span><span style="color:#f92672">]</span> <span style="color:#f92672">||</span> <span style="color:#ae81ff">0</span>)<span style="color:#f92672">.</span>to_i
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">raise</span> <span style="color:#66d9ef">Exception</span><span style="color:#f92672">.</span>new(<span style="color:#e6db74">&#39;limit too large (max 1000)&#39;</span>) <span style="color:#66d9ef">unless</span> lim <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">1000</span>
</span></span><span style="display:flex;"><span>    d <span style="color:#f92672">=</span> $cks<span style="color:#f92672">.</span>find({}, {<span style="color:#e6db74">&#34;limit&#34;</span> <span style="color:#f92672">=&gt;</span> lim, <span style="color:#e6db74">&#34;skip&#34;</span> <span style="color:#f92672">=&gt;</span> off})
</span></span><span style="display:flex;"><span>    dat <span style="color:#f92672">=</span> d<span style="color:#f92672">.</span>to_a
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">raise</span> <span style="color:#66d9ef">Exception</span><span style="color:#f92672">.</span>new(<span style="color:#e6db74">&#39;no results found&#39;</span>) <span style="color:#66d9ef">if</span> d<span style="color:#f92672">.</span>nil?
</span></span><span style="display:flex;"><span>    { <span style="color:#e6db74">found</span>: d<span style="color:#f92672">.</span>count, <span style="color:#e6db74">count</span>: dat<span style="color:#f92672">.</span>length, <span style="color:#e6db74">offset</span>: <span style="color:#66d9ef">nil</span>, <span style="color:#e6db74">error</span>: <span style="color:#66d9ef">nil</span>,
</span></span><span style="display:flex;"><span>      <span style="color:#e6db74">data</span>: dat }<span style="color:#f92672">.</span>to_json
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">rescue</span> <span style="color:#66d9ef">Exception</span> <span style="color:#f92672">=&gt;</span> e
</span></span><span style="display:flex;"><span>    halt <span style="color:#ae81ff">400</span>, { <span style="color:#e6db74">count</span>: <span style="color:#ae81ff">0</span>, <span style="color:#e6db74">error</span>: { <span style="color:#e6db74">message</span>: e<span style="color:#f92672">.</span>message }, <span style="color:#e6db74">data</span>: <span style="color:#66d9ef">nil</span> }<span style="color:#f92672">.</span>to_json
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">end</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">end</span>
</span></span></code></pre></div><p>This code chunk is for the <code>/pkgs</code> route on the API (check it out at <a href="https://cranchecks.info/pkgs">https://cranchecks.info/pkgs</a>). The <code>headers_get</code> bit sends a pre-defined set of headers in the response. The <code>begin ... rescue ... end</code> bit is a &ldquo;try catch&rdquo; thing - leading to a JSON failure response in case there is a failure - and a JSON response on success.</p>
<h2 id="collecting-data-and-mongodb">Collecting data and MongoDB</h2>
<p>As stated above, data is updated once a day. The code for scraping data on the package level and maintainer level is pretty similar. For both, the steps are the following: a) collect all names (for <code>/pkgs</code> that&rsquo;s package names from <a href="https://crandb.r-pkg.org">https://crandb.r-pkg.org</a>; for <code>/maintainers</code> that&rsquo;s maintainer email addresses from <a href="https://cran.rstudio.com/web/checks/check_summary_by_maintainer.html">https://cran.rstudio.com/web/checks/check_summary_by_maintainer.html</a>), b) for each package name or maintainer email scrape CRAN check results, c) with all data collected drop data in MongoDB and then load all new data (maybe this could be an update step?). You can see the gory details on GitHub for <a href="https://github.com/ropensci/cchecksapi/blob/master/scrape.rb">packages</a> and <a href="https://github.com/ropensci/cchecksapi/blob/master/scrape_maintainer.rb">maintainers</a>.</p>
<p>Those steps above in code for packages is like the following:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ruby" data-lang="ruby"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">scrape_all</span>
</span></span><span style="display:flex;"><span>  pkgs <span style="color:#f92672">=</span> cran_packages; <span style="color:#75715e"># get all pkg names</span>
</span></span><span style="display:flex;"><span>  out <span style="color:#f92672">=</span> <span style="color:#f92672">[]</span> <span style="color:#75715e"># make an array</span>
</span></span><span style="display:flex;"><span>  pkgs<span style="color:#f92672">.</span>each <span style="color:#66d9ef">do</span> <span style="color:#f92672">|</span>x<span style="color:#f92672">|</span> <span style="color:#75715e"># for each pkg, scrape check results</span>
</span></span><span style="display:flex;"><span>    out <span style="color:#f92672">&lt;&lt;</span> scrape_pkg(x)
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">end</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> $cks<span style="color:#f92672">.</span>count <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>    $cks<span style="color:#f92672">.</span>drop <span style="color:#75715e"># drop data in Mongo</span>
</span></span><span style="display:flex;"><span>    $cks <span style="color:#f92672">=</span> $mongo<span style="color:#f92672">[</span><span style="color:#e6db74">:checks</span><span style="color:#f92672">]</span> <span style="color:#75715e"># recreate database in Mongo</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">end</span>
</span></span><span style="display:flex;"><span>  $cks<span style="color:#f92672">.</span>insert_many(out<span style="color:#f92672">.</span>map { <span style="color:#f92672">|</span>e<span style="color:#f92672">|</span> prep_mongo(e) }) <span style="color:#75715e"># load new data into Mongo</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">end</span>
</span></span></code></pre></div><p><code>$cks</code> is the MongoDB database connection.</p>
<h2 id="docker">Docker</h2>
<p>For containerizing the API, I used Docker. A colleague had used <a href="https://docs.docker.com/compose/">Docker Compose</a>, and it was a really easy experience spinning up and taking down the application we were working on. So I wanted to learn how to do that myself. After trial and error, finally got to a solution for this API. Here is my <code>docker-compose.yml</code> file:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Dockerfile" data-lang="Dockerfile"><span style="display:flex;"><span>mongo:<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>  image: mongo<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>  volumes:<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>    - $HOME/data/mongodb:/data/db <span style="color:#75715e"># persists data to disk outside container</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>  restart: always<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>  ports:<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>    - <span style="color:#e6db74">&#34;27017:27017&#34;</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>api:<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>  build: .<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>  ports:<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>    - <span style="color:#e6db74">&#34;8834:8834&#34;</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>  links:<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>    - mongo<span style="color:#960050;background-color:#1e0010">
</span></span></span></code></pre></div><p>This specifies the container for MongoDB and for the API, and specifies in the API container to link to the mongo container.</p>
<p>To build and run do</p>
<pre tabindex="0"><code>docker-compose build &amp;&amp; docker-compose up -d
</code></pre><p>The <code>-d</code> flag is for daemonize, i.e., run in the background. To kill them run</p>
<pre tabindex="0"><code>docker-compose stop &amp;&amp; docker-compose rm
</code></pre><h2 id="caddy-server">Caddy server</h2>
<p>Caddy is great server. I never really used Nginx, so I can&rsquo;t compare the two really - I just know that Caddy is super easy. To install, check out the installation page <a href="https://caddyserver.com/download">https://caddyserver.com/download</a>, and it&rsquo;s easy as something like <code>curl https://getcaddy.com | bash -s personal</code> (depends on configuration options on that page and license choice).</p>
<p>I know there&rsquo;s an option to run a separate container with Caddy, but I run Caddy outside containers.</p>
<p>My <code>Caddyfile</code> has something similar to the following:</p>
<pre tabindex="0"><code>cranchecks.info {
  gzip
  tls email@foobar.com

  log / logfile.log &#34;{remote} - [{when}] {method} {uri} {query} {proto} {status} {size} {&gt;User-Agent}&#34; {
     rotate_size 3
  }

  proxy / localhost:8834 {
    transparent
  }
}
</code></pre><ul>
<li><code>gzip</code> tells Caddy to serve gzipp&rsquo;ed content (see <a href="https://caddyserver.com/docs/gzip">https://caddyserver.com/docs/gzip</a>)</li>
<li><code>tls</code> says use the given email for registering with <a href="https://letsencrypt.org/">Letsencrypt</a> (see <a href="https://caddyserver.com/docs/tls">https://caddyserver.com/docs/tls</a>)</li>
<li><code>log</code> line specifies how to log requests (and <code>rotate_size</code> says start a new file when the current one reaches 3 MB) (see <a href="https://caddyserver.com/docs/log">https://caddyserver.com/docs/log</a>)</li>
<li><code>proxy</code> is for specifying reverse proxy (see <a href="https://caddyserver.com/docs/proxy">https://caddyserver.com/docs/proxy</a>)</li>
</ul>
<h2 id="whats-next">What&rsquo;s Next</h2>
<p>There&rsquo;s still more work to do.</p>
<ul>
<li>Better <code>/maintainers</code> results
<ul>
<li>right now, we have two arrays of results, one from the html table on the CRAN results page and the other from the text below it. This duplication isn&rsquo;t ideal.</li>
<li>it would be helpful to have a summary across all packages for any given maintainer</li>
</ul>
</li>
<li>Better <code>/pkgs</code> results
<ul>
<li>it would be helpful to have a summary across all R versions and platforms for any given package</li>
</ul>
</li>
<li>Include actual CRAN check results - CRAN check results can include output of the failures (whether they&rsquo;re in examples or the test suite, or an installation error). The API doesn&rsquo;t currently include that output, but thinking about how it could.</li>
<li>Possibly update data more often. Right now we update once per day. Seems like results do roll in at different times though, perhaps as builds are done for each pkg?</li>
<li>Notification service:  package maintainers can opt-in to notifications when their checks are failing so they can be on top of fixes quickly.  This could be managed through the API itself, with no GUI, but to make it palatable to all types may want to make a super simple web page to sign up.</li>
</ul>
<p>Check out the <a href="https://github.com/ropensci/cchecksapi/issues">issue tracker</a> to follow progress or file a feature request or bug.</p>
<!-- raw HTML omitted -->
<hr>
<h2 id="thanks">Thanks</h2>
<p>Thanks to <a href="https://github.com/gaborcsardi">GÃ¡bor CsÃ¡rdi</a> for the idea to make a <code>/maintainers</code> route.</p>
<h2 id="further-reading">Further reading</h2>
<p>In a <a href="https://blog.cloud66.com/deploying-rest-apis-to-docker-using-ruby-and-sinatra/">similar post</a> Cloud66 folks talked about deploying an API with the same stack essentially: Sinatra, MongoDB, and Docker.</p>
<h2 id="ps">p.s.</h2>
<p>I mostly write about R software, so some readers may use R: if you want to make a web API but only know R, try learning Ruby!  It can&rsquo;t hurt to learn Ruby, and you&rsquo;ll be happy you did.</p>
]]></content:encoded>
    </item>
    <item>
      <title>habanero update: Crossref data from Python</title>
      <link>http://localhost:1313/2017/10/habanero-update/</link>
      <pubDate>Mon, 23 Oct 2017 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2017/10/habanero-update/</guid>
      <description>&lt;p&gt;I wrote about Crossref clients back nearly two years ago on this blog: &lt;a href=&#34;https://recology.info/2015/11/crossref-clients/&#34;&gt;Crossref programmatic clients&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Since it&amp;rsquo;s been a while, it seems worth talking again about the the many ways to work programmatically with Crossref data - and focus in on the Python client &lt;code&gt;habanero&lt;/code&gt; since it has some recent updates.&lt;/p&gt;
&lt;p&gt;The 3 clients work with the main &lt;a href=&#34;https://api.crossref.org&#34;&gt;Crossref API&lt;/a&gt;, which lets you do things like search for works by title, author, etc. (e.g., books, articles), search for publishing members, for funders, for journals, for DOI prefixes, and for licenses. It&amp;rsquo;s a powerful API with basically no rate limits, so you can work through lots of data quickly.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>I wrote about Crossref clients back nearly two years ago on this blog: <a href="https://recology.info/2015/11/crossref-clients/">Crossref programmatic clients</a>.</p>
<p>Since it&rsquo;s been a while, it seems worth talking again about the the many ways to work programmatically with Crossref data - and focus in on the Python client <code>habanero</code> since it has some recent updates.</p>
<p>The 3 clients work with the main <a href="https://api.crossref.org">Crossref API</a>, which lets you do things like search for works by title, author, etc. (e.g., books, articles), search for publishing members, for funders, for journals, for DOI prefixes, and for licenses. It&rsquo;s a powerful API with basically no rate limits, so you can work through lots of data quickly.</p>
<p>Some deets:</p>
<ul>
<li>Crossref API documentation: <a href="https://api.crossref.org">https://api.crossref.org</a></li>
<li>Python client <code>habanero</code>: <a href="https://github.com/sckott/habanero">https://github.com/sckott/habanero</a></li>
<li>Ruby client <code>serrano</code>: <a href="https://github.com/sckott/serrano">https://github.com/sckott/serrano</a></li>
<li>R client <code>rcrossref</code>: <a href="https://github.com/ropensci/rcrossref">https://github.com/ropensci/rcrossref</a></li>
</ul>
<p>At rOpenSci we&rsquo;ve maintained the R client for quite a few years now, but the Python and Ruby clients were a result of consulting work I did for Crossref.</p>
<p>The R, Ruby, and Python clients are all quite feature complete, although software is never perfect :), and the thing about talking to an API to some other software is they can change stuff on their end - then we have to change suff on our end, on and on &hellip;</p>
<p>Back when the earlier blog post was written about these Crossref clients, we were at the first versions of both <a href="https://github.com/sckott/serrano/tree/v0.1.1">serrano</a> and <a href="https://github.com/sckott/habanero/tree/v0.1.0">habanero</a>. As you can see in the changelogs of the three clients (<a href="https://github.com/sckott/serrano/blob/master/CHANGELOG.md">serrano</a>, <a href="https://github.com/sckott/habanero/blob/master/Changelog.rst">habanero</a>, <a href="https://github.com/ropensci/rcrossref/blob/master/NEWS.md">rcrossref</a>) alot has changed in the last two years as we&rsquo;ve made improvements and kept up with Crossref API changes.</p>
<h3 id="ruby-and-r">Ruby and R</h3>
<p>Nothing new to report for the Ruby (<a href="https://github.com/sckott/serrano">serrano</a>) and R (<a href="https://github.com/ropensci/rcrossref">rcrossref</a>) clients, though both will soon be getting the previous features just mentioned (<code>mailto</code> and <code>select</code>).</p>
<h3 id="python-habanero">Python: habanero</h3>
<p>I&rsquo;ve just released a new version of <code>habanero</code> - <a href="https://pypi.python.org/pypi/habanero">v0.6</a>. Noteable changes include adding ability to add a <code>mailto</code> to each request to get into the so called <a href="https://github.com/CrossRef/rest-api-doc#good-manners--more-reliable-service">&ldquo;polite pool&rdquo;</a>; <a href="https://github.com/CrossRef/rest-api-doc#selecting-which-elements-to-return"><code>select</code> parameter</a> added to select certain fields to get back; and the docs got a major overhaul (check em out at <a href="https://habanero.readthedocs.io/en/latest/">https://habanero.readthedocs.io/en/latest/</a>; hope you like it; get in touch if you think docs can be improved).</p>
<p>To install:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>pip3 install habanero
</span></span><span style="display:flex;"><span><span style="color:#75715e"># or</span>
</span></span><span style="display:flex;"><span>pip install habanero
</span></span></code></pre></div><p>To get into the polite pool, add your <code>mailto</code> email address when you instantiate a Crossref object</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> habanero <span style="color:#f92672">import</span> Crossref
</span></span><span style="display:flex;"><span>cr <span style="color:#f92672">=</span> Crossref(mailto <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;foo@bar.com&#34;</span>)
</span></span></code></pre></div><p>Then when you call any  methods on <code>cr</code> your email address is sent in the request headers and you&rsquo;ll get into the polite pool.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>cr<span style="color:#f92672">.</span>works()
</span></span></code></pre></div><p>To use the select parameter, pass a comma separated string or a list of strings (both work):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>cr<span style="color:#f92672">.</span>works(select <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;DOI,title&#34;</span>)
</span></span></code></pre></div><h3 id="habanero-use-cases">habanero use cases</h3>
<p>I&rsquo;ve seen some cool use cases using <code>habanero</code> lately.</p>
<ul>
<li>A bibliographic application at <a href="https://taccimo.info/tbl_sector_list.php">https://taccimo.info/tbl_sector_list.php</a> from <a href="https://github.com/sngordon">Sean Gordon</a>.</li>
<li>An application called <a href="https://github.com/pr-omethe-us/PyKED">PyKED</a> from <a href="https://github.com/kyleniemeyer">Kyle Niemeyer</a> - &ldquo;a Python-based software package for validating and interacting with ChemKED (Chemical Kinetics Experimental Data format) files that describe fundamental experimental measurements of combustion phenomena&rdquo;.</li>
<li>A Django app called <a href="https://tailordev-biblio.herokuapp.com/">TailorDev Biblio</a> from <a href="https://github.com/jmaupetit">Julien Maupetit</a> that manages references.</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>gbifrb: Ruby client for the GBIF API</title>
      <link>http://localhost:1313/2017/09/gbifrb/</link>
      <pubDate>Thu, 07 Sep 2017 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2017/09/gbifrb/</guid>
      <description>&lt;p&gt;&lt;code&gt;gbifrb&lt;/code&gt; is a new Ruby client for the &lt;a href=&#34;https://www.gbif.org/developer/summary&#34;&gt;GBIF API&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;docs: &lt;a href=&#34;https://www.rubydoc.info/gems/gbifrb/&#34;&gt;https://www.rubydoc.info/gems/gbifrb/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;rubygems: &lt;a href=&#34;https://rubygems.org/gems/gbifrb&#34;&gt;https://rubygems.org/gems/gbifrb&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;code: &lt;a href=&#34;https://github.com/sckott/gbifrb&#34;&gt;https://github.com/sckott/gbifrb&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I maintain (w/ help) two other GBIF API clients:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Python: &lt;a href=&#34;https://github.com/sckott/pygbif&#34;&gt;pygbif&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;R: &lt;a href=&#34;https://github.com/ropensci/rgbif&#34;&gt;rgbif&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;api&#34;&gt;API&lt;/h2&gt;
&lt;p&gt;Here&amp;rsquo;s the &lt;code&gt;gbifrb&lt;/code&gt; methods in relation to &lt;a href=&#34;https://www.gbif.org/developer/summary&#34;&gt;GBIF API&lt;/a&gt; routes&lt;/p&gt;
&lt;p&gt;registry&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/node&lt;/code&gt; - &lt;code&gt;Gbif::Registry.nodes&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/network&lt;/code&gt; - &lt;code&gt;Gbif::Registry.networks&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/installations&lt;/code&gt; - &lt;code&gt;Gbif::Registry.installations&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/organizations&lt;/code&gt; - &lt;code&gt;Gbif::Registry.organizations&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/dataset_metrics&lt;/code&gt; - &lt;code&gt;Gbif::Registry.dataset_metrics&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/datasets&lt;/code&gt; - &lt;code&gt;Gbif::Registry.datasets&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/dataset_suggest&lt;/code&gt; - &lt;code&gt;Gbif::Registry.dataset_suggest&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/dataset_search&lt;/code&gt; - &lt;code&gt;Gbif::Registry.dataset_search&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;species&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/species/match&lt;/code&gt; - &lt;code&gt;Gbif::Species.name_backbone&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/species/suggest&lt;/code&gt; - &lt;code&gt;Gbif::Species.name_suggest&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/species/search&lt;/code&gt; - &lt;code&gt;Gbif::Species.name_lookup&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/species&lt;/code&gt; - &lt;code&gt;Gbif::Species.name_usage&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;occurrences&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p><code>gbifrb</code> is a new Ruby client for the <a href="https://www.gbif.org/developer/summary">GBIF API</a>.</p>
<ul>
<li>docs: <a href="https://www.rubydoc.info/gems/gbifrb/">https://www.rubydoc.info/gems/gbifrb/</a></li>
<li>rubygems: <a href="https://rubygems.org/gems/gbifrb">https://rubygems.org/gems/gbifrb</a></li>
<li>code: <a href="https://github.com/sckott/gbifrb">https://github.com/sckott/gbifrb</a></li>
</ul>
<p>I maintain (w/ help) two other GBIF API clients:</p>
<ul>
<li>Python: <a href="https://github.com/sckott/pygbif">pygbif</a></li>
<li>R: <a href="https://github.com/ropensci/rgbif">rgbif</a></li>
</ul>
<h2 id="api">API</h2>
<p>Here&rsquo;s the <code>gbifrb</code> methods in relation to <a href="https://www.gbif.org/developer/summary">GBIF API</a> routes</p>
<p>registry</p>
<ul>
<li><code>/node</code> - <code>Gbif::Registry.nodes</code></li>
<li><code>/network</code> - <code>Gbif::Registry.networks</code></li>
<li><code>/installations</code> - <code>Gbif::Registry.installations</code></li>
<li><code>/organizations</code> - <code>Gbif::Registry.organizations</code></li>
<li><code>/dataset_metrics</code> - <code>Gbif::Registry.dataset_metrics</code></li>
<li><code>/datasets</code> - <code>Gbif::Registry.datasets</code></li>
<li><code>/dataset_suggest</code> - <code>Gbif::Registry.dataset_suggest</code></li>
<li><code>/dataset_search</code> - <code>Gbif::Registry.dataset_search</code></li>
</ul>
<p>species</p>
<ul>
<li><code>/species/match</code> - <code>Gbif::Species.name_backbone</code></li>
<li><code>/species/suggest</code> - <code>Gbif::Species.name_suggest</code></li>
<li><code>/species/search</code> - <code>Gbif::Species.name_lookup</code></li>
<li><code>/species</code> - <code>Gbif::Species.name_usage</code></li>
</ul>
<p>occurrences</p>
<ul>
<li><code>/search</code> - <code>Gbif::Occurrences.search</code></li>
<li><code>/get</code> - <code>Gbif::Occurrences.get</code></li>
<li><code>/get_verbatim</code> - <code>Gbif::Occurrences.get_verbatim</code></li>
<li><code>/get_fragment</code> - <code>Gbif::Occurrences.get_fragment</code></li>
</ul>
<h2 id="install">Install</h2>
<pre tabindex="0"><code>gem install gbifrb
</code></pre><h2 id="registry">Registry</h2>
<p>Nodes</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ruby" data-lang="ruby"><span style="display:flex;"><span>require <span style="color:#e6db74">&#39;gbifrb&#39;</span>
</span></span><span style="display:flex;"><span>registry <span style="color:#f92672">=</span> <span style="color:#66d9ef">Gbif</span><span style="color:#f92672">::</span><span style="color:#66d9ef">Registry</span>
</span></span><span style="display:flex;"><span>registry<span style="color:#f92672">.</span>nodes(<span style="color:#e6db74">limit</span>: <span style="color:#ae81ff">5</span>)
</span></span></code></pre></div><p>Networks</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ruby" data-lang="ruby"><span style="display:flex;"><span>registry<span style="color:#f92672">.</span>networks(<span style="color:#e6db74">uuid</span>: <span style="color:#e6db74">&#39;16ab5405-6c94-4189-ac71-16ca3b753df7&#39;</span>)
</span></span></code></pre></div><h2 id="species">Species</h2>
<p>GBIF backbone</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ruby" data-lang="ruby"><span style="display:flex;"><span>species <span style="color:#f92672">=</span> <span style="color:#66d9ef">Gbif</span><span style="color:#f92672">::</span><span style="color:#66d9ef">Species</span>
</span></span><span style="display:flex;"><span>species<span style="color:#f92672">.</span>name_backbone(name: <span style="color:#e6db74">&#34;Helianthus&#34;</span>)
</span></span></code></pre></div><p>Suggester</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ruby" data-lang="ruby"><span style="display:flex;"><span>species<span style="color:#f92672">.</span>name_suggest(<span style="color:#e6db74">&#34;Helianthus&#34;</span>)
</span></span></code></pre></div><h2 id="occurrences">Occurrences</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ruby" data-lang="ruby"><span style="display:flex;"><span>occ <span style="color:#f92672">=</span> <span style="color:#66d9ef">Gbif</span><span style="color:#f92672">::</span><span style="color:#66d9ef">Occurrences</span>
</span></span><span style="display:flex;"><span>occ<span style="color:#f92672">.</span>search(<span style="color:#e6db74">taxonKey</span>: <span style="color:#ae81ff">3329049</span>)
</span></span><span style="display:flex;"><span>occ<span style="color:#f92672">.</span>search(<span style="color:#e6db74">taxonKey</span>: <span style="color:#ae81ff">3329049</span>, <span style="color:#e6db74">limit</span>: <span style="color:#ae81ff">2</span>)
</span></span><span style="display:flex;"><span>occ<span style="color:#f92672">.</span>search(<span style="color:#e6db74">scientificName</span>: <span style="color:#e6db74">&#39;Ursus americanus&#39;</span>)
</span></span></code></pre></div><h2 id="curl-options">curl options</h2>
<p>You can do verbose curl output by settin <code>verbiose: true</code>. See also the parameter <code>options</code>, passed on to <code>Faraday</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ruby" data-lang="ruby"><span style="display:flex;"><span>species <span style="color:#f92672">=</span> <span style="color:#66d9ef">Gbif</span><span style="color:#f92672">::</span><span style="color:#66d9ef">Species</span>
</span></span><span style="display:flex;"><span>species<span style="color:#f92672">.</span>name_backbone(<span style="color:#e6db74">&#34;Helianthus&#34;</span>, <span style="color:#e6db74">verbose</span>: <span style="color:#66d9ef">true</span>)
</span></span></code></pre></div><h2 id="todo">Todo</h2>
<p>Still need to work on the CLI interface, add occurrence metrics methods, add occurrence downloads methods, and add OAI-PMH interface methods.</p>
<h2 id="feedback">Feedback</h2>
<p>Let me know what you think. Bugs. Featur requests. Etc.</p>
]]></content:encoded>
    </item>
    <item>
      <title>gbids - GenBank IDs API is back up!</title>
      <link>http://localhost:1313/2016/09/gbids-is-back/</link>
      <pubDate>Thu, 01 Sep 2016 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2016/09/gbids-is-back/</guid>
      <description>&lt;h2 id=&#34;gbids-api-is-back&#34;&gt;GBIDS API is back&lt;/h2&gt;
&lt;p&gt;Back in March this year I wrote &lt;a href=&#34;https://recology.info/2016/03/genbank-ids/&#34;&gt;a post about a new API for working with GenBank IDs&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I had to take the API down because it was too expensive to keep up. Expensive because the dump of data is very large (3.8 GB compressed), and I need disk space on the server to uncompress that to I think about 18 GB, then load into MySQL, which is another maybe 30 GB or so. Anyway, it&amp;rsquo;s not expensive because of high traffic - although I wish that was the case - but because of needing lots of disk space.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<h2 id="gbids-api-is-back">GBIDS API is back</h2>
<p>Back in March this year I wrote <a href="https://recology.info/2016/03/genbank-ids/">a post about a new API for working with GenBank IDs</a>.</p>
<p>I had to take the API down because it was too expensive to keep up. Expensive because the dump of data is very large (3.8 GB compressed), and I need disk space on the server to uncompress that to I think about 18 GB, then load into MySQL, which is another maybe 30 GB or so. Anyway, it&rsquo;s not expensive because of high traffic - although I wish that was the case - but because of needing lots of disk space.</p>
<p>I was fortuntate to recently receive some <a href="https://aws.amazon.com/research-credits/">Amazon Cloud Credits for Research</a>. The credits expire in 1 year. With these credits, I&rsquo;ve put the GBIDS API back up. In the next year I&rsquo;m hoping to gain user traction suggesting that&rsquo;s is useful to enough people to keep maintaining - in which case I&rsquo;ll seek ways to fund it.</p>
<p>But that means I need people to use it!  So please to give it a try. Let me know what could be better; what could be faster; what API routes/features/etc. you&rsquo;d like to see.</p>
<h2 id="plans">Plans</h2>
<p>Plans for the future of the GBIDS API:</p>
<ul>
<li>Auto-update the Genbank data. This is quite complicated since the dump is so large. I can either keep an EC2 attached disc large enough to do the dump download/expansion/load/etc, or spin up a new instance each Sunday when they do their data release, do the SQL load, make a dump, then shuttle the SQL dump to the instance running, then load in the new data from the dump. I haven&rsquo;t got this bit running yet, so data is from Aug 7. 2016.</li>
<li>Add taxonomic IDs. Genbank also dumps their taxonomic IDs. I think it should be possible to get taxonomic IDs into the API, so that users can do accession number to taxon IDs and vice versa.</li>
<li>Performance: as anyone would want, I want to continually improve performance. I&rsquo;ll watch out for things I can do, but also let me know what seems too slow.</li>
</ul>
<h2 id="links">Links</h2>
<ul>
<li>API base url: <a href="https://gbids.xyz">https://gbids.xyz</a></li>
<li>API docs: <a href="https://recology.info/gbidsdocs">https://recology.info/gbidsdocs</a> - Let me know if these could be improved</li>
<li>API status page: <a href="https://recology.info/gbidsstatus">https://recology.info/gbidsstatus</a> - I update this page whenever there&rsquo;s some down time, then when it&rsquo;s back up, etc.</li>
<li>API source code: <a href="https://github.com/sckott/gbids">https://github.com/sckott/gbids</a> - You can file issues here about the API</li>
</ul>
<h2 id="try-it">Try it</h2>
<p>Get 5 accession numbers</p>
<pre tabindex="0"><code>curl &#39;https://gbids.xyz/acc?limit=5&#39; | jq .
#&gt; {
#&gt;   &#34;matched&#34;: 692006925,
#&gt;   &#34;returned&#34;: 5,
#&gt;   &#34;data&#34;: [
#&gt;     &#34;A00002&#34;,
#&gt;     &#34;A00003&#34;,
#&gt;     &#34;X17276&#34;,
#&gt;     &#34;X60065&#34;,
#&gt;     &#34;CAA42669&#34;
#&gt;   ],
#&gt;   &#34;error&#34;: null
#&gt; }
</code></pre><p>Request to match accession identifiers, some exist, while some do not</p>
<pre tabindex="0"><code>curl &#39;https://gbids.xyz/acc/AACY024124486,AACY024124483,asdfd,asdf,AACY024124476&#39; | jq .
#&gt; {
#&gt;   &#34;matched&#34;: 3,
#&gt;   &#34;returned&#34;: 5,
#&gt;   &#34;data&#34;: {
#&gt;     &#34;AACY024124486&#34;: true,
#&gt;     &#34;AACY024124483&#34;: true,
#&gt;     &#34;asdfd&#34;: false,
#&gt;     &#34;asdf&#34;: false,
#&gt;     &#34;AACY024124476&#34;: true
#&gt;   },
#&gt;   &#34;error&#34;: null
#&gt; }
</code></pre><p>There&rsquo;s many more examples in the <a href="https://recology.info/gbidsdocs">API docs</a></p>
]]></content:encoded>
    </item>
    <item>
      <title>GenBank IDs API - get, match, swap id types</title>
      <link>http://localhost:1313/2016/03/genbank-ids/</link>
      <pubDate>Tue, 29 Mar 2016 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2016/03/genbank-ids/</guid>
      <description>&lt;p&gt;GenBank IDs, accession numbers and GI identifiers, are the two types of identifiers for entries in GenBank. (see &lt;a href=&#34;https://www.ncbi.nlm.nih.gov/Sitemap/sequenceIDs.html&#34;&gt;this page&lt;/a&gt; for why there are two types of identifiers). Actually, &lt;a href=&#34;https://www.ncbi.nlm.nih.gov/news/03-02-2016-phase-out-of-GI-numbers/&#34;&gt;recent news&lt;/a&gt; from NCBI is that GI identifiers will be phased out by September this year, which affects what I&amp;rsquo;ll talk about below.&lt;/p&gt;
&lt;p&gt;There are a lot of sequences in GenBank. Sometimes you have identifiers and you want to check if they exist in GenBank, or want to get one type from another (accession from GI, or vice versa; although GI phase out will make this use case no longer needed), or just get a bunch of identifiers for software testing purposes perhaps.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>GenBank IDs, accession numbers and GI identifiers, are the two types of identifiers for entries in GenBank. (see <a href="https://www.ncbi.nlm.nih.gov/Sitemap/sequenceIDs.html">this page</a> for why there are two types of identifiers). Actually, <a href="https://www.ncbi.nlm.nih.gov/news/03-02-2016-phase-out-of-GI-numbers/">recent news</a> from NCBI is that GI identifiers will be phased out by September this year, which affects what I&rsquo;ll talk about below.</p>
<p>There are a lot of sequences in GenBank. Sometimes you have identifiers and you want to check if they exist in GenBank, or want to get one type from another (accession from GI, or vice versa; although GI phase out will make this use case no longer needed), or just get a bunch of identifiers for software testing purposes perhaps.</p>
<p>Currently, the ENTREZ web services aren&rsquo;t super performant or easy to use for the above use cases. Thus, I&rsquo;ve built out a RESTful API for these use cases, called <a href="https://github.com/sckott/gbids">gbids</a>.</p>
<p><code>gbids</code> on GitHub: <a href="https://github.com/sckott/gbids">sckott/gbids</a></p>
<p>Here&rsquo;s the tech stack:</p>
<ul>
<li>API: Ruby/Sinatra</li>
<li>Storage: MySQL</li>
<li>Caching: Redis
<ul>
<li>each key cached for 3 hours</li>
</ul>
</li>
<li>Server: Caddy
<ul>
<li>https</li>
</ul>
</li>
<li>Authentication: none</li>
</ul>
<p>Will soon have a cron job update when new dump is available every Sunday, but for now we&rsquo;re about a month behind the current dump of identifiers. If usage of the API picks up, I&rsquo;ll know it&rsquo;s worth maintaining and make sure data is up to date.</p>
<p>The base url is <a href="https://gbids.xyz">https://gbids.xyz</a></p>
<p>Here&rsquo;s a rundown of the API routes:</p>
<ul>
<li><code>/</code> re-routes to <code>/heartbeat</code></li>
<li><code>/heartbeat</code> - list routes</li>
<li><code>/acc</code> - <code>GET</code> - list accession ids</li>
<li><code>/acc/:id,:id,...</code> - <code>GET</code> - submit many accession numbers, get back boolean (match or no match)</li>
<li><code>/acc</code> - <code>POST</code></li>
<li><code>/gi</code> - <code>GET</code> - list gi numbers</li>
<li><code>/gi/:id,:id,...</code> - <code>GET</code> - submit many gi numbers, get back boolean (match or no match)</li>
<li><code>/gi</code> - <code>POST</code></li>
<li><code>/acc2gi/:id,:id,...</code> - <code>GET</code> - get gi numbers from accession numbers</li>
<li><code>/acc2gi</code> - <code>POST</code></li>
<li><code>/gi2acc/:id,:id,...</code> - <code>GET</code> - get accession numbers from gi numbers</li>
<li><code>/gi2acc</code> - <code>POST</code></li>
</ul>
<p>Of course after GI identifiers are phased out, all <code>gi</code> routes will be removed.</p>
<p>The API docs are at <a href="https://recology.info/gbidsdocs">recology.info/gbidsdocs</a> - let me know if you have any feedback on those.</p>
<p>I also have a status page up at <a href="https://recology.info/gbidsstatus/">recology.info/gbidsstatus</a> - it&rsquo;s not automated, I have to update the status manually, but I do update that page whenever I&rsquo;m doing maintenance and the API will be down, or if it goes down due to any other reason.</p>
<h2 id="examples">examples</h2>
<p>Request to list accession identifiers, limit to 5</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>curl <span style="color:#e6db74">&#39;https://gbids.xyz/acc?limit=5&#39;</span> | jq .
</span></span><span style="display:flex;"><span><span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;matched&#34;</span>: 692006925,
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;returned&#34;</span>: 5,
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;data&#34;</span>: <span style="color:#f92672">[</span>
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;A00002&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;A00003&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;X17276&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;X60065&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;CAA42669&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">]</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;error&#34;</span>: null
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><p>Request to match accession identifiers, some exist, while some do not</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>curl <span style="color:#e6db74">&#39;https://gbids.xyz/acc/AACY024124486,AACY024124483,asdfd,asdf,AACY024124476&#39;</span> | jq .
</span></span><span style="display:flex;"><span><span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;matched&#34;</span>: 3,
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;returned&#34;</span>: 5,
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;data&#34;</span>: <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;AACY024124486&#34;</span>: true,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;AACY024124483&#34;</span>: true,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;asdfd&#34;</span>: false,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;asdf&#34;</span>: false,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;AACY024124476&#34;</span>: true
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">}</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;error&#34;</span>: null
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><h2 id="to-do">to do</h2>
<p>I think it&rsquo;d probably be worth adding routes for getting accession from taxonomy id and vice versa since that&rsquo;s something that is currently not very easy. We could use the dumped accession2taxid data from <a href="ftp://ftp.ncbi.nih.gov/pub/taxonomy/accession2taxid/">ftp://ftp.ncbi.nih.gov/pub/taxonomy/accession2taxid/</a></p>
<h2 id="feedback">feedback!</h2>
<p>If you think this could be potentially useful, do try it out and send any feedback. I watch logs from the API, so I&rsquo;m hoping for an increase in usage so I know people find it useful.</p>
<p>Since servers aren&rsquo;t free, costs add up, and if I don&rsquo;t see usage pick up I&rsquo;ll discontinue the service at some point. So do use it!</p>
<p>And if anyone can offer free servers, I&rsquo;d gladly take advantage of that. I&rsquo;ve applied for AWS research grant, but won&rsquo;t hear back for a few months.</p>
]]></content:encoded>
    </item>
    <item>
      <title>heythere - a robot to automate GitHub issue comments</title>
      <link>http://localhost:1313/2016/03/hey-there/</link>
      <pubDate>Thu, 24 Mar 2016 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2016/03/hey-there/</guid>
      <description>&lt;p&gt;GitHub issues are great for humans to correspond over software, or any other project. At rOpenSci we use an issue based software review system (&lt;a href=&#34;https://github.com/ropensci/onboarding&#34;&gt;ropensci/onboarding&lt;/a&gt;). Software authors and reviewers go back and forth on the software, making a better product in the end.&lt;/p&gt;
&lt;p&gt;We have a relatively small number of pieces of software under review at any one time compared to e.g., scientific journals - however, even with the small number, we as organizers, and authors and reviewers can forget things. For example:&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>GitHub issues are great for humans to correspond over software, or any other project. At rOpenSci we use an issue based software review system (<a href="https://github.com/ropensci/onboarding">ropensci/onboarding</a>). Software authors and reviewers go back and forth on the software, making a better product in the end.</p>
<p>We have a relatively small number of pieces of software under review at any one time compared to e.g., scientific journals - however, even with the small number, we as organizers, and authors and reviewers can forget things. For example:</p>
<ul>
<li>an organizer can forget to remind a reviewer to get a review in</li>
<li>a reviewer can forget about a review, and may benefit from a friendly reminder</li>
<li>an author may forget about updating software based on the review</li>
</ul>
<p>As we are managing more package submissions through our system, automated things done by machine, or robot, will be increasingly helpful to keep the system moving smoothly.</p>
<p>A big red flag with automated systems is the annoyance factor. We can try to be smart about this and only remind people when it&rsquo;s really needed.</p>
<p>I&rsquo;ve been working on a thing for a while now, it&rsquo;s called <code>heythere</code>. It&rsquo;s a Ruby application that is currently set up to run on Heroku, though you could run it anywhere you want. It&rsquo;s running right now once per day to check to see if it should send any reminders to organizers, authors, reviewers.</p>
<p><code>heythere</code> on GitHub: <a href="https://github.com/ropenscilabs/heythere">ropenscilabs/heythere</a></p>
<h2 id="how-it-works">How it works</h2>
<p><code>heythere</code> is controlled through a series of environment variables that controls GitHub authentication, the first day post reviewer assignment when a reminder should be sent, how many days after reviews are submitted to ask if the author needs any help, and more. Check out the <a href="https://github.com/ropenscilabs/heythere">repo</a> for all the env var options.</p>
<p>The Ruby app can be run via a rake task from the command line, or triggered with a scheduler on something like Heroku.</p>
<p>When the app runs, we look for environment variables that you set. If we don&rsquo;t find them we use sensible defaults.</p>
<p>Using the env vars, we grab the issues for the repository you chose, limit to a subset of your choosing based on a series of labels, then compare dates on comments compared to your env vars, and either skip or send of comments on issues.</p>
<p>We use <a href="https://github.com/octokit/octokit.rb">ockokit</a> under the hood to work with GitHub issues.</p>
<h2 id="how-to-use-it">How to use it</h2>
<h3 id="clone">clone</h3>
<pre tabindex="0"><code>git clone git@github.com:ropenscilabs/heythere.git
cd heythere
</code></pre><h3 id="setup">setup</h3>
<p>Change the repo in <code>Rakefile</code> to whatever your repository is.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ruby" data-lang="ruby"><span style="display:flex;"><span><span style="color:#66d9ef">Heythere</span><span style="color:#f92672">.</span>hey_there(repo <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;ropensci/onboarding&#39;</span>)
</span></span></code></pre></div><p>Create the app (use a different name, of course)</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>heroku apps:create ropensci-hey-there
</span></span></code></pre></div><p>Add the repository that you are targeting:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>heroku config:add HEYTHERE_REPOSITORY<span style="color:#f92672">=</span>&lt;github-repository&gt; <span style="color:#f92672">(</span>like <span style="color:#e6db74">`</span>owner/repo<span style="color:#e6db74">`</span><span style="color:#f92672">)</span>
</span></span></code></pre></div><p>Create a GitHub personal access token just for this application. You&rsquo;ll need to set a env var for your username and the token. We read these in the app.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>heroku config:add GITHUB_USERNAME<span style="color:#f92672">=</span>&lt;github-user&gt;
</span></span><span style="display:flex;"><span>heroku config:add GITHUB_PAT_OCTOKIT<span style="color:#f92672">=</span>&lt;github-pat-for-octokit&gt;
</span></span></code></pre></div><p>Optionally, set env vars for various options. You don&rsquo;t have to set these - we&rsquo;ll use defaults</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>heroku config:add HEYTHERE_PRE_DEADLINE_DAYS<span style="color:#f92672">=</span>&lt;number-of-days-integer&gt;
</span></span><span style="display:flex;"><span>heroku config:add HEYTHERE_DEADLINE_DAYS<span style="color:#f92672">=</span>&lt;number-of-days-integer&gt;
</span></span><span style="display:flex;"><span>heroku config:add HEYTHERE_POST_DEADLINE_EVERY_DAYS<span style="color:#f92672">=</span>&lt;number-of-days-integer&gt;
</span></span><span style="display:flex;"><span>heroku config:add HEYTHERE_POST_REVIEW_IN_DAYS<span style="color:#f92672">=</span>&lt;number-of-days-integer&gt;
</span></span><span style="display:flex;"><span>heroku config:add HEYTHERE_POST_REVIEW_TOGGLE<span style="color:#f92672">=</span>&lt;boolean&gt;
</span></span><span style="display:flex;"><span>heroku config:add HEYTHERE_BOT_NICKNAME<span style="color:#f92672">=</span>&lt;string&gt;
</span></span></code></pre></div><p>Also save all these env vars in your <code>.bash_profile</code>, <code>.zshrc</code>, or similar so you can run the app locally. E.g. with entries like <code>export HEYTHERE_PRE_DEADLINE_DAYS=15</code></p>
<p>You can see all your Heroku config vars using <code>heroku config</code> or use <code>rake envs</code></p>
<p>Push your app to Heroku</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>git push heroku master
</span></span></code></pre></div><p>Add the scheduler to your heroku app</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>heroku addons:create scheduler:standard
</span></span><span style="display:flex;"><span>heroku addons:open scheduler
</span></span></code></pre></div><p>Add the task <code>rake hey</code> to your heroku scheduler and set to whatever schedule you want.</p>
<h3 id="usage">usage</h3>
<p>If you have your repo in an env var as above, run the rake task <code>hey</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>rake hey
</span></span></code></pre></div><p>If not, then pass the repo to <code>hey</code> like</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>rake hey repo<span style="color:#f92672">=</span>owner/repo
</span></span></code></pre></div><h3 id="what-does-it-look-like">what does it look like?</h3>
<p>This is what a comment looks like in a thread</p>
<p><img alt="assertr_img" loading="lazy" src="/2016-03-24-hey-there/testhey.png"></p>
<p>You could set up a different GitHub account as your robot so it&rsquo;s clearly not coming from a real person.</p>
<h2 id="feedback">feedback</h2>
<p>I&rsquo;ll continue to improve <code>heythere</code> as we get feedback on its use in <code>ropensci/onboarding</code>. Would also love any feedback from you, internet. Thanks!</p>
]]></content:encoded>
    </item>
    <item>
      <title>Crossref programmatic clients</title>
      <link>http://localhost:1313/2015/11/crossref-clients/</link>
      <pubDate>Mon, 30 Nov 2015 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2015/11/crossref-clients/</guid>
      <description>&lt;p&gt;I gave two talks recently at the annual &lt;a href=&#34;https://www.crossref.org/annualmeeting/agenda.html&#34;&gt;Crossref meeting&lt;/a&gt;, one of which was a somewhat technical overview of programmatic clients for Crossref APIs. Check out the talk &lt;a href=&#34;https://crossref.wistia.com/medias/8rh0jm5eda&#34;&gt;here&lt;/a&gt;. I talked about the motivation for working with Crossref data by writing code/etc. rather than going the GUI route, then went over the various clients, with brief examples.&lt;/p&gt;
&lt;p&gt;We (rOpenSci) have been working on the R client &lt;a href=&#34;https://github.com/ropensci/rcrossref&#34;&gt;rcrossref&lt;/a&gt; for a while now, but I&amp;rsquo;m also working on the Python and Ruby clients for Crossref. In addition, the Ruby client has a CLI client inside. The Javascript client is worked on independently by &lt;a href=&#34;https://science.ai/&#34;&gt;ScienceAI&lt;/a&gt;.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>I gave two talks recently at the annual <a href="https://www.crossref.org/annualmeeting/agenda.html">Crossref meeting</a>, one of which was a somewhat technical overview of programmatic clients for Crossref APIs. Check out the talk <a href="https://crossref.wistia.com/medias/8rh0jm5eda">here</a>. I talked about the motivation for working with Crossref data by writing code/etc. rather than going the GUI route, then went over the various clients, with brief examples.</p>
<p>We (rOpenSci) have been working on the R client <a href="https://github.com/ropensci/rcrossref">rcrossref</a> for a while now, but I&rsquo;m also working on the Python and Ruby clients for Crossref. In addition, the Ruby client has a CLI client inside. The Javascript client is worked on independently by <a href="https://science.ai/">ScienceAI</a>.</p>
<p>The R, Ruby, and Python clients are useable but not feature complete yet, and would benefit from lots of users surfacing bugs and highlighting nice to have features.</p>
<p>The main Crossref API used in all the clients is documented at <a href="https://github.com/CrossRef/rest-api-doc/blob/master/rest_api.md">api.crossref.org</a>.</p>
<p>I&rsquo;ve tried to make the APIs similar-ish across clients. Functions in each client match the main Crossref search API (api.crossref.org) routes:</p>
<ul>
<li><code>/works</code></li>
<li><code>/members</code></li>
<li><code>/funders</code></li>
<li><code>/journals</code></li>
<li><code>/types</code></li>
<li><code>/licenses</code></li>
</ul>
<p>Other methods in all three clients:</p>
<ul>
<li>Get DOI minting agency
<ul>
<li>Uses api.crossref.org API</li>
</ul>
</li>
<li>Get random DOIs
<ul>
<li>Uses api.crossref.org API</li>
</ul>
</li>
<li>Content negotiation
<ul>
<li>Documented at <a href="https://www.crosscite.org/cn">https://www.crosscite.org/cn</a></li>
</ul>
</li>
<li>Get full text
<ul>
<li>other clients in each language will focus on this use case</li>
</ul>
</li>
<li>Get citation count
<ul>
<li>Uses service at <a href="https://www.crossref.org/openurl">https://www.crossref.org/openurl</a> - though this functionality may be in the api.crossref.org API at some point</li>
</ul>
</li>
</ul>
<p>The following shows how to install, and then examples from each client for a few use cases.</p>
<h2 id="installation">Installation</h2>
<h3 id="python">Python</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>pip install habanero
</span></span></code></pre></div><h3 id="ruby">Ruby</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>gem install serrano
</span></span></code></pre></div><h3 id="r">R</h3>
<p>Inside R:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-R" data-lang="R"><span style="display:flex;"><span><span style="color:#a6e22e">install.packages</span>(<span style="color:#e6db74">&#34;rcrossref&#34;</span>)
</span></span></code></pre></div><h3 id="javascript">Javascript</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>npm install crossref
</span></span></code></pre></div><p>I won&rsquo;t do any examples with the js library, as I don&rsquo;t maintain it.</p>
<h2 id="use-case-get-orcid-ids-for-authors">Use case: get ORCID IDs for authors</h2>
<p>Python</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python3" data-lang="python3"><span style="display:flex;"><span><span style="color:#f92672">from</span> habanero <span style="color:#f92672">import</span> Crossref
</span></span><span style="display:flex;"><span>cr <span style="color:#f92672">=</span> Crossref()
</span></span><span style="display:flex;"><span>res <span style="color:#f92672">=</span> cr<span style="color:#f92672">.</span>works(filter <span style="color:#f92672">=</span> {<span style="color:#e6db74">&#39;has_orcid&#39;</span>: <span style="color:#66d9ef">True</span>}, limit <span style="color:#f92672">=</span> <span style="color:#ae81ff">10</span>)
</span></span><span style="display:flex;"><span>res2 <span style="color:#f92672">=</span> [ [ z<span style="color:#f92672">.</span>get(<span style="color:#e6db74">&#39;ORCID&#39;</span>) <span style="color:#66d9ef">for</span> z <span style="color:#f92672">in</span> x[<span style="color:#e6db74">&#39;author&#39;</span>] ] <span style="color:#66d9ef">for</span> x <span style="color:#f92672">in</span> res<span style="color:#f92672">.</span>result[<span style="color:#e6db74">&#39;message&#39;</span>][<span style="color:#e6db74">&#39;items&#39;</span>] ]
</span></span><span style="display:flex;"><span>filter(<span style="color:#66d9ef">None</span>, reduce(<span style="color:#66d9ef">lambda</span> x, y: x<span style="color:#f92672">+</span>y, res2))
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python3" data-lang="python3"><span style="display:flex;"><span>[<span style="color:#e6db74">u</span><span style="color:#e6db74">&#39;https://orcid.org/0000-0003-4087-8021&#39;</span>,
</span></span><span style="display:flex;"><span> <span style="color:#e6db74">u</span><span style="color:#e6db74">&#39;https://orcid.org/0000-0002-2076-5452&#39;</span>,
</span></span><span style="display:flex;"><span> <span style="color:#e6db74">u</span><span style="color:#e6db74">&#39;https://orcid.org/0000-0003-4087-8021&#39;</span>,
</span></span><span style="display:flex;"><span> <span style="color:#e6db74">u</span><span style="color:#e6db74">&#39;https://orcid.org/0000-0002-2076-5452&#39;</span>,
</span></span><span style="display:flex;"><span> <span style="color:#e6db74">u</span><span style="color:#e6db74">&#39;https://orcid.org/0000-0003-1710-1580&#39;</span>,
</span></span><span style="display:flex;"><span> <span style="color:#e6db74">u</span><span style="color:#e6db74">&#39;https://orcid.org/0000-0003-1710-1580&#39;</span>,
</span></span><span style="display:flex;"><span> <span style="color:#e6db74">u</span><span style="color:#e6db74">&#39;https://orcid.org/0000-0003-4637-238X&#39;</span>,
</span></span><span style="display:flex;"><span> <span style="color:#e6db74">u</span><span style="color:#e6db74">&#39;https://orcid.org/0000-0003-4637-238X&#39;</span>,
</span></span><span style="display:flex;"><span> <span style="color:#e6db74">u</span><span style="color:#e6db74">&#39;https://orcid.org/0000-0003-4637-238X&#39;</span>,
</span></span><span style="display:flex;"><span> <span style="color:#e6db74">u</span><span style="color:#e6db74">&#39;https://orcid.org/0000-0003-4637-238X&#39;</span>,
</span></span><span style="display:flex;"><span> <span style="color:#e6db74">u</span><span style="color:#e6db74">&#39;https://orcid.org/0000-0003-4637-238X&#39;</span>,
</span></span><span style="display:flex;"><span> <span style="color:#e6db74">u</span><span style="color:#e6db74">&#39;https://orcid.org/0000-0003-2510-4271&#39;</span>]
</span></span></code></pre></div><p>Ruby</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ruby" data-lang="ruby"><span style="display:flex;"><span>require <span style="color:#e6db74">&#39;serrano&#39;</span>
</span></span><span style="display:flex;"><span>res <span style="color:#f92672">=</span> <span style="color:#66d9ef">Serrano</span><span style="color:#f92672">.</span>works(<span style="color:#e6db74">filter</span>: {<span style="color:#e6db74">&#39;has_orcid&#39;</span>: <span style="color:#66d9ef">true</span>}, <span style="color:#e6db74">limit</span>: <span style="color:#ae81ff">10</span>)
</span></span><span style="display:flex;"><span>res2 <span style="color:#f92672">=</span> res<span style="color:#f92672">[</span><span style="color:#e6db74">&#39;message&#39;</span><span style="color:#f92672">][</span><span style="color:#e6db74">&#39;items&#39;</span><span style="color:#f92672">].</span>collect { <span style="color:#f92672">|</span>x<span style="color:#f92672">|</span> x<span style="color:#f92672">[</span><span style="color:#e6db74">&#39;author&#39;</span><span style="color:#f92672">].</span>collect { <span style="color:#f92672">|</span>z<span style="color:#f92672">|</span> z<span style="color:#f92672">[</span><span style="color:#e6db74">&#39;ORCID&#39;</span><span style="color:#f92672">]</span> } }
</span></span><span style="display:flex;"><span>res2<span style="color:#f92672">.</span>flatten<span style="color:#f92672">.</span>compact
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ruby" data-lang="ruby"><span style="display:flex;"><span><span style="color:#f92672">=&gt;</span> <span style="color:#f92672">[</span><span style="color:#e6db74">&#34;https://orcid.org/0000-0003-4087-8021&#34;</span>,
</span></span><span style="display:flex;"><span> <span style="color:#e6db74">&#34;https://orcid.org/0000-0002-2076-5452&#34;</span>,
</span></span><span style="display:flex;"><span> <span style="color:#e6db74">&#34;https://orcid.org/0000-0003-4087-8021&#34;</span>,
</span></span><span style="display:flex;"><span> <span style="color:#e6db74">&#34;https://orcid.org/0000-0002-2076-5452&#34;</span>,
</span></span><span style="display:flex;"><span> <span style="color:#e6db74">&#34;https://orcid.org/0000-0003-1710-1580&#34;</span>,
</span></span><span style="display:flex;"><span> <span style="color:#e6db74">&#34;https://orcid.org/0000-0003-1710-1580&#34;</span>,
</span></span><span style="display:flex;"><span> <span style="color:#e6db74">&#34;https://orcid.org/0000-0003-4637-238X&#34;</span>,
</span></span><span style="display:flex;"><span> <span style="color:#e6db74">&#34;https://orcid.org/0000-0003-4637-238X&#34;</span>,
</span></span><span style="display:flex;"><span> <span style="color:#e6db74">&#34;https://orcid.org/0000-0003-4637-238X&#34;</span>,
</span></span><span style="display:flex;"><span> <span style="color:#e6db74">&#34;https://orcid.org/0000-0003-4637-238X&#34;</span>,
</span></span><span style="display:flex;"><span> <span style="color:#e6db74">&#34;https://orcid.org/0000-0003-4637-238X&#34;</span>,
</span></span><span style="display:flex;"><span> <span style="color:#e6db74">&#34;https://orcid.org/0000-0003-2510-4271&#34;</span><span style="color:#f92672">]</span>
</span></span></code></pre></div><p>R</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-R" data-lang="R"><span style="display:flex;"><span><span style="color:#a6e22e">library</span>(<span style="color:#e6db74">&#34;rcrossref&#34;</span>)
</span></span><span style="display:flex;"><span>res <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">cr_works</span>(filter<span style="color:#f92672">=</span><span style="color:#a6e22e">c</span>(has_orcid<span style="color:#f92672">=</span><span style="color:#66d9ef">TRUE</span>), limit <span style="color:#f92672">=</span> <span style="color:#ae81ff">10</span>)
</span></span><span style="display:flex;"><span>orcids <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">unlist</span>(<span style="color:#a6e22e">lapply</span>(res<span style="color:#f92672">$</span>data<span style="color:#f92672">$</span>author, <span style="color:#66d9ef">function</span>(z) z<span style="color:#f92672">$</span>ORCID))
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">Filter</span>(<span style="color:#66d9ef">function</span>(x) <span style="color:#f92672">!</span><span style="color:#a6e22e">is.na</span>(x), orcids)
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-R" data-lang="R"><span style="display:flex;"><span> [1] <span style="color:#e6db74">&#34;https://orcid.org/0000-0003-4087-8021&#34;</span>
</span></span><span style="display:flex;"><span> [2] <span style="color:#e6db74">&#34;https://orcid.org/0000-0002-2076-5452&#34;</span>
</span></span><span style="display:flex;"><span> [3] <span style="color:#e6db74">&#34;https://orcid.org/0000-0003-4087-8021&#34;</span>
</span></span><span style="display:flex;"><span> [4] <span style="color:#e6db74">&#34;https://orcid.org/0000-0002-2076-5452&#34;</span>
</span></span><span style="display:flex;"><span> [5] <span style="color:#e6db74">&#34;https://orcid.org/0000-0003-1710-1580&#34;</span>
</span></span><span style="display:flex;"><span> [6] <span style="color:#e6db74">&#34;https://orcid.org/0000-0003-1710-1580&#34;</span>
</span></span><span style="display:flex;"><span> [7] <span style="color:#e6db74">&#34;https://orcid.org/0000-0003-4637-238X&#34;</span>
</span></span><span style="display:flex;"><span> [8] <span style="color:#e6db74">&#34;https://orcid.org/0000-0003-4637-238X&#34;</span>
</span></span><span style="display:flex;"><span> [9] <span style="color:#e6db74">&#34;https://orcid.org/0000-0003-4637-238X&#34;</span>
</span></span><span style="display:flex;"><span>[10] <span style="color:#e6db74">&#34;https://orcid.org/0000-0003-4637-238X&#34;</span>
</span></span><span style="display:flex;"><span>[11] <span style="color:#e6db74">&#34;https://orcid.org/0000-0003-4637-238X&#34;</span>
</span></span><span style="display:flex;"><span>[12] <span style="color:#e6db74">&#34;https://orcid.org/0000-0003-2510-4271&#34;</span>
</span></span></code></pre></div><p>CLI</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>serrano works --filter<span style="color:#f92672">=</span>has_orcid:true --json --limit<span style="color:#f92672">=</span><span style="color:#ae81ff">12</span> | jq <span style="color:#e6db74">&#39;.message.items[].author[].ORCID | select(. != null)&#39;</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span><span style="color:#e6db74">&#34;https://orcid.org/0000-0003-4087-8021&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#e6db74">&#34;https://orcid.org/0000-0002-2076-5452&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#e6db74">&#34;https://orcid.org/0000-0003-4087-8021&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#e6db74">&#34;https://orcid.org/0000-0002-2076-5452&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#e6db74">&#34;https://orcid.org/0000-0003-1710-1580&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#e6db74">&#34;https://orcid.org/0000-0003-1710-1580&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#e6db74">&#34;https://orcid.org/0000-0003-4637-238X&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#e6db74">&#34;https://orcid.org/0000-0003-4637-238X&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#e6db74">&#34;https://orcid.org/0000-0003-4637-238X&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#e6db74">&#34;https://orcid.org/0000-0003-4637-238X&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#e6db74">&#34;https://orcid.org/0000-0003-4637-238X&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#e6db74">&#34;https://orcid.org/0000-0003-2510-4271&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#e6db74">&#34;https://orcid.org/0000-0001-9408-8207&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#e6db74">&#34;https://orcid.org/0000-0002-2076-5452&#34;</span>
</span></span></code></pre></div><h2 id="use-case-content-negotation">Use case: content negotation</h2>
<p>Python</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python3" data-lang="python3"><span style="display:flex;"><span><span style="color:#f92672">from</span> habanero <span style="color:#f92672">import</span> cn
</span></span><span style="display:flex;"><span>cn<span style="color:#f92672">.</span>content_negotiation(ids <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;10.1126/science.169.3946.635&#39;</span>, format <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;text&#34;</span>)
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python3" data-lang="python3"><span style="display:flex;"><span><span style="color:#e6db74">u</span><span style="color:#e6db74">&#39;Frank, H. S. (1970). The Structure of Ordinary Water: New data and interpretations are yielding new insights into this fascinating substance. Science, 169(3946), 635</span><span style="color:#ae81ff">\xe2\x80\x93</span><span style="color:#e6db74">641. doi:10.1126/science.169.3946.635</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#39;</span>
</span></span></code></pre></div><p>Ruby</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ruby" data-lang="ruby"><span style="display:flex;"><span>require <span style="color:#e6db74">&#39;serrano&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">Serrano</span><span style="color:#f92672">.</span>content_negotiation(<span style="color:#e6db74">ids</span>: <span style="color:#e6db74">&#39;10.1126/science.169.3946.635&#39;</span>, format: <span style="color:#e6db74">&#34;text&#34;</span>)
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ruby" data-lang="ruby"><span style="display:flex;"><span><span style="color:#f92672">=&gt;</span> <span style="color:#f92672">[</span><span style="color:#e6db74">&#34;Frank, H. S. (1970). The Structure of Ordinary Water: New data and interpretations are yielding new insights into this fascinating substance. Science, 169(3946), 635</span><span style="color:#ae81ff">\xE2\x80\x93</span><span style="color:#e6db74">641. doi:10.1126/science.169.3946.635</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span><span style="color:#f92672">]</span>
</span></span></code></pre></div><p>R</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">library</span>(<span style="color:#e6db74">&#34;rcrossref&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">cr_cn</span>(dois<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;10.1126/science.169.3946.635&#34;</span>, <span style="color:#e6db74">&#34;text&#34;</span>)
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>[1] <span style="color:#e6db74">&#34;Frank, H. S. (1970). The Structure of Ordinary Water: New data and interpretations are yielding new insights into this fascinating substance. Science, 169(3946), 635â641. doi:10.1126/science.169.3946.635&#34;</span>
</span></span></code></pre></div><p>CLI</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>serrano contneg 10.1890/13-0590.1 --format<span style="color:#f92672">=</span>text
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>Murtaugh, P. A. <span style="color:#f92672">(</span>2014<span style="color:#f92672">)</span>.  In defense of P values . Ecology, 95<span style="color:#f92672">(</span>3<span style="color:#f92672">)</span>, 611â617. doi:10.1890/13-0590.1
</span></span></code></pre></div><h2 id="more">More</h2>
<p>There are definitely issues with data in the Crossref search API, some of which I cover in my talks. However, it is still the best place to go for scholarly metadata.</p>
<p>Let us know of other use cases - there are others not covered here for brevity sake.</p>
<p>There are lots of examples in the docs for each client. If you can think of any doc improvements file an issue.</p>
<p>If you find any bugs, please do file an issue.</p>
]]></content:encoded>
    </item>
    <item>
      <title>icanhaz altmetrics</title>
      <link>http://localhost:1313/2014/12/icanhaz-altmetrics/</link>
      <pubDate>Mon, 08 Dec 2014 19:45:29 +0000</pubDate>
      <guid>http://localhost:1313/2014/12/icanhaz-altmetrics/</guid>
      <description>&lt;p&gt;The Lagotto application is a Rails app that collects and serves up via RESTful API article level metrics data for research objects. So far, this application has only been applied to scholarly articles, but will &lt;a href=&#34;https://articlemetrics.github.io/MDC/&#34;&gt;see action on datasets soon&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.martinfenner.org/&#34;&gt;Martin Fenner&lt;/a&gt; has lead the development of Lagotto. He recently set up &lt;a href=&#34;https://discuss.lagotto.io/&#34;&gt;a discussion site&lt;/a&gt; if you want to chat about it.&lt;/p&gt;
&lt;p&gt;The application has a &lt;a href=&#34;https://alm.plos.org/&#34;&gt;nice GUI interface&lt;/a&gt;, and a quite nice &lt;a href=&#34;https://alm.plos.org/docs/api&#34;&gt;RESTful API&lt;/a&gt;.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>The Lagotto application is a Rails app that collects and serves up via RESTful API article level metrics data for research objects. So far, this application has only been applied to scholarly articles, but will <a href="https://articlemetrics.github.io/MDC/">see action on datasets soon</a>.</p>
<p><a href="https://blog.martinfenner.org/">Martin Fenner</a> has lead the development of Lagotto. He recently set up <a href="https://discuss.lagotto.io/">a discussion site</a> if you want to chat about it.</p>
<p>The application has a <a href="https://alm.plos.org/">nice GUI interface</a>, and a quite nice <a href="https://alm.plos.org/docs/api">RESTful API</a>.</p>
<p>Lagotto is open source! Because of this, and the quality of the software, other publishers have started using it to gather and deliver publicly article level metrics data, including:</p>
<ul>
<li><a href="https://lagotto.svr.elifesciences.org/">eLife</a></li>
<li><a href="https://pkp-alm.lib.sfu.ca/">Public Knowledge Project (PKP)</a></li>
<li><a href="https://metricus.copernicus.org/">Copernicus</a></li>
<li><a href="https://det.labs.crossref.org/">Crossref</a></li>
<li><a href="https://alm.pensoft.net:81/">Pensoft</a></li>
</ul>
<p>The PLOS instance at <a href="https://alm.plos.org/">https://alm.plos.org/</a> is always the most up to date with the Lagotto software, but <a href="https://det.labs.crossref.org/">Crossref</a> has the largest number of articles.</p>
<p>I&rsquo;ve been working on three clients for the Lagotto REST API, including for a while now on <code>R</code>, recently on <code>Python</code>, and just last week on <code>Ruby</code>.</p>
<p>Please do try the clients, report bugs, request features - you know the open source drill&hellip;</p>
<p>I&rsquo;d say the R client is the most mature, while Python is less so, end the Ruby gem the least mature.</p>
<h2 id="installation">Installation</h2>
<p>R</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">install.packages</span>(<span style="color:#e6db74">&#34;devtools&#34;</span>)
</span></span><span style="display:flex;"><span>devtools<span style="color:#f92672">::</span><span style="color:#a6e22e">install_github</span>(<span style="color:#e6db74">&#34;ropensci/alm&#34;</span>)
</span></span></code></pre></div><p>Python</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>git clone https<span style="color:#f92672">://</span>github.com<span style="color:#f92672">/</span>cameronneylon<span style="color:#f92672">/</span>pyalm.git
</span></span><span style="display:flex;"><span>cd pyalm
</span></span><span style="display:flex;"><span>git checkout scott
</span></span><span style="display:flex;"><span>python setup.py install
</span></span></code></pre></div><p>Ruby</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>gem install httparty json rake
</span></span><span style="display:flex;"><span>git clone https<span style="color:#f92672">://</span>github.com<span style="color:#f92672">/</span>sckott<span style="color:#f92672">/</span>alm.git
</span></span><span style="display:flex;"><span>cd alm
</span></span><span style="display:flex;"><span>make <span style="color:#75715e"># which runs build and install tasks</span>
</span></span></code></pre></div><p>If you don&rsquo;t have <code>make</code>, then just run <code>gem build alm.gemspec</code> and 	<code>gem install alm-0.1.0.gem</code> seperately.</p>
<h2 id="example">Example</h2>
<p>In this example, we&rsquo;ll get altmetrics data for two DOIs: <a href="https://www.plosone.org/article/info%3Adoi%2F10.1371%2Fjournal.pone.0029797">10.1371/journal.pone.0029797</a>, and <a href="https://www.plosone.org/article/info%3Adoi%2F10.1371%2Fjournal.pone.0029798">10.1371/journal.pone.0029798</a> (click on links to go to paper).</p>
<h3 id="r">R</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">library</span>(<span style="color:#e6db74">&#39;alm&#39;</span>)
</span></span><span style="display:flex;"><span>ids <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">c</span>(<span style="color:#e6db74">&#34;10.1371/journal.pone.0029797&#34;</span>,<span style="color:#e6db74">&#34;10.1371/journal.pone.0029798&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">alm_ids</span>(ids, info<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;summary&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $meta</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   total total_pages page error</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 1     2           1    1    NA</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $data</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $data$`10.1371/journal.pone.0029798`</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $data$`10.1371/journal.pone.0029798`$info</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;                            doi</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 1 10.1371/journal.pone.0029798</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;                                                                                     title</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 1 Mitochondrial Electron Transport Is the Cellular Target of the Oncology Drug Elesclomol</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;                                                                canonical_url</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 1 https://www.plosone.org/article/info%3Adoi%2F10.1371%2Fjournal.pone.0029798</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;       pmid   pmcid                        mendeley_uuid</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 1 22253786 3256171 b08cc99e-b526-3f0c-adaa-d5ee6d0d978a</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;            update_date     issued</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 1 2014-12-09T02:52:47Z 2012-01-11</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $data$`10.1371/journal.pone.0029798`$signposts</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;                            doi viewed saved discussed cited</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 1 10.1371/journal.pone.0029798   4346    14         2    26</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $data$`10.1371/journal.pone.0029797`</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $data$`10.1371/journal.pone.0029797`$info</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;                            doi</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 1 10.1371/journal.pone.0029797</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;                                                                             title</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 1 Ecological Guild Evolution and the Discovery of the World&#39;s Smallest Vertebrate</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;                                                                canonical_url</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 1 https://www.plosone.org/article/info%3Adoi%2F10.1371%2Fjournal.pone.0029797</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;       pmid   pmcid                        mendeley_uuid</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 1 22253785 3256195 897fbbd6-5a23-3552-8077-97251b82c1e1</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;            update_date     issued</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 1 2014-12-09T02:52:46Z 2012-01-11</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $data$`10.1371/journal.pone.0029797`$signposts</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;                            doi viewed saved discussed cited</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 1 10.1371/journal.pone.0029797  34282    81       244     8</span>
</span></span></code></pre></div><h3 id="python">Python</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>import pyalm
</span></span><span style="display:flex;"><span>ids <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#34;10.1371/journal.pone.0029797&#34;</span>,<span style="color:#e6db74">&#34;10.1371/journal.pone.0029798&#34;</span>]
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">pyalm.get_alm</span>(ids, info<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;summary&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; {&#39;articles&#39;: [&lt;ArticleALM Mitochondrial Electron Transport Is the Cellular Target of the Oncology Drug Elesclomol,</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; DOI 10.1371/journal.pone.0029798&gt;,</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   &lt;ArticleALM Ecological Guild Evolution and the Discovery of the World&#39;s Smallest Vertebrate,</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;         DOI 10.1371/journal.pone.0029797&gt;],</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;  &#39;meta&#39;: {u&#39;error&#39;: None, u&#39;page&#39;: 1, u&#39;total&#39;: 2, u&#39;total_pages&#39;: 1}}</span>
</span></span></code></pre></div><h3 id="ruby">Ruby</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>require <span style="color:#e6db74">&#39;alm&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">Alm.alm</span>(ids<span style="color:#f92672">:</span> [<span style="color:#e6db74">&#34;10.1371/journal.pone.0029797&#34;</span>,<span style="color:#e6db74">&#34;10.1371/journal.pone.0029798&#34;</span>], key<span style="color:#f92672">:</span> ENV[<span style="color:#e6db74">&#39;PLOS_API_KEY&#39;</span>])
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; =&gt; {&#34;total&#34;=&gt;2,</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;  &#34;total_pages&#34;=&gt;1,</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;  &#34;page&#34;=&gt;1,</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;  &#34;error&#34;=&gt;nil,</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;  &#34;data&#34;=&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   [{&#34;doi&#34;=&gt;&#34;10.1371/journal.pone.0029798&#34;,</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;     &#34;title&#34;=&gt;&#34;Mitochondrial Electron Transport Is the Cellular Target of the Oncology Drug Elesclomol&#34;,</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;     &#34;issued&#34;=&gt;{&#34;date-parts&#34;=&gt;[[2012, 1, 11]]},</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;     &#34;canonical_url&#34;=&gt;&#34;https://www.plosone.org/article/info%3Adoi%2F10.1371%2Fjournal.pone.0029798&#34;,</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;     &#34;pmid&#34;=&gt;&#34;22253786&#34;,</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;     &#34;pmcid&#34;=&gt;&#34;3256171&#34;,</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;     &#34;mendeley_uuid&#34;=&gt;&#34;b08cc99e-b526-3f0c-adaa-d5ee6d0d978a&#34;,</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;     &#34;viewed&#34;=&gt;4346,</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;     &#34;saved&#34;=&gt;14,</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;     &#34;discussed&#34;=&gt;2,</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;     &#34;cited&#34;=&gt;26,</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;     &#34;update_date&#34;=&gt;&#34;2014-12-09T02:52:47Z&#34;},</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;    {&#34;doi&#34;=&gt;&#34;10.1371/journal.pone.0029797&#34;,</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;     &#34;title&#34;=&gt;&#34;Ecological Guild Evolution and the Discovery of the World&#39;s Smallest Vertebrate&#34;,</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;     &#34;issued&#34;=&gt;{&#34;date-parts&#34;=&gt;[[2012, 1, 11]]},</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;     &#34;canonical_url&#34;=&gt;&#34;https://www.plosone.org/article/info%3Adoi%2F10.1371%2Fjournal.pone.0029797&#34;,</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;     &#34;pmid&#34;=&gt;&#34;22253785&#34;,</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;     &#34;pmcid&#34;=&gt;&#34;3256195&#34;,</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;     &#34;mendeley_uuid&#34;=&gt;&#34;897fbbd6-5a23-3552-8077-97251b82c1e1&#34;,</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;     &#34;viewed&#34;=&gt;34282,</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;     &#34;saved&#34;=&gt;81,</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;     &#34;discussed&#34;=&gt;244,</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;     &#34;cited&#34;=&gt;8,</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;     &#34;update_date&#34;=&gt;&#34;2014-12-09T02:52:46Z&#34;}]}</span>
</span></span></code></pre></div>]]></content:encoded>
    </item>
  </channel>
</rss>
