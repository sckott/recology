<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Ruby on Recology</title>
    <link>http://localhost:1313/tags/ruby/</link>
    <description>Recent content in Ruby on Recology</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 19 Feb 2019 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/ruby/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Notes on porting Ruby to R</title>
      <link>http://localhost:1313/2019/02/ruby-ports-to-r/</link>
      <pubDate>Tue, 19 Feb 2019 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2019/02/ruby-ports-to-r/</guid>
      <description>In doing a number of ports of Ruby gems to R (vcr, webmockr), I&amp;rsquo;ve noticed a few differences between the languages that are fun to dive into, at least for me.
monkey patching Ruby has a nice thing where you can &amp;ldquo;monkey patch&amp;rdquo; classes/methods/etc. in other Ruby libraries. For example, lets say you have Ruby gems foo and bar. If foo has a method hello, you can override the hello method in foo with one from bar.</description>
    </item>
    <item>
      <title>Playing with Ruby Patterns in R</title>
      <link>http://localhost:1313/2018/01/ruby-and-r/</link>
      <pubDate>Thu, 25 Jan 2018 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2018/01/ruby-and-r/</guid>
      <description>I was returning to a long-term project I&amp;rsquo;ve been working on - a package for caching HTTP requests in R called vcr, a port of the Ruby gem vcr - when you do that thing you do when you are porting a library from one language to another. I stumbled upon some methods/functions I wasn&amp;rsquo;t familiar with.
For example, take_while I had never seeen before. It iterates over an array, returning the elements of the array that evalulate to true (for those new to Ruby, they use true instead of TRUE as we do in R) when passed through the function given.</description>
    </item>
    <item>
      <title>Web APIs with Sinatra, Mongo, Docker, and Caddy</title>
      <link>http://localhost:1313/2017/11/sinatra-mongo-docker-caddy/</link>
      <pubDate>Tue, 14 Nov 2017 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2017/11/sinatra-mongo-docker-caddy/</guid>
      <description>The problem The R community has a package distribution thing called CRAN just like Ruby has Rubygems, and Python has Pypi, etc. On all packages on CRAN, the CRAN maintainers run checks on each package on multiple versions of R and on many operating systems. They report those results on a page associated with the package, like this one.
You might be thinking: okay, but we have Travis-CI and friends, so who cares about that?</description>
    </item>
    <item>
      <title>habanero update: Crossref data from Python</title>
      <link>http://localhost:1313/2017/10/habanero-update/</link>
      <pubDate>Mon, 23 Oct 2017 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2017/10/habanero-update/</guid>
      <description>I wrote about Crossref clients back nearly two years ago on this blog: Crossref programmatic clients.
Since it&amp;rsquo;s been a while, it seems worth talking again about the the many ways to work programmatically with Crossref data - and focus in on the Python client habanero since it has some recent updates.
The 3 clients work with the main Crossref API, which lets you do things like search for works by title, author, etc.</description>
    </item>
    <item>
      <title>gbifrb: Ruby client for the GBIF API</title>
      <link>http://localhost:1313/2017/09/gbifrb/</link>
      <pubDate>Thu, 07 Sep 2017 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2017/09/gbifrb/</guid>
      <description>gbifrb is a new Ruby client for the GBIF API.
docs: https://www.rubydoc.info/gems/gbifrb/ rubygems: https://rubygems.org/gems/gbifrb code: https://github.com/sckott/gbifrb I maintain (w/ help) two other GBIF API clients:
Python: pygbif R: rgbif API Here&amp;rsquo;s the gbifrb methods in relation to GBIF API routes
registry
/node - Gbif::Registry.nodes /network - Gbif::Registry.networks /installations - Gbif::Registry.installations /organizations - Gbif::Registry.organizations /dataset_metrics - Gbif::Registry.dataset_metrics /datasets - Gbif::Registry.datasets /dataset_suggest - Gbif::Registry.dataset_suggest /dataset_search - Gbif::Registry.dataset_search species
/species/match - Gbif::Species.name_backbone /species/suggest - Gbif::Species.</description>
    </item>
    <item>
      <title>gbids - GenBank IDs API is back up!</title>
      <link>http://localhost:1313/2016/09/gbids-is-back/</link>
      <pubDate>Thu, 01 Sep 2016 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2016/09/gbids-is-back/</guid>
      <description>GBIDS API is back Back in March this year I wrote a post about a new API for working with GenBank IDs.
I had to take the API down because it was too expensive to keep up. Expensive because the dump of data is very large (3.8 GB compressed), and I need disk space on the server to uncompress that to I think about 18 GB, then load into MySQL, which is another maybe 30 GB or so.</description>
    </item>
    <item>
      <title>GenBank IDs API - get, match, swap id types</title>
      <link>http://localhost:1313/2016/03/genbank-ids/</link>
      <pubDate>Tue, 29 Mar 2016 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2016/03/genbank-ids/</guid>
      <description>GenBank IDs, accession numbers and GI identifiers, are the two types of identifiers for entries in GenBank. (see this page for why there are two types of identifiers). Actually, recent news from NCBI is that GI identifiers will be phased out by September this year, which affects what I&amp;rsquo;ll talk about below.
There are a lot of sequences in GenBank. Sometimes you have identifiers and you want to check if they exist in GenBank, or want to get one type from another (accession from GI, or vice versa; although GI phase out will make this use case no longer needed), or just get a bunch of identifiers for software testing purposes perhaps.</description>
    </item>
    <item>
      <title>heythere - a robot to automate GitHub issue comments</title>
      <link>http://localhost:1313/2016/03/hey-there/</link>
      <pubDate>Thu, 24 Mar 2016 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2016/03/hey-there/</guid>
      <description>GitHub issues are great for humans to correspond over software, or any other project. At rOpenSci we use an issue based software review system (ropensci/onboarding). Software authors and reviewers go back and forth on the software, making a better product in the end.
We have a relatively small number of pieces of software under review at any one time compared to e.g., scientific journals - however, even with the small number, we as organizers, and authors and reviewers can forget things.</description>
    </item>
    <item>
      <title>Crossref programmatic clients</title>
      <link>http://localhost:1313/2015/11/crossref-clients/</link>
      <pubDate>Mon, 30 Nov 2015 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2015/11/crossref-clients/</guid>
      <description>I gave two talks recently at the annual Crossref meeting, one of which was a somewhat technical overview of programmatic clients for Crossref APIs. Check out the talk here. I talked about the motivation for working with Crossref data by writing code/etc. rather than going the GUI route, then went over the various clients, with brief examples.
We (rOpenSci) have been working on the R client rcrossref for a while now, but I&amp;rsquo;m also working on the Python and Ruby clients for Crossref.</description>
    </item>
    <item>
      <title>icanhaz altmetrics</title>
      <link>http://localhost:1313/2014/12/icanhaz-altmetrics/</link>
      <pubDate>Mon, 08 Dec 2014 19:45:29 +0000</pubDate>
      <guid>http://localhost:1313/2014/12/icanhaz-altmetrics/</guid>
      <description>The Lagotto application is a Rails app that collects and serves up via RESTful API article level metrics data for research objects. So far, this application has only been applied to scholarly articles, but will see action on datasets soon.
Martin Fenner has lead the development of Lagotto. He recently set up a discussion site if you want to chat about it.
The application has a nice GUI interface, and a quite nice RESTful API.</description>
    </item>
  </channel>
</rss>
