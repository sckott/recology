<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Uv on Recology</title>
    <link>http://localhost:1313/tags/uv/</link>
    <description>Recent content in Uv on Recology</description>
    <generator>Hugo -- 0.144.1</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 20 Feb 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/uv/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>uv notes</title>
      <link>http://localhost:1313/2025/02/uv-notes/</link>
      <pubDate>Thu, 20 Feb 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2025/02/uv-notes/</guid>
      <description>&lt;h2 id=&#34;what-is-uv&#34;&gt;What is uv&lt;/h2&gt;
&lt;p&gt;I&amp;rsquo;ve recently started using &lt;code&gt;uv&lt;/code&gt; to manage Python projects and packages: many projects at work and the one active package I have on pypi.org (&lt;code&gt;habanero&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;I don&amp;rsquo;t really know enough about all the various Python tools similar to &lt;code&gt;uv&lt;/code&gt; to give an informed opinion. Rather, this is purely reflections on using &lt;code&gt;uv&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;uv&lt;/code&gt;&amp;rsquo;s tagline is:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;An extremely fast Python package and project manager, written in Rust.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;uv &lt;a href=&#34;https://docs.astral.sh/uv/&#34;&gt;docs&lt;/a&gt; and &lt;a href=&#34;https://github.com/astral-sh/uv&#34;&gt;source code&lt;/a&gt;.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<h2 id="what-is-uv">What is uv</h2>
<p>I&rsquo;ve recently started using <code>uv</code> to manage Python projects and packages: many projects at work and the one active package I have on pypi.org (<code>habanero</code>).</p>
<p>I don&rsquo;t really know enough about all the various Python tools similar to <code>uv</code> to give an informed opinion. Rather, this is purely reflections on using <code>uv</code>.</p>
<p><code>uv</code>&rsquo;s tagline is:</p>
<blockquote>
<p>An extremely fast Python package and project manager, written in Rust.</p></blockquote>
<p>uv <a href="https://docs.astral.sh/uv/">docs</a> and <a href="https://github.com/astral-sh/uv">source code</a>.</p>
<h2 id="reflections">Reflections</h2>
<h3 id="fast">Fast</h3>
<p>It&rsquo;s super fast. I don&rsquo;t remember my experience with plain ol pip being anywhere near this fast, though surely that could be user (me) incompetence.</p>
<h3 id="self-python">Self python</h3>
<p>The ability for <code>uv</code> to install Python itself is very nice. This means I don&rsquo;t have to manage downloading Python myself, and worry about adding things to the path, etc.</p>
<h3 id="user-land">User land</h3>
<p>With <code>uv</code> I do not run into user vs. not user install issues I had with pip often. This was probably just me not using python/pip the right way? Anyway, <code>uv</code> <a href="https://docs.astral.sh/uv/pip/compatibility/#-user-and-the-user-install-scheme">doesn&rsquo;t support the <code>--user</code> flag</a> it turns out.</p>
<h3 id="uv-run">uv run</h3>
<p>It&rsquo;s very nice that <code>uv run</code> enters and exits the virtual environment for you. This wasnâ€™t super obvious that this was even happening when I first starting using the command, but of course makes sense now. You can still activate/deactivate the virtual env yourself though.</p>
<h3 id="inline-script-metadata">Inline script metadata</h3>
<p><code>uv</code> supports a concept of <a href="https://docs.astral.sh/uv/guides/scripts/#declaring-script-dependencies">inline script metadata</a> - which comes from <a href="https://peps.python.org/pep-0723/">PEP 723</a>. Simon Willison also <a href="https://simonwillison.net/2024/Dec/19/one-shot-python-tools/#inline-dependencies-and-uv-run">wrote about this</a> recently.</p>
<p>It looks like (example from their docs)</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># /// script</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># dependencies = [</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#   &#34;requests&lt;3&#34;,</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#   &#34;rich&#34;,</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># ]</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># ///</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> requests
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> rich.pretty <span style="color:#f92672">import</span> pprint
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>resp <span style="color:#f92672">=</span> requests<span style="color:#f92672">.</span>get(<span style="color:#e6db74">&#34;https://peps.python.org/api/peps.json&#34;</span>)
</span></span><span style="display:flex;"><span>data <span style="color:#f92672">=</span> resp<span style="color:#f92672">.</span>json()
</span></span><span style="display:flex;"><span>pprint([(k, v[<span style="color:#e6db74">&#34;title&#34;</span>]) <span style="color:#66d9ef">for</span> k, v <span style="color:#f92672">in</span> data<span style="color:#f92672">.</span>items()][:<span style="color:#ae81ff">10</span>])
</span></span></code></pre></div><p>I have not used this feature but I think it could be very helpful. There&rsquo;s lots of Python scripts that really don&rsquo;t need a project structure but would benefit from properly managing dependencies. Now with this feature there&rsquo;s no need to have the heavier project structure when you have all your code in a single script.</p>
<h3 id="repl-tools">REPL tools</h3>
<p>I don&rsquo;t know if this is the &ldquo;right&rdquo; way to do things, but there&rsquo;s some dependencies my project or package do not depend on but that I want to use for development. I like to use ipython repl instead of the default python one - although the one that comes with Python is getting very good. So I install ipython and rich with <code>uv pip install ipython rich</code>. This invocation does not add them as dependencies but still (I think?) manages these dependencies within the project/package structure.</p>
<h3 id="vc-backed">VC backed?</h3>
<p>I&rsquo;m a little nervous about <code>uv</code> being made by a <a href="https://astral.sh/blog/announcing-astral-the-company-behind-ruff">VC backed company</a>. If I come to depend on <code>uv</code> and then they get bought and things change, or they just fold soon after, that&rsquo;s a bummer. But, it is open source so I imagine projects as big and important as <code>uv</code> and <code>ruff</code> may be adopted by the community. And I absolutely want people making open source software to be able to make a living, so we kinda need to keep our options open for how to do that.</p>
<h2 id="links">Links</h2>
<p>Other blog posts covering <code>uv</code>:</p>
<ul>
<li><a href="https://www.bitecode.dev/p/a-year-of-uv-pros-cons-and-should">https://www.bitecode.dev/p/a-year-of-uv-pros-cons-and-should</a></li>
<li><a href="https://simonwillison.net/2024/Dec/19/one-shot-python-tools/">https://simonwillison.net/2024/Dec/19/one-shot-python-tools/</a></li>
</ul>
]]></content:encoded>
    </item>
  </channel>
</rss>
