<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Http on Recology</title>
    <link>http://localhost:1313/tags/http/</link>
    <description>Recent content in Http on Recology</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 27 Nov 2021 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/http/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Mocking HTTP redirects</title>
      <link>http://localhost:1313/2021/11/mocking-redirects/</link>
      <pubDate>Sat, 27 Nov 2021 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2021/11/mocking-redirects/</guid>
      <description>You&amp;rsquo;ve experienced an HTTP redirect (or URL redirect, or URL forwarding) even if you haven&amp;rsquo;t noticed. We all use browsers (I assume, since you are reading this), either on a phone or laptop/desktop computer. Browsers don&amp;rsquo;t show all the HTTP requests going on in the background, some of which are redirects. Redirection is used for various reasons, including to prevent broken links when web pages are moved, for privacy protection, to allow multiple domains to refer to a single web page, and more.</description>
    </item>
    <item>
      <title>Exceptions in control flow in R</title>
      <link>http://localhost:1313/2019/03/control-flow-exceptions/</link>
      <pubDate>Mon, 04 Mar 2019 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2019/03/control-flow-exceptions/</guid>
      <description>I was listening to a Bike Shed podcast episode 189, &amp;ldquo;It&amp;rsquo;s Gonna Work, Definitely, No Problems Whatsoever&amp;rdquo;, and starting at 27:44 there was a conversation about exception handling. Specifically it was about exception handling in control flow when doing web API requests. This topic piqued my interest straight away as I do a lot of API stuff (making and wrapping).
The part of the conversation that I want to address is their conclusion that exceptions in control flow are an anti-pattern.</description>
    </item>
    <item>
      <title>request - a high level HTTP client for R</title>
      <link>http://localhost:1313/2016/01/request-hello-world/</link>
      <pubDate>Tue, 05 Jan 2016 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2016/01/request-hello-world/</guid>
      <description>request is DSL for http requests for R, and is inspired by the CLI tool httpie. It&amp;rsquo;s built on httr.
The following were driving principles for this package:
The web is increasingly a JSON world, so we assume applications/json by default, but give back other types if not The workflow follows logically, or at least should, from, hey, I got this url, to i need to add some options, to execute request - and functions support piping so that you can execute functions in this order Whenever possible, we transform output to data.</description>
    </item>
    <item>
      <title>the new way - httsnap</title>
      <link>http://localhost:1313/2015/04/the-new-way/</link>
      <pubDate>Wed, 29 Apr 2015 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2015/04/the-new-way/</guid>
      <description>Inspired by httpie, a Python command line client as a sort of drop in replacement for curl, I am playing around with something similar-ish in R, at least in spirit. I started a little R pkg called httsnap with the following ideas:
The web is increasingly a JSON world, so set content-type and accept headers to applications/json by default The workflow follows logically, or at least should, from, hey, I got this url, to i need to add some options, to execute request Whenever possible, transform output to data.</description>
    </item>
    <item>
      <title>httping - ping and time http requests</title>
      <link>http://localhost:1313/2015/01/httping/</link>
      <pubDate>Fri, 30 Jan 2015 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2015/01/httping/</guid>
      <description>I&amp;rsquo;ve been working on a little thing called httping - a small R package that started as a pkg to Ping urls and time requests. It&amp;rsquo;s a port of the Ruby gem httping. The httr package is in Depends in this package, so its functions can be called directly, without having to load httr explicitly yourself.
In addition to timing requests, I&amp;rsquo;ve been tinkering with how to make http requests, with curl options accepting and returning the same object so they can be chained together, and then that object passed to a http verb like GET.</description>
    </item>
    <item>
      <title>elastic - Elasticsearch from R</title>
      <link>http://localhost:1313/2015/01/elasticsearch/</link>
      <pubDate>Thu, 29 Jan 2015 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2015/01/elasticsearch/</guid>
      <description>We&amp;rsquo;ve (ropensci) been working on an R client for interacting with Elasticsearch for a while now, first commit was November 2013.
Elasticsearch is a document database built on the JVM. elastic interacts with the Elasticsearch HTTP API, and includes functions for setting connection details to Elasticsearch instances, loading bulk data, searching for documents with both HTTP query variables and JSON based body requests. In addition, elastic provides functions for interacting with APIs for indices, documents, nodes, clusters, an interface to the cat API, and more.</description>
    </item>
    <item>
      <title>Dealing with multi handle errors</title>
      <link>http://localhost:1313/2014/12/multi-handle/</link>
      <pubDate>Mon, 08 Dec 2014 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2014/12/multi-handle/</guid>
      <description>At rOpenSci we occasssionally hear from our users that they run into an error like:
Error in function (type, msg, asError = TRUE) : easy handled already used in multi handle This error occurs in the httr package that we use to do http requests to sources of data on the web. It happens when e.g., you make a lot of requests to a resource, then it gets interrupted somehow - then you make another call, and you get the error above.</description>
    </item>
    <item>
      <title>http codes</title>
      <link>http://localhost:1313/2014/12/http-codes/</link>
      <pubDate>Tue, 02 Dec 2014 16:01:50 +0000</pubDate>
      <guid>http://localhost:1313/2014/12/http-codes/</guid>
      <description>Recently noticed a little Python library called httpcode that does a simple thing: gives information on http codes in the CLI. I thought this could maybe potentially be useful for R. So I made an R version.
Installation devtools::install_github(&amp;#34;sckott/httpcode&amp;#34;) library(&amp;#34;httpcode&amp;#34;) Search by http code http_code(100) #&amp;gt; &amp;lt;Status code: 100&amp;gt; #&amp;gt; Message: Continue #&amp;gt; Explanation: Request received, please continue http_code(400) #&amp;gt; &amp;lt;Status code: 400&amp;gt; #&amp;gt; Message: Bad Request #&amp;gt; Explanation: Bad request syntax or unsupported method http_code(503) #&amp;gt; &amp;lt;Status code: 503&amp;gt; #&amp;gt; Message: Service Unavailable #&amp;gt; Explanation: The server cannot process the request due to a high load http_code(999) #&amp;gt; Error: No description found for code: 999 Fuzzy code search http_code(&amp;#39;1xx&amp;#39;) #&amp;gt; [[1]] #&amp;gt; &amp;lt;Status code: 100&amp;gt; #&amp;gt; Message: Continue #&amp;gt; Explanation: Request received, please continue #&amp;gt; #&amp;gt; [[2]] #&amp;gt; &amp;lt;Status code: 101&amp;gt; #&amp;gt; Message: Switching Protocols #&amp;gt; Explanation: Switching to new protocol; obey Upgrade header #&amp;gt; #&amp;gt; [[3]] #&amp;gt; &amp;lt;Status code: 102&amp;gt; #&amp;gt; Message: Processing #&amp;gt; Explanation: WebDAV; RFC 2518 http_code(&amp;#39;3xx&amp;#39;) #&amp;gt; [[1]] #&amp;gt; &amp;lt;Status code: 300&amp;gt; #&amp;gt; Message: Multiple Choices #&amp;gt; Explanation: Object has several resources -- see URI list #&amp;gt; #&amp;gt; [[2]] #&amp;gt; &amp;lt;Status code: 301&amp;gt; #&amp;gt; Message: Moved Permanently #&amp;gt; Explanation: Object moved permanently -- see URI list #&amp;gt; #&amp;gt; [[3]] #&amp;gt; &amp;lt;Status code: 302&amp;gt; #&amp;gt; Message: Found #&amp;gt; Explanation: Object moved temporarily -- see URI list #&amp;gt; #&amp;gt; [[4]] #&amp;gt; &amp;lt;Status code: 303&amp;gt; #&amp;gt; Message: See Other #&amp;gt; Explanation: Object moved -- see Method and URL list #&amp;gt; #&amp;gt; [[5]] #&amp;gt; &amp;lt;Status code: 304&amp;gt; #&amp;gt; Message: Not Modified #&amp;gt; Explanation: Document has not changed since given time #&amp;gt; #&amp;gt; [[6]] #&amp;gt; &amp;lt;Status code: 305&amp;gt; #&amp;gt; Message: Use Proxy #&amp;gt; Explanation: You must use proxy specified in Location to access this resource.</description>
    </item>
  </channel>
</rss>
