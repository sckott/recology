<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Http on Recology</title>
    <link>http://localhost:1313/tags/http/</link>
    <description>Recent content in Http on Recology</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 27 Nov 2021 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/http/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Mocking HTTP redirects</title>
      <link>http://localhost:1313/2021/11/mocking-redirects/</link>
      <pubDate>Sat, 27 Nov 2021 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2021/11/mocking-redirects/</guid>
      <description>You&amp;rsquo;ve experienced an HTTP redirect (or URL redirect, or URL forwarding) even if you haven&amp;rsquo;t noticed. We all use browsers (I assume, since you are reading this), either on a phone or laptop/desktop computer. Browsers don&amp;rsquo;t show all the HTTP requests going on in the background, some of which are redirects. Redirection is used for various reasons, including to prevent broken links when web pages are moved, for privacy protection, to allow multiple domains to refer to a single web page, and more.</description><content:encoded><![CDATA[ ]]>
               <![CDATA[<p>You&rsquo;ve experienced an <a href="https://en.wikipedia.org/wiki/URL_redirection">HTTP redirect</a> (or URL redirect, or URL forwarding) even if you haven&rsquo;t noticed. We all use browsers (I assume, since you are reading this), either on a phone or laptop/desktop computer. Browsers don&rsquo;t show all the HTTP requests going on in the background, some of which are redirects. Redirection is used for various reasons, including to prevent broken links when web pages are moved, for privacy protection, to allow multiple domains to refer to a single web page, and more.</p>
<p>The easiest way to know if you hit a redirect is to look at the <a href="https://en.wikipedia.org/wiki/List_of_HTTP_status_codes">HTTP status code</a>. Status codes in the 3xx series are mostly about URL redirection. The most common you will see are 301 (moved permanently), 302 (moved temporarily), and 303 (see other URI; usually in a &ldquo;Location&rdquo; response header).</p>
<p>When making HTTP requests in R, redirects are generally handled automatically by the three HTTP clients (<a href="https://jeroen.cran.dev/curl/">curl</a>, <a href="https://github.com/ropensci/crul">crul</a>, <a href="https://github.com/r-lib/httr">httr</a>). That is, if a 300 series code is detected, all three clients will go to the next URI and so on until there are no more redirects. Automatically following redirects may not be default behavior elsewhere (e.g., <code>crul</code> command line tool doesn&rsquo;t follow redirects by default), so beware.</p>
<p>HTTP redirects become more tricky when we have to mock them in unit tests or other similar situations. I&rsquo;ll cover the various tools for doing this in R.</p>
<h2 id="redirects">Redirects</h2>
<p>First, I&rsquo;ll show how redirects work with three major HTTP clients:</p>
<p><a href="https://jeroen.cran.dev/curl/">curl</a></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">library</span>(curl)
</span></span><span style="display:flex;"><span>h <span style="color:#f92672">&lt;-</span> curl<span style="color:#f92672">::</span><span style="color:#a6e22e">new_handle</span>()
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">handle_setopt</span>(h, followlocation<span style="color:#f92672">=</span><span style="color:#ae81ff">0L</span>)
</span></span><span style="display:flex;"><span>out <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">curl_fetch_memory</span>(<span style="color:#e6db74">&#34;https://hb.opencpu.org/redirect/3&#34;</span>, handle <span style="color:#f92672">=</span> h)
</span></span><span style="display:flex;"><span>curl<span style="color:#f92672">::</span><span style="color:#a6e22e">parse_headers</span>(out<span style="color:#f92672">$</span>headers, multiple <span style="color:#f92672">=</span> <span style="color:#66d9ef">TRUE</span>)
</span></span></code></pre></div><p><a href="https://github.com/ropensci/crul">crul</a></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">library</span>(crul)
</span></span><span style="display:flex;"><span>con <span style="color:#f92672">&lt;-</span> HttpClient<span style="color:#f92672">$</span><span style="color:#a6e22e">new</span>(<span style="color:#e6db74">&#34;https://hb.opencpu.org/redirect/3&#34;</span>)
</span></span><span style="display:flex;"><span>res <span style="color:#f92672">&lt;-</span> con<span style="color:#f92672">$</span><span style="color:#a6e22e">get</span>()
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">length</span>(res<span style="color:#f92672">$</span>response_headers_all)
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] 4</span>
</span></span></code></pre></div><p><a href="https://github.com/r-lib/httr">httr</a></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">library</span>(httr)
</span></span><span style="display:flex;"><span>z <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">GET</span>(<span style="color:#e6db74">&#34;https://hb.opencpu.org/redirect/3&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">length</span>(z<span style="color:#f92672">$</span>all_headers)
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] 4</span>
</span></span></code></pre></div><h2 id="mocking-redirects">Mocking redirects</h2>
<p>If you want to mock HTTP redirects, you can do so with the <a href="https://github.com/ropensci/webmockr">webmockr</a> package. Why would you want to mock redirects?</p>
<p>Here&rsquo;s one use case: Say you have a library/package interacting with a web resource that you interact with. You want to add some unit tests for a route that responds with one or more redirects. You&rsquo;d prefer not to perform real HTTP requests against the remote service for one reason or another (e.g., extreme rate limiting); and some would say it&rsquo;s best not to test with real HTTP requests b/c you want to test the functionality of the package, NOT the remote server with which it interacts.</p>
<p>In the following, we re-create what happens in real HTTP requests - but just status codes and the <code>location</code> response header.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">library</span>(webmockr)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">library</span>(crul)
</span></span><span style="display:flex;"><span>webmockr<span style="color:#f92672">::</span><span style="color:#a6e22e">enable</span>()
</span></span></code></pre></div><p>Make a single stub with each redirect response with <code>to_return()</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">stub_request</span>(<span style="color:#e6db74">&#34;get&#34;</span>, <span style="color:#e6db74">&#34;https://hb.opencpu.org/redirect/3&#34;</span>) <span style="color:#f92672">%&gt;%</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">to_return</span>(status <span style="color:#f92672">=</span> <span style="color:#ae81ff">302</span>, headers <span style="color:#f92672">=</span> <span style="color:#a6e22e">list</span>(location <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;/relative-redirect/2&#34;</span>)) <span style="color:#f92672">%&gt;%</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">to_return</span>(status <span style="color:#f92672">=</span> <span style="color:#ae81ff">302</span>, headers <span style="color:#f92672">=</span> <span style="color:#a6e22e">list</span>(location <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;/relative-redirect/1&#34;</span>)) <span style="color:#f92672">%&gt;%</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">to_return</span>(status <span style="color:#f92672">=</span> <span style="color:#ae81ff">302</span>, headers <span style="color:#f92672">=</span> <span style="color:#a6e22e">list</span>(location <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;/get&#34;</span>)) <span style="color:#f92672">%&gt;%</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">to_return</span>(status <span style="color:#f92672">=</span> <span style="color:#ae81ff">200</span>, headers <span style="color:#f92672">=</span> <span style="color:#a6e22e">list</span>(location <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;hooray, all done!&#34;</span>))
</span></span></code></pre></div><p>Then make four different requests to <code>https://hb.opencpu.org/redirect/3</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>con <span style="color:#f92672">&lt;-</span> crul<span style="color:#f92672">::</span>HttpClient<span style="color:#f92672">$</span><span style="color:#a6e22e">new</span>(url <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;https://hb.opencpu.org&#34;</span>)
</span></span><span style="display:flex;"><span>con<span style="color:#f92672">$</span><span style="color:#a6e22e">get</span>(<span style="color:#e6db74">&#34;redirect/3&#34;</span>)<span style="color:#f92672">$</span>response_headers
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $location</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;/relative-redirect/2&#34;</span>
</span></span><span style="display:flex;"><span>con<span style="color:#f92672">$</span><span style="color:#a6e22e">get</span>(<span style="color:#e6db74">&#34;redirect/3&#34;</span>)<span style="color:#f92672">$</span>response_headers
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $location</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;/relative-redirect/1&#34;</span>
</span></span><span style="display:flex;"><span>con<span style="color:#f92672">$</span><span style="color:#a6e22e">get</span>(<span style="color:#e6db74">&#34;redirect/3&#34;</span>)<span style="color:#f92672">$</span>response_headers
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $location</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;/get&#34;</span>
</span></span><span style="display:flex;"><span>con<span style="color:#f92672">$</span><span style="color:#a6e22e">get</span>(<span style="color:#e6db74">&#34;redirect/3&#34;</span>)<span style="color:#f92672">$</span>response_headers
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $location</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;hooray, all done!&#34;</span>
</span></span></code></pre></div><p>This isn&rsquo;t ideal because it doesn&rsquo;t reflect how the real HTTP request equivalent happens.</p>
<p>Alernatively, you could set it up like this, with four separate stubs:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">stub_request</span>(<span style="color:#e6db74">&#34;get&#34;</span>, <span style="color:#e6db74">&#34;https://hb.opencpu.org/redirect/3&#34;</span>) <span style="color:#f92672">%&gt;%</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">to_return</span>(status <span style="color:#f92672">=</span> <span style="color:#ae81ff">302</span>, headers <span style="color:#f92672">=</span> <span style="color:#a6e22e">list</span>(location <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;/relative-redirect/2&#34;</span>))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">stub_request</span>(<span style="color:#e6db74">&#34;get&#34;</span>, <span style="color:#e6db74">&#34;https://hb.opencpu.org/relative-redirect/2&#34;</span>) <span style="color:#f92672">%&gt;%</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">to_return</span>(status <span style="color:#f92672">=</span> <span style="color:#ae81ff">302</span>, headers <span style="color:#f92672">=</span> <span style="color:#a6e22e">list</span>(location <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;/relative-redirect/1&#34;</span>))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">stub_request</span>(<span style="color:#e6db74">&#34;get&#34;</span>, <span style="color:#e6db74">&#34;https://hb.opencpu.org/relative-redirect/1&#34;</span>) <span style="color:#f92672">%&gt;%</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">to_return</span>(status <span style="color:#f92672">=</span> <span style="color:#ae81ff">302</span>, headers <span style="color:#f92672">=</span> <span style="color:#a6e22e">list</span>(location <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;/get&#34;</span>))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">stub_request</span>(<span style="color:#e6db74">&#34;get&#34;</span>, <span style="color:#e6db74">&#34;https://hb.opencpu.org/get&#34;</span>) <span style="color:#f92672">%&gt;%</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">to_return</span>(status <span style="color:#f92672">=</span> <span style="color:#ae81ff">200</span>, headers <span style="color:#f92672">=</span> <span style="color:#a6e22e">list</span>(location <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;hooray, all done!&#34;</span>))
</span></span></code></pre></div><p>Then make each request in turn to each successive URL:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>con <span style="color:#f92672">&lt;-</span> crul<span style="color:#f92672">::</span>HttpClient<span style="color:#f92672">$</span><span style="color:#a6e22e">new</span>(url <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;https://hb.opencpu.org&#34;</span>)
</span></span><span style="display:flex;"><span>con<span style="color:#f92672">$</span><span style="color:#a6e22e">get</span>(<span style="color:#e6db74">&#34;redirect/3&#34;</span>)<span style="color:#f92672">$</span>response_headers
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $location</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;/relative-redirect/2&#34;</span>
</span></span><span style="display:flex;"><span>con<span style="color:#f92672">$</span><span style="color:#a6e22e">get</span>(<span style="color:#e6db74">&#34;relative-redirect/2&#34;</span>)<span style="color:#f92672">$</span>response_headers
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $location</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;/relative-redirect/1&#34;</span>
</span></span><span style="display:flex;"><span>con<span style="color:#f92672">$</span><span style="color:#a6e22e">get</span>(<span style="color:#e6db74">&#34;relative-redirect/1&#34;</span>)<span style="color:#f92672">$</span>response_headers
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $location</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;/get&#34;</span>
</span></span><span style="display:flex;"><span>con<span style="color:#f92672">$</span><span style="color:#a6e22e">get</span>(<span style="color:#e6db74">&#34;get&#34;</span>)<span style="color:#f92672">$</span>response_headers
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $location</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;hooray, all done!&#34;</span>
</span></span></code></pre></div><h2 id="faking-real-redirects">Faking real redirects</h2>
<p><a href="https://github.com/ropensci/vcr">vcr</a> is built on top of webmockr, but instead of returning stubbed responses and not allowing real HTTP requests, vcr stores real HTTP request/response and uses them on all subsequent matching HTTP requests.</p>
<p>I wrote this back in March 2021 - and was waiting to figure out how to deal with redirects in <a href="https://github.com/ropensci/vcr">vcr</a> before finishing this post - see <a href="https://github.com/ropensci/vcr/issues/220">vcr issue #220</a>. I still have and may never get to that issue. If you are interested, please do stop by vcr and make a pull request to get it fixed. The major issue is that vcr stores only the first HTTP response in a redirect chain, rather than the last HTTP response - as I would expect.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Exceptions in control flow in R</title>
      <link>http://localhost:1313/2019/03/control-flow-exceptions/</link>
      <pubDate>Mon, 04 Mar 2019 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2019/03/control-flow-exceptions/</guid>
      <description>I was listening to a Bike Shed podcast episode 189, &amp;ldquo;It&amp;rsquo;s Gonna Work, Definitely, No Problems Whatsoever&amp;rdquo;, and starting at 27:44 there was a conversation about exception handling. Specifically it was about exception handling in control flow when doing web API requests. This topic piqued my interest straight away as I do a lot of API stuff (making and wrapping).
The part of the conversation that I want to address is their conclusion that exceptions in control flow are an anti-pattern.</description><content:encoded><![CDATA[ ]]>
               <![CDATA[<p>I was listening to a Bike Shed podcast <a href="http://bikeshed.fm/189">episode 189, &ldquo;It&rsquo;s Gonna Work, Definitely, No Problems Whatsoever&rdquo;</a>, and starting at 27:44 there was a conversation about exception handling. Specifically it was about exception handling in control flow when doing web API requests. This topic piqued my interest straight away as I do a lot of API stuff (making and wrapping).</p>
<p>The part of the conversation that I want to address is their conclusion that exceptions in control flow are an anti-pattern. Seems this is a general pattern in programming languages, e.g., this <a href="https://softwareengineering.stackexchange.com/a/189225/329940">SO thread</a>. But on the contrary there are some languages in which exceptions in control flow are considered normal behavior; e.g., Python (<a href="https://softwareengineering.stackexchange.com/a/318542/329940">this</a>, <a href="https://softwareengineering.stackexchange.com/a/351121/329940">this</a>).</p>
<p>My first reaction to this was one of vehement disagreement because in my experience wrapping web APIs raising exceptions on HTTP status codes of 400 and 500 series is the norm, in at least R and Ruby. They argued that there are better ways of handling these cases. After a whg with my gut reaction.</p>
<p>Let&rsquo;s take a step back first and look at some concepts before diving further into this.
ile I thought maybe the topic is worth thinking harder about rather than goin</p>
<h2 id="control-flow">control flow</h2>
<p><a href="https://en.wikipedia.org/wiki/Control_flow">Control flow</a> in programming is</p>
<blockquote>
<p>the order in which individual statements &hellip; are executed or evaluated &hellip; a control flow statement is a statement, the execution of which results in a choice being made as to which of two or more paths to follow.</p>
</blockquote>
<p><a href="https://stat.ethz.ch/R-manual/R-devel/library/base/html/Control.html">Control flow in R</a> has an overview of control flow in R. Control flow constructs in R include <code>if/else</code>, <code>for</code>, <code>while</code>, <code>repeat</code>, <code>break</code>, <code>next</code>.</p>
<h2 id="exceptions">exceptions</h2>
<p>Exceptions are</p>
<blockquote>
<p>anomalous or exceptional conditions requiring special processing - often changing the normal flow of program execution (source: <a href="https://en.wikipedia.org/wiki/Exception_handling">wikiex</a>)</p>
</blockquote>
<p>In R, exception handling can be done with <code>try</code>, <code>tryCatch</code>, <code>withCallingHandlers</code> and others. Often <code>warning()</code> is used to signal to the user what happened, but does not stop execution, and can be suppressed with <code>suppressWarnings()</code>. To stop execution, <code>stop()</code> is used.</p>
<!-- raw HTML omitted -->
<h2 id="back-to-web-api-exceptions-and-control-flow-in-r">back to web API exceptions and control flow in R</h2>
<p>Note the word <strong>exceptional</strong> above in our definition of exceptions. The BikeShed pod hosts were surprised to see exceptions raised with bad API requests because they didn&rsquo;t think a bad API request was <strong>exceptional</strong>, but rather an expected result given certain conditions (e.g., an HTTP 400 series client error means the client did something wrong and perhaps the server gave back a useful error message to help fix the request).</p>
<p>They observed that most Ruby API wrappers did have the behavior of raising an exception on a 400/500 series API status, but they disagreed with this approach.</p>
<p>In R world, most API wrappers in my experience also follow the pattern of raising an exception stopping the code flow on a 400/500 series HTTP error.</p>
<!-- raw HTML omitted -->
<p>What would it look like to not stop code execution flow when 400/500 series errors are returned from web API requests? What would need to change from the current setup? How would users be affected?</p>
<p>A typical R function that makes a web API request looks like the following:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>foo <span style="color:#f92672">=</span> <span style="color:#66d9ef">function</span>(path, query <span style="color:#f92672">=</span> <span style="color:#a6e22e">list</span>()) {
</span></span><span style="display:flex;"><span>  conn <span style="color:#f92672">=</span> crul<span style="color:#f92672">::</span>HttpClient<span style="color:#f92672">$</span><span style="color:#a6e22e">new</span>(<span style="color:#e6db74">&#34;https://httpbin.org&#34;</span>)
</span></span><span style="display:flex;"><span>  res <span style="color:#f92672">=</span> conn<span style="color:#f92672">$</span><span style="color:#a6e22e">get</span>(path <span style="color:#f92672">=</span> path, query <span style="color:#f92672">=</span> query)
</span></span><span style="display:flex;"><span>  res<span style="color:#f92672">$</span><span style="color:#a6e22e">raise_for_status</span>()
</span></span><span style="display:flex;"><span>  res<span style="color:#f92672">$</span><span style="color:#a6e22e">parse</span>(<span style="color:#e6db74">&#34;UTF-8&#34;</span>)
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>On a successful request all is good and we get back the JSON payload</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">foo</span>(path <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;get&#34;</span>, query <span style="color:#f92672">=</span> <span style="color:#a6e22e">list</span>(apple <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;pink lady&#34;</span>))
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;{\n  \&#34;args\&#34;: {\n    \&#34;\&#34;: \&#34;pink lady\&#34;\n  }, ...</span>
</span></span></code></pre></div><p>When there is a 400/500 series code the line <code>res$raise_for_status()</code> throws an error, stopping execution</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">foo</span>(path <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;status/400&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; Error: Bad Request (HTTP 400)</span>
</span></span></code></pre></div><p>Instead of raising an error we could throw a warning and proceed to the next step</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>bar <span style="color:#f92672">=</span> <span style="color:#66d9ef">function</span>(path, query <span style="color:#f92672">=</span> <span style="color:#a6e22e">list</span>()) {
</span></span><span style="display:flex;"><span>  conn <span style="color:#f92672">=</span> crul<span style="color:#f92672">::</span>HttpClient<span style="color:#f92672">$</span><span style="color:#a6e22e">new</span>(<span style="color:#e6db74">&#34;https://httpbin.org&#34;</span>)
</span></span><span style="display:flex;"><span>  res <span style="color:#f92672">=</span> conn<span style="color:#f92672">$</span><span style="color:#a6e22e">get</span>(path <span style="color:#f92672">=</span> path, query <span style="color:#f92672">=</span> query)
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> (res<span style="color:#f92672">$</span>status_code <span style="color:#f92672">&gt;=</span> <span style="color:#ae81ff">400</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">warning</span>(<span style="color:#a6e22e">sprintf</span>(<span style="color:#e6db74">&#34;HTTP %s %s&#34;</span>, res<span style="color:#f92672">$</span>status_code, res<span style="color:#f92672">$</span><span style="color:#a6e22e">status_http</span>()<span style="color:#f92672">$</span>explanation))
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  res<span style="color:#f92672">$</span><span style="color:#a6e22e">parse</span>(<span style="color:#e6db74">&#34;UTF-8&#34;</span>)
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">bar</span>(path <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;status/400&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; Warning message:</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; In bar(path = &#34;status/400&#34;) :</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;  HTTP 400 Bad request syntax or unsupported method</span>
</span></span></code></pre></div><p>This is fine, but there&rsquo;s a few scenarios in which this will be problematic:</p>
<ol>
<li>Many APIs <strong>DO NOT</strong> return the same content-type on a 400 series error, and even more common on 500 series errors. In fact, often JSON APIs return an HTML error page, which may or may not contain a meaningul message, instead of the same content type as a successful response (e.g., JSON).</li>
<li>Rather then simply parsing the response <code>res$parse(&quot;UTF-8&quot;)</code>, the downstream code may be more complex (e.g., selecting particular fields/keys), and may fail out (and in R, this often means useless error messages for the user).</li>
</ol>
<p>If we take their advice and don&rsquo;t fail out on 400/500 series codes, what would that look like? One could do something like:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>hello_world <span style="color:#f92672">&lt;-</span> <span style="color:#66d9ef">function</span>(path, query <span style="color:#f92672">=</span> <span style="color:#a6e22e">list</span>()) {
</span></span><span style="display:flex;"><span>  conn <span style="color:#f92672">=</span> crul<span style="color:#f92672">::</span>HttpClient<span style="color:#f92672">$</span><span style="color:#a6e22e">new</span>(<span style="color:#e6db74">&#34;https://httpbin.org&#34;</span>)
</span></span><span style="display:flex;"><span>  res <span style="color:#f92672">=</span> conn<span style="color:#f92672">$</span><span style="color:#a6e22e">get</span>(path <span style="color:#f92672">=</span> path, query <span style="color:#f92672">=</span> query)
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> (res<span style="color:#f92672">$</span>status_code <span style="color:#f92672">&gt;=</span> <span style="color:#ae81ff">400</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">warning</span>(<span style="color:#a6e22e">sprintf</span>(<span style="color:#e6db74">&#34;HTTP %s %s&#34;</span>, res<span style="color:#f92672">$</span>status_code, res<span style="color:#f92672">$</span><span style="color:#a6e22e">status_http</span>()<span style="color:#f92672">$</span>explanation))
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  res
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>We still get the warning on an error</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">hello_world</span>(path <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;status/400&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; Warning message:</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; In hello_world(path = &#34;status/400&#34;) :</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   HTTP 400 Bad request syntax or unsupported method</span>
</span></span></code></pre></div><p>But also we return the response object (<code>HttpResponse</code> from the <code>crul</code> package in this case):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#75715e">#&gt; &lt;crul response&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   url: https://httpbin.org/status/400</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   request_headers:</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;     User-Agent: libcurl/7.54.0 r-curl/3.3 crul/0.7.0</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;     Accept-Encoding: gzip, deflate</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;     Accept: application/json, text/xml, application/xml, */*</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   response_headers:</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;     status: HTTP/1.1 400 BAD REQUEST</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;     access-control-allow-credentials: true</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;     access-control-allow-origin: *</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;     content-type: text/html; charset=utf-8</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;     date: Mon, 04 Mar 2019 17:49:39 GMT</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;     server: nginx</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;     content-length: 0</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;     connection: keep-alive</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   status: 400</span>
</span></span></code></pre></div><p>Now the user can explore the response body, response headers, etc. and decide on their own what to do instead of the function failing out and returning nothing.</p>
<p>This approach is fine if your users are more advanced, but most packages/libraries are probably trying to give back a data object that users are familiar with. In R, that is clearly the data.frame. When there is a 400/500 series error, one option is to return an empty data.frame and throw a warning about the error, hopefully with enough information for the user to fix the request. This is probably best for naive users, but any package has some more advanced users that would benefit from more information; and more information will help a naive user + the maintainer debug a problem easier.</p>
<p>The next more complicated option would be a list that can have the same format regardless of errors or not:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>func <span style="color:#f92672">&lt;-</span> <span style="color:#66d9ef">function</span>() {
</span></span><span style="display:flex;"><span>  res <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">hello_world</span>(path <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;status/400&#34;</span>)
</span></span><span style="display:flex;"><span>  mssg <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">sprintf</span>(<span style="color:#e6db74">&#34;HTTP %s %s&#34;</span>, res<span style="color:#f92672">$</span>status_code, res<span style="color:#f92672">$</span><span style="color:#a6e22e">status_http</span>()<span style="color:#f92672">$</span>explanation)
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">list</span>(data <span style="color:#f92672">=</span> res<span style="color:#f92672">$</span><span style="color:#a6e22e">parse</span>(<span style="color:#e6db74">&#34;UTF-8&#34;</span>), error <span style="color:#f92672">=</span> mssg)
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>gives</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">func</span>()
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $data</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $error</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;HTTP 400 Bad request syntax or unsupported method&#34;</span>
</span></span></code></pre></div><p>Or possibly something more complex where you can build in accessors to make it easy to get data the user expects, but also dig into the HTTP response object itself if needed:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>Response <span style="color:#f92672">&lt;-</span> R6<span style="color:#f92672">::</span><span style="color:#a6e22e">R6Class</span>(<span style="color:#e6db74">&#34;Response&#34;</span>,
</span></span><span style="display:flex;"><span>  public <span style="color:#f92672">=</span> <span style="color:#a6e22e">list</span>(
</span></span><span style="display:flex;"><span>    x <span style="color:#f92672">=</span> <span style="color:#66d9ef">NULL</span>,
</span></span><span style="display:flex;"><span>    initialize <span style="color:#f92672">=</span> <span style="color:#66d9ef">function</span>(resp) self<span style="color:#f92672">$</span>x <span style="color:#f92672">&lt;-</span> resp,
</span></span><span style="display:flex;"><span>    data <span style="color:#f92672">=</span> <span style="color:#66d9ef">function</span>() self<span style="color:#f92672">$</span>x<span style="color:#f92672">$</span><span style="color:#a6e22e">parse</span>(<span style="color:#e6db74">&#34;UTF-8&#34;</span>),
</span></span><span style="display:flex;"><span>    error <span style="color:#f92672">=</span> <span style="color:#66d9ef">function</span>() {
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">sprintf</span>(<span style="color:#e6db74">&#34;HTTP %s %s&#34;</span>, self<span style="color:#f92672">$</span>x<span style="color:#f92672">$</span>status_code, self<span style="color:#f92672">$</span>x<span style="color:#f92672">$</span><span style="color:#a6e22e">status_http</span>()<span style="color:#f92672">$</span>explanation)
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>  )
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span>myfunc <span style="color:#f92672">&lt;-</span> <span style="color:#66d9ef">function</span>() {
</span></span><span style="display:flex;"><span>  res <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">hello_world</span>(path <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;status/400&#34;</span>)
</span></span><span style="display:flex;"><span>  Response<span style="color:#f92672">$</span><span style="color:#a6e22e">new</span>(res)
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Which gives:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>out <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">myfunc</span>()
</span></span><span style="display:flex;"><span><span style="color:#75715e"># the HTTP message</span>
</span></span><span style="display:flex;"><span>out<span style="color:#f92672">$</span><span style="color:#a6e22e">error</span>()
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;HTTP 400 Bad request syntax or unsupported method&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># the response body, parsed</span>
</span></span><span style="display:flex;"><span>out<span style="color:#f92672">$</span><span style="color:#a6e22e">data</span>()
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># the full HTTP response object</span>
</span></span><span style="display:flex;"><span>out<span style="color:#f92672">$</span>x
</span></span></code></pre></div><h2 id="what-about-users-handling-exceptions-on-their-side">what about users handling exceptions on their side?</h2>
<p>If one sticks swith erroring out of excecution flow with 400/500 series errors, the user can still handle it on their end. For example, if they are using a function in a loop/appply type call, they can use <code>tryCatch</code> or similar and check for an error and proceed one of two or more ways depending on the error or successful request. Of course this assumes that the user knows how to do this.</p>
<p>Additionally, this means that each user will handle errors in different ways, possibly making mistakes in the process - arguing for the developer of the package to handle exceptions instead.</p>
<h2 id="its-too-complex-just-fail-out">it&rsquo;s too complex, just fail out</h2>
<p>One reason I like to fail out on 400/500 series errors in my packages is that there is often significant data munging of the response. Failing out makes my life easier as I don&rsquo;t have to worry about what to do with HTTP responses that fail. In the world I run in of smallish APIs for science/research, API failure behavior often is not very good; it&rsquo;s typically unpredictable, changes from time to time, and failure response bodies are often just their HTML failure page, leading to brittle code for parsing that HTML as that HTML can change often. It&rsquo;d be great if every API was as good as Github&rsquo;s for example, but we&rsquo;ll never be in that place.</p>
<h2 id="performance-considerations">performance considerations</h2>
<p>In reading about exceptions in control flow, there&rsquo;s a common thread about performance (e.g., <a href="https://stackoverflow.com/questions/13835817/are-exceptions-in-c-really-slow">c++</a>, <a href="https://simonecarletti.com/blog/2010/01/how-slow-are-ruby-exceptions/">Ruby 1</a>, <a href="https://www.honeybadger.io/blog/benchmarking-exceptions-in-ruby-yep-theyre-slow/">Ruby 2</a>). That is, if throwing exceptions is a slow procedure, that&rsquo;s one reason to avoid them. But if exceptions aren&rsquo;t slow then that&rsquo;s not a great argument for avoiding them.</p>
<p>I haven&rsquo;t seen anything on performance an exceptions in R, though I&rsquo;m sure there&rsquo;s something out there.</p>
<p>Even if exceptions are a slowish procedure, there is an argument to be made that failing early also saves time; that is, if you get a 400/500 series error you aren&rsquo;t then spending time with downstream processing of the response. However, then the user has less information. Trade-offs all the way down.</p>
<h2 id="conclusion">conclusion</h2>
<p>I&rsquo;m not sure if I&rsquo;ll change anything in packages I maintain or not. I&rsquo;ll keep thinking about this and ask around to gauge others opinions on this. Part of me wants to follow the avoid exceptions path, but I worry about two things. First, the complexity increases for me as the developer. If I don&rsquo;t fail out, then I have to deal with parsing somehow every response. It&rsquo;s not as simple as giving back the HTTP response; I ideally want to give users a data structure they are familiar with, i.e., a data.frame. Second, for the user, if I give back a list or an <code>R6</code> object, that increases complexity on their side. Is the benefit of more information worth the cost of more complexity for the user? I&rsquo;ve no idea.</p>
]]></content:encoded>
    </item>
    <item>
      <title>request - a high level HTTP client for R</title>
      <link>http://localhost:1313/2016/01/request-hello-world/</link>
      <pubDate>Tue, 05 Jan 2016 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2016/01/request-hello-world/</guid>
      <description>request is DSL for http requests for R, and is inspired by the CLI tool httpie. It&amp;rsquo;s built on httr.
The following were driving principles for this package:
The web is increasingly a JSON world, so we assume applications/json by default, but give back other types if not The workflow follows logically, or at least should, from, hey, I got this url, to i need to add some options, to execute request - and functions support piping so that you can execute functions in this order Whenever possible, we transform output to data.</description><content:encoded><![CDATA[ ]]>
               <![CDATA[<p><code>request</code> is DSL for http requests for R, and is inspired by the CLI tool <a href="https://github.com/jakubroztocil/httpie">httpie</a>. It&rsquo;s built on <code>httr</code>.</p>
<p>The following were driving principles for this package:</p>
<ul>
<li>The web is increasingly a JSON world, so we assume <code>applications/json</code> by default, but give back other types if not</li>
<li>The workflow follows logically, or at least should, from, <em>hey, I got this url</em>, to <em>i need to add some options</em>, to <em>execute request</em> - and functions support piping so that you can execute functions in this order</li>
<li>Whenever possible, we transform output to data.frame&rsquo;s - facilitating downstream manipulation via <code>dplyr</code>, etc.</li>
<li>We do <code>GET</code> requests by default. Specify a different type if you don&rsquo;t want <code>GET</code>. Given <code>GET</code> by default, this client is optimized for consumption of data, rather than creating new things on servers</li>
<li>You can use non-standard evaluation to easily pass in query parameters without worrying about <code>&amp;</code>&rsquo;s, URL escaping, etc. (see <code>api_query()</code>)</li>
<li>Same for body params (see <code>api_body()</code>)</li>
</ul>
<p>The following is a brief demo of some of the package functionality:</p>
<h2 id="install">Install</h2>
<p>From CRAN</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">install.packages</span>(<span style="color:#e6db74">&#34;request&#34;</span>)
</span></span></code></pre></div><p>Or from GitHub</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>devtools<span style="color:#f92672">::</span><span style="color:#a6e22e">install_github</span>(<span style="color:#e6db74">&#34;sckott/request&#34;</span>)
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">library</span>(<span style="color:#e6db74">&#34;request&#34;</span>)
</span></span></code></pre></div><h2 id="execute-on-last-pipe">Execute on last pipe</h2>
<p>When using pipes (<code>%&gt;%</code>) in <code>request</code>, we autodetect last piped command, and execute <code>http()</code> if it&rsquo;s the last. If not the last, the output gets passed to the next command, and so on. This feature (and <code>magrittr</code>) were done by Stefan Milton Bache.</p>
<p>This feature is really nice because a) it&rsquo;s one less thing you need to do, and b) you only need to care about the request itself.</p>
<p>You can escape auto-execution if you use the function <code>peep()</code>, which prints out a summary of the request you&rsquo;ve created, but does not execute an HTTP request.</p>
<h2 id="http-requests">HTTP Requests</h2>
<p>A high level function <code>http()</code> wraps a lower level <code>R6</code> object <code>RequestIterator</code>, which holds a series of variables and functions to execute <code>GET</code> and <code>POST</code> requests, and will hold other HTTP verbs as well. In addition, it can hold state, which will allow us to do paging internally for you (see below). You have direct access to the <code>R6</code> object if you call <code>http_client()</code> instead of <code>http()</code>.</p>
<h2 id="nse-and-se">NSE and SE</h2>
<p>Most if not all functions in <code>request</code> support non-standard evaluation (NSE) as well as standard evaluation (SE). If a function supports both, there&rsquo;s a version without an underscore for NSE, while a version with an underscore is for SE. For example, here, we make a HTTP request by passing a base URL, then a series of paths that get combined together. First the NSE version</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">api</span>(<span style="color:#e6db74">&#39;https://api.github.com/&#39;</span>) <span style="color:#f92672">%&gt;%</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">api_path</span>(repos, ropensci, rgbif, issues)
</span></span></code></pre></div><p>Then the SE version</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">api</span>(<span style="color:#e6db74">&#39;https://api.github.com/&#39;</span>) <span style="color:#f92672">%&gt;%</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">api_path_</span>(<span style="color:#e6db74">&#39;repos&#39;</span>, <span style="color:#e6db74">&#39;ropensci&#39;</span>, <span style="color:#e6db74">&#39;rgbif&#39;</span>, <span style="color:#e6db74">&#39;issues&#39;</span>)
</span></span></code></pre></div><h2 id="building-api-routes">Building API routes</h2>
<p>The first thing you&rsquo;ll want to do is lay out the base URL for your request. The function <code>api()</code> is your friend.</p>
<p><code>api()</code> works with full or partial URLs:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">api</span>(<span style="color:#e6db74">&#39;https://api.github.com/&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; URL: https://api.github.com/</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">api</span>(<span style="color:#e6db74">&#39;https://api.gbif.org/v1&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; URL: https://api.gbif.org/v1</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">api</span>(<span style="color:#e6db74">&#39;api.gbif.org/v1&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; URL: api.gbif.org/v1</span>
</span></span></code></pre></div><p>And works with ports, full or partial</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">api</span>(<span style="color:#e6db74">&#39;http://localhost:9200&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; URL: http://localhost:9200</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">api</span>(<span style="color:#e6db74">&#39;localhost:9200&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; URL: http://localhost:9200</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">api</span>(<span style="color:#e6db74">&#39;:9200&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; URL: http://localhost:9200</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">api</span>(<span style="color:#e6db74">&#39;9200&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; URL: http://localhost:9200</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">api</span>(<span style="color:#e6db74">&#39;9200/stuff&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; URL: http://localhost:9200/stuff</span>
</span></span></code></pre></div><h2 id="make-http-requests">Make HTTP requests</h2>
<p>The above examples with <code>api()</code> are not passed through a pipe, so only define a URL, but don&rsquo;t do an HTTP request. To make an HTTP request, you can either pipe a url or partial url to e.g., <code>api()</code>, or call <code>http()</code> at the end of a string of function calls:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#e6db74">&#39;https://api.github.com/&#39;</span> <span style="color:#f92672">%&gt;%</span> <span style="color:#a6e22e">api</span>()
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $current_user_url</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;https://api.github.com/user&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $current_user_authorizations_html_url</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;https://github.com/settings/connections/applications{/client_id}&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $authorizations_url</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;https://api.github.com/authorizations&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $code_search_url</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">...</span>
</span></span></code></pre></div><p>Or</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">api</span>(<span style="color:#e6db74">&#39;https://api.github.com/&#39;</span>) <span style="color:#f92672">%&gt;%</span> <span style="color:#a6e22e">http</span>()
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $current_user_url</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;https://api.github.com/user&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $current_user_authorizations_html_url</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;https://github.com/settings/connections/applications{/client_id}&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $authorizations_url</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;https://api.github.com/authorizations&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $code_search_url</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">...</span>
</span></span></code></pre></div><p><code>http()</code> is called at the end of a chain of piped commands, so no need to invoke it. However, you can if you like.</p>
<h2 id="templating">Templating</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>repo_info <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">list</span>(username <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;craigcitro&#39;</span>, repo <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;r-travis&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">api</span>(<span style="color:#e6db74">&#39;https://api.github.com/&#39;</span>) <span style="color:#f92672">%&gt;%</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">api_template</span>(template <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;repos/{{username}}/{{repo}}/issues&#39;</span>, data <span style="color:#f92672">=</span> repo_info)
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [[1]]</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [[1]]$url</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;https://api.github.com/repos/craigcitro/r-travis/issues/164&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [[1]]$labels_url</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;https://api.github.com/repos/craigcitro/r-travis/issues/164/labels{/name}&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [[1]]$comments_url</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;https://api.github.com/repos/craigcitro/r-travis/issues/164/comments&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; ...</span>
</span></span></code></pre></div><h2 id="set-paths">Set paths</h2>
<p><code>api_path()</code> adds paths to the base URL</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">api</span>(<span style="color:#e6db74">&#39;https://api.github.com/&#39;</span>) <span style="color:#f92672">%&gt;%</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">api_path</span>(repos, ropensci, rgbif, issues) <span style="color:#f92672">%&gt;%</span>
</span></span><span style="display:flex;"><span>  peep
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; &lt;http request&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   url: https://api.github.com/</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   paths: repos/ropensci/rgbif/issues</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   query:</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   body:</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   paging:</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   headers:</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   rate limit:</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   retry (n/delay (s)): /</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   error handler:</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   config:</span>
</span></span></code></pre></div><h2 id="query">Query</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">api</span>(<span style="color:#e6db74">&#34;https://api.plos.org/search&#34;</span>) <span style="color:#f92672">%&gt;%</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">api_query</span>(q <span style="color:#f92672">=</span> ecology, wt <span style="color:#f92672">=</span> json, fl <span style="color:#f92672">=</span> journal) <span style="color:#f92672">%&gt;%</span>
</span></span><span style="display:flex;"><span>  peep
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; &lt;http request&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   url: https://api.plos.org/search</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   paths:</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   query: q=ecology, wt=json, fl=journal</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   body:</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   paging:</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   headers:</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   rate limit:</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   retry (n/delay (s)): /</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   error handler:</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   config:</span>
</span></span></code></pre></div><h2 id="headers">Headers</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">api</span>(<span style="color:#e6db74">&#39;https://httpbin.org/headers&#39;</span>) <span style="color:#f92672">%&gt;%</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">api_headers</span>(`X-FARGO-SEASON` <span style="color:#f92672">=</span> <span style="color:#ae81ff">3</span>, `X-NARCOS-SEASON` <span style="color:#f92672">=</span> <span style="color:#ae81ff">5</span>) <span style="color:#f92672">%&gt;%</span>
</span></span><span style="display:flex;"><span>  peep
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; &lt;http request&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   url: https://httpbin.org/headers</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   paths:</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   query:</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   body:</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   paging:</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   headers:</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;     X-FARGO-SEASON: 3</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;     X-NARCOS-SEASON: 5</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   rate limit:</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   retry (n/delay (s)): /</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   error handler:</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   config:</span>
</span></span></code></pre></div><h2 id="curl-configuration">curl configuration</h2>
<p><code>httr</code> is exported in <code>request</code>, so you can use <code>httr</code> functions like <code>verbose()</code> to get verbose curl output</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">api</span>(<span style="color:#e6db74">&#39;https://httpbin.org/headers&#39;</span>) <span style="color:#f92672">%&gt;%</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">api_config</span>(<span style="color:#a6e22e">verbose</span>())
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; -&gt; GET /headers HTTP/1.1</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; -&gt; Host: httpbin.org</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; -&gt; User-Agent: curl/7.43.0 curl/0.9.4 httr/1.0.0 request/0.1.0</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; -&gt; Accept-Encoding: gzip, deflate</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; -&gt; Accept: application/json, text/xml, application/xml, */*</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; -&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; &lt;- HTTP/1.1 200 OK</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; &lt;- Server: nginx</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; &lt;- Date: Sun, 03 Jan 2016 16:56:29 GMT</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; &lt;- Content-Type: application/json</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; &lt;- Content-Length: 227</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; &lt;- Connection: keep-alive</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; &lt;- Access-Control-Allow-Origin: *</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; &lt;- Access-Control-Allow-Credentials: true</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; &lt;-</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $headers</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $headers$Accept</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;application/json, text/xml, application/xml, */*&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; ...</span>
</span></span></code></pre></div><h2 id="coming-soon">Coming soon</h2>
<p>There&rsquo;s a number of interesting features that should be coming soon to <code>request</code>.</p>
<ul>
<li>Paging - a paging helper will make it easy to do paing, and will attempt to handle any parameters used for paging. Some user input will be required, like what parameter names are, and how many records you want returned  <a href="https://github.com/sckott/request/issues/2">sckott/request#2</a></li>
<li>Retry - a retry helper will make it easy to retry http requests on any failure, and execute a user defined function on failure <a href="https://github.com/sckott/request/issues/6">sckott/request#6</a></li>
<li>Rate limit - a rate limit helper will add info to a set of many requests - still in early design stages <a href="https://github.com/sckott/request/issues/5">sckott/request#5</a></li>
<li>Caching - a caching helper - may use in the background the in development <a href="https://github.com/ropensci/vcr">vcr R client</a> when on CRAN or perhaps <a href="https://github.com/richfitz/storr">storr</a>  <a href="https://github.com/sckott/request/issues/4">sckott/request#4</a></li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>the new way - httsnap</title>
      <link>http://localhost:1313/2015/04/the-new-way/</link>
      <pubDate>Wed, 29 Apr 2015 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2015/04/the-new-way/</guid>
      <description>Inspired by httpie, a Python command line client as a sort of drop in replacement for curl, I am playing around with something similar-ish in R, at least in spirit. I started a little R pkg called httsnap with the following ideas:
The web is increasingly a JSON world, so set content-type and accept headers to applications/json by default The workflow follows logically, or at least should, from, hey, I got this url, to i need to add some options, to execute request Whenever possible, transform output to data.</description><content:encoded><![CDATA[ ]]>
               <![CDATA[<p>Inspired by <code>httpie</code>, a Python command line client as a sort of drop in replacement for <code>curl</code>, I am playing around with something similar-ish in R, at least in spirit. I started a little R pkg called <code>httsnap</code> with the following ideas:</p>
<ul>
<li>The web is increasingly a JSON world, so set <code>content-type</code> and <code>accept</code> headers to <code>applications/json</code> by default</li>
<li>The workflow follows logically, or at least should, from, <em>hey, I got this url</em>, to <em>i need to add some options</em>, to <em>execute request</em></li>
<li>Whenever possible, transform output to data.frame&rsquo;s - facilitating downstream manipulation via <code>dplyr</code>, etc.</li>
<li>Do <code>GET</code> requests by default. Specify a different type if you don&rsquo;t want <code>GET</code>. Some functionality does GET by default, though in some cases you need to specify GET</li>
<li>You can use non-standard evaluation to easily pass in query parameters without worrying about <code>&amp;</code>&rsquo;s, URL escaping, etc. (see <code>Query()</code>)</li>
<li>Same for body params (see <code>Body()</code>)</li>
</ul>
<h2 id="install">Install</h2>
<p>Install and load <code>httsnap</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>devtools<span style="color:#f92672">::</span><span style="color:#a6e22e">install_github</span>(<span style="color:#e6db74">&#34;sckott/httsnap&#34;</span>)
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">library</span>(<span style="color:#e6db74">&#34;httsnap&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">library</span>(<span style="color:#e6db74">&#34;dplyr&#34;</span>)
</span></span></code></pre></div><h2 id="functions-so-far">Functions so far</h2>
<ul>
<li><code>Get</code> - GET request</li>
<li><code>Query</code> - add query parameters</li>
<li><code>Authenticate</code> - add authentication details</li>
<li><code>Progress</code> - add progress bar</li>
<li><code>Timeout</code> - add a timeout</li>
<li><code>User_agent</code> - add a user agent</li>
<li><code>Verbose</code> - give verbose output</li>
<li><code>Body</code> - add a body</li>
<li><code>h</code> - add headers by key-value pair</li>
</ul>
<p>These are named to avoid conflict with <code>httr</code></p>
<h2 id="intro">Intro</h2>
<p>A simple <code>GET</code> request</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#e6db74">&#34;https://httpbin.org/get&#34;</span> <span style="color:#f92672">%&gt;%</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">Get</span>()
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $args</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; named list()</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $headers</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $headers$Accept</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;application/json, text/xml, application/xml, */*&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $headers$`Accept-Encoding`</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;gzip&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $headers$Host</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;httpbin.org&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $headers$`User-Agent`</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;curl/7.37.1 Rcurl/1.95.4.1 httr/0.6.1 httsnap/0.0.2.99&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $origin</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;24.21.209.71&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $url</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;https://httpbin.org/get&#34;</span>
</span></span></code></pre></div><p>You&rsquo;ll notice that <code>Get()</code> doesn&rsquo;t just get the response, but also checks for whether it was a good response (the HTTP status code), and extracts the data.</p>
<p>Or you can just pass the URL into the function itself</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">Get</span>(<span style="color:#e6db74">&#34;https://httpbin.org/get&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $args</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; named list()</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $headers</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $headers$Accept</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;application/json, text/xml, application/xml, */*&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $headers$`Accept-Encoding`</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;gzip&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $headers$Host</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;httpbin.org&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $headers$`User-Agent`</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;curl/7.37.1 Rcurl/1.95.4.1 httr/0.6.1 httsnap/0.0.2.99&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $origin</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;24.21.209.71&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $url</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;https://httpbin.org/get&#34;</span>
</span></span></code></pre></div><p>You can buid up options by calling functions via pipes, and see what the options look like</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#e6db74">&#34;https://httpbin.org/get&#34;</span> <span style="color:#f92672">%&gt;%</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">Progress</span>() <span style="color:#f92672">%&gt;%</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">Verbose</span>()
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; &lt;http request&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   url: https://httpbin.org/get</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   config: </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; Config: </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; List of 4</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;  $ noprogress      :FALSE</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;  $ progressfunction:function (...)  </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;  $ debugfunction   :function (...)  </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;  $ verbose         :TRUE</span>
</span></span></code></pre></div><p>Then execute the GET request when you&rsquo;re ready</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#e6db74">&#34;https://httpbin.org/get&#34;</span> <span style="color:#f92672">%&gt;%</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">Progress</span>() <span style="color:#f92672">%&gt;%</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">Verbose</span>() <span style="color:#f92672">%&gt;%</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">Get</span>()
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $args</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; named list()</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $headers</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $headers$Accept</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;application/json, text/xml, application/xml, */*&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $headers$`Accept-Encoding`</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;gzip&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $headers$Host</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;httpbin.org&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $headers$`User-Agent`</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;curl/7.37.1 Rcurl/1.95.4.1 httr/0.6.1 httsnap/0.0.2.99&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $origin</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;24.21.209.71&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $url</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;https://httpbin.org/get&#34;</span>
</span></span></code></pre></div><h2 id="example-1">Example 1</h2>
<p>Get scholarly article metadata from the Crossref API</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#e6db74">&#34;https://api.crossref.org/works&#34;</span> <span style="color:#f92672">%&gt;%</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">Query</span>(query <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;ecology&#34;</span>) <span style="color:#f92672">%&gt;%</span> 
</span></span><span style="display:flex;"><span>  .$message <span style="color:#f92672">%&gt;%</span> 
</span></span><span style="display:flex;"><span>  .$items <span style="color:#f92672">%&gt;%</span> 
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">select</span>(DOI, title, publisher)
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;                            DOI                title</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 1          10.4996/fireecology         Fire Ecology</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 2              10.5402/ecology         ISRN Ecology</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 3                 10.1155/8641         ISRN Ecology</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 4      10.1111/(issn)1526-100x  Restoration Ecology</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 5        10.1007/248.1432-184x    Microbial Ecology</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 6      10.1007/10144.1438-390x   Population Ecology</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 7      10.1007/10452.1573-5125      Aquatic Ecology</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 8      10.1007/10682.1573-8477 Evolutionary Ecology</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 9      10.1007/10745.1572-9915        Human Ecology</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 10     10.1007/10980.1572-9761    Landscape Ecology</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 11     10.1007/11258.1573-5052        Plant Ecology</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 12     10.1007/12080.1874-1746  Theoretical Ecology</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 13     10.1111/(issn)1442-9993      Austral Ecology</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 14     10.1111/(issn)1439-0485       Marine Ecology</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 15     10.1111/(issn)1365-2435   Functional Ecology</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 16     10.1111/(issn)1365-294x    Molecular Ecology</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 17     10.1111/(issn)1461-0248      Ecology Letters</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 18   10.1002/9780470979365.ch7  Behavioural Ecology</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 19 10.1111/fec.2007.21.issue-5                     </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 20     10.1111/rec.0.0.issue-0                     </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;                            publisher</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 1       Association for Fire Ecology</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 2     Hindawi Publishing Corporation</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 3     Hindawi Publishing Corporation</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 4                    Wiley-Blackwell</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 5  Springer Science + Business Media</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 6  Springer Science + Business Media</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 7  Springer Science + Business Media</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 8  Springer Science + Business Media</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 9  Springer Science + Business Media</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 10 Springer Science + Business Media</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 11 Springer Science + Business Media</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 12 Springer Science + Business Media</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 13                   Wiley-Blackwell</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 14                   Wiley-Blackwell</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 15                   Wiley-Blackwell</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 16                   Wiley-Blackwell</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 17                   Wiley-Blackwell</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 18                   Wiley-Blackwell</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 19                   Wiley-Blackwell</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 20                   Wiley-Blackwell</span>
</span></span></code></pre></div><h2 id="example-2">Example 2</h2>
<p>Get Public Library of Science article metadata via their API, make a histogram of number of tweets for each article</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#e6db74">&#34;https://api.plos.org/search&#34;</span> <span style="color:#f92672">%&gt;%</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">Query</span>(q <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;*:*&#34;</span>, wt <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;json&#34;</span>, rows <span style="color:#f92672">=</span> <span style="color:#ae81ff">100</span>, 
</span></span><span style="display:flex;"><span>        fl <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;id,journal,alm_twitterCount&#34;</span>,  
</span></span><span style="display:flex;"><span>        fq <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;alm_twitterCount:[100 TO 10000]&#39;</span>) <span style="color:#f92672">%&gt;%</span> 
</span></span><span style="display:flex;"><span>  .$response <span style="color:#f92672">%&gt;%</span> 
</span></span><span style="display:flex;"><span>  .$docs <span style="color:#f92672">%&gt;%</span> 
</span></span><span style="display:flex;"><span>  .$alm_twitterCount <span style="color:#f92672">%&gt;%</span> 
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">hist</span>()
</span></span></code></pre></div><p><img loading="lazy" src="/public/img/2015-04-29-the-new-way/unnamed-chunk-9-1.png" alt="image"  />
</p>
<h2 id="notes">Notes</h2>
<p>Okay, so this isn&rsquo;t drastically different from what <code>httr</code> already does, but its early days.</p>
]]></content:encoded>
    </item>
    <item>
      <title>httping - ping and time http requests</title>
      <link>http://localhost:1313/2015/01/httping/</link>
      <pubDate>Fri, 30 Jan 2015 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2015/01/httping/</guid>
      <description>I&amp;rsquo;ve been working on a little thing called httping - a small R package that started as a pkg to Ping urls and time requests. It&amp;rsquo;s a port of the Ruby gem httping. The httr package is in Depends in this package, so its functions can be called directly, without having to load httr explicitly yourself.
In addition to timing requests, I&amp;rsquo;ve been tinkering with how to make http requests, with curl options accepting and returning the same object so they can be chained together, and then that object passed to a http verb like GET.</description><content:encoded><![CDATA[ ]]>
               <![CDATA[<p>I&rsquo;ve been working on a little thing called <code>httping</code> - a small R package that started as a pkg to Ping urls and time requests. It&rsquo;s a port of the Ruby gem <a href="https://github.com/jpignata/httping">httping</a>. The <code>httr</code> package is in <code>Depends</code> in this package, so its functions can be called directly, without having to load <code>httr</code> explicitly yourself.</p>
<p>In addition to timing requests, I&rsquo;ve been tinkering with how to make http requests, with curl options accepting and returning the same object so they can be chained together, and then that object passed to a http verb like <code>GET</code>. Maybe this is a bad idea, but maybe not.</p>
<h2 id="installation">Installation</h2>
<p>Install:</p>
<p>One non-CRAN dep (<code>httpcode</code>) needs to be installed first.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">install.packages</span>(<span style="color:#e6db74">&#34;devtools&#34;</span>)
</span></span><span style="display:flex;"><span>devtools<span style="color:#f92672">::</span><span style="color:#a6e22e">install_github</span>(<span style="color:#e6db74">&#34;sckott/httpcode&#34;</span>)
</span></span><span style="display:flex;"><span>devtools<span style="color:#f92672">::</span><span style="color:#a6e22e">install_github</span>(<span style="color:#e6db74">&#34;sckott/httping&#34;</span>)
</span></span></code></pre></div><p>Then load package</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">library</span>(<span style="color:#e6db74">&#34;httping&#34;</span>)
</span></span></code></pre></div><h2 id="time-requests">Time requests</h2>
<p>The idea with <code>time()</code> is to provide easy to use and understand information on how long http requests take to run. You should be able to pass in any <code>httr</code> verbs (<code>GET()</code>, <code>POST()</code>, etc.) to <code>time()</code>. <code>time()</code> repeats whatever http request you pass to it by default 10 times, but you can set the number of times to repeat in the <code>count</code> parameter. In addition, the <code>flood</code> parameter controls whether there is a delay between requests or not, and <code>delay</code> controls length of the delay.</p>
<p>A <code>GET</code> request</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">GET</span>(<span style="color:#e6db74">&#34;http://google.com&#34;</span>) <span style="color:#f92672">%&gt;%</span> <span style="color:#a6e22e">time</span>(count<span style="color:#f92672">=</span><span style="color:#ae81ff">3</span>)
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 29.392 kb - http://www.google.com/ code:200 time(ms):92.444</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 29.392 kb - http://www.google.com/ code:200 time(ms):82.127</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 29.392 kb - http://www.google.com/ code:200 time(ms):85.587</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; &lt;http time&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   Avg. min (ms):  82.127</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   Avg. max (ms):  92.444</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   Avg. mean (ms): 86.71933</span>
</span></span></code></pre></div><p>A <code>POST</code> request</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">POST</span>(<span style="color:#e6db74">&#34;http://httpbin.org/post&#34;</span>, body <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;A simple text string&#34;</span>) <span style="color:#f92672">%&gt;%</span> <span style="color:#a6e22e">time</span>(count<span style="color:#f92672">=</span><span style="color:#ae81ff">3</span>)
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 10.144 kb - http://httpbin.org/post code:200 time(ms):267.574</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 10.144 kb - http://httpbin.org/post code:200 time(ms):113.309</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 10.144 kb - http://httpbin.org/post code:200 time(ms):99.938</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; &lt;http time&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   Avg. min (ms):  99.938</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   Avg. max (ms):  267.574</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   Avg. mean (ms): 160.2737</span>
</span></span></code></pre></div><p>The return object is a list with slots for all the <code>httr</code> response objects, the times for each request, and the average times. The number of requests, and the delay between requests are included as attributes.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>res <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">GET</span>(<span style="color:#e6db74">&#34;http://google.com&#34;</span>) <span style="color:#f92672">%&gt;%</span> <span style="color:#a6e22e">time</span>(count<span style="color:#f92672">=</span><span style="color:#ae81ff">3</span>)
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 29.392 kb - http://www.google.com/ code:200 time(ms):82.086</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 29.392 kb - http://www.google.com/ code:200 time(ms):78.15</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 29.392 kb - http://www.google.com/ code:200 time(ms):79.763</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">attributes</span>(res)
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $names</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;times&#34;    &#34;averages&#34; &#34;request&#34; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $count</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] 3</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $delay</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] 0.5</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $class</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;http_time&#34;</span>
</span></span></code></pre></div><p>Or print a summary of a response, gives more detail</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>res <span style="color:#f92672">%&gt;%</span> <span style="color:#a6e22e">summary</span>()
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; &lt;http time, averages (min max mean)&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   Total (s):           78.15 82.086 79.99967</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   Tedirect (s):        26.695 34.319 29.80633</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   Namelookup time (s): 0.025 0.03 0.028</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   Connect (s):         0.028 0.034 0.032</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   Pretransfer (s):     0.069 0.081 0.07633333</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   Starttransfer (s):   45.44 49.326 47.95867</span>
</span></span></code></pre></div><p>Messages are printed using <code>cat</code>, so you can suppress those using <code>verbose=FALSE</code>, like</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">GET</span>(<span style="color:#e6db74">&#34;http://google.com&#34;</span>) <span style="color:#f92672">%&gt;%</span> <span style="color:#a6e22e">time</span>(count<span style="color:#f92672">=</span><span style="color:#ae81ff">3</span>, verbose <span style="color:#f92672">=</span> <span style="color:#66d9ef">FALSE</span>)
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; &lt;http time&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   Avg. min (ms):  86.12</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   Avg. max (ms):  94.035</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   Avg. mean (ms): 89.12467</span>
</span></span></code></pre></div><h2 id="ping-an-endpoint">Ping an endpoint</h2>
<p>The idea with <code>ping()</code> is to simply return the http status code along with a message describing what that code means. That&rsquo;s it.</p>
<p>This function is a bit different, accepts a url as first parameter, but can accept any args passed on to <code>httr</code> verb functions, like <code>GET</code>, <code>POST</code>,  etc.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#e6db74">&#34;http://google.com&#34;</span> <span style="color:#f92672">%&gt;%</span> <span style="color:#a6e22e">ping</span>()
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; &lt;http ping&gt; 200</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   Message: OK</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   Description: Request fulfilled, document follows</span>
</span></span></code></pre></div><p>Or pass in additional arguments to modify request</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#e6db74">&#34;http://google.com&#34;</span> <span style="color:#f92672">%&gt;%</span> <span style="color:#a6e22e">ping</span>(config<span style="color:#f92672">=</span><span style="color:#a6e22e">verbose</span>())
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; -&gt; GET / HTTP/1.1</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; -&gt; User-Agent: curl/7.37.1 Rcurl/1.95.4.5 httr/0.6.1</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; -&gt; Host: google.com</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; -&gt; Accept-Encoding: gzip</span>
</span></span><span style="display:flex;"><span>...cutoff
</span></span></code></pre></div><h2 id="even-simpler-verbs">Even simpler verbs</h2>
<p><code>httr</code> is already easy, but <code>Get()</code>:</p>
<ul>
<li>Allows use of an intuitive chaining workflow</li>
<li>Parses data for you using <code>httr</code> built in format guesser, which should work in most cases</li>
</ul>
<p>A simple GET request</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#e6db74">&#34;http://httpbin.org/get&#34;</span> <span style="color:#f92672">%&gt;%</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">Get</span>()
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $args</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; named list()</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $headers</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $headers$Accept</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;application/json, text/xml, application/xml, */*&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $headers$`Accept-Encoding`</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;gzip&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $headers$Host</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;httpbin.org&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $headers$`User-Agent`</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;curl/7.37.1 Rcurl/1.95.4.5 httr/0.6.1&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $origin</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;24.21.209.71&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $url</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;http://httpbin.org/get&#34;</span>
</span></span></code></pre></div><p>You can buid up options by calling functions</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#e6db74">&#34;http://httpbin.org/get&#34;</span> <span style="color:#f92672">%&gt;%</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">Progress</span>() <span style="color:#f92672">%&gt;%</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">Verbose</span>()
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; &lt;http request&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   url: http://httpbin.org/get</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   config: </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; Config: </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; List of 4</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;  $ noprogress      :FALSE</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;  $ progressfunction:function (...)  </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;  $ debugfunction   :function (...)  </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;  $ verbose         :TRUE</span>
</span></span></code></pre></div><p>Then eventually execute the GET request</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#e6db74">&#34;http://httpbin.org/get&#34;</span> <span style="color:#f92672">%&gt;%</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">Verbose</span>() <span style="color:#f92672">%&gt;%</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">Progress</span>() <span style="color:#f92672">%&gt;%</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">Get</span>()
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; -&gt; GET /get HTTP/1.1</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; -&gt; User-Agent: curl/7.37.1 Rcurl/1.95.4.5 httr/0.6.1</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; -&gt; Host: httpbin.org</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; -&gt; Accept-Encoding: gzip</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; -&gt; Accept: application/json, text/xml, application/xml, */*</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; -&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; &lt;- HTTP/1.1 200 OK</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; &lt;- Server: nginx</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; &lt;- Date: Fri, 30 Jan 2015 17:38:58 GMT</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; &lt;- Content-Type: application/json</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; &lt;- Content-Length: 288</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; &lt;- Connection: keep-alive</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; &lt;- Access-Control-Allow-Origin: *</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; &lt;- Access-Control-Allow-Credentials: true</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; &lt;- </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   |=======================================| 100%</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $args</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; named list()</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $headers</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $headers$Accept</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;application/json, text/xml, application/xml, */*&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $headers$`Accept-Encoding`</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;gzip&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $headers$Host</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;httpbin.org&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $headers$`User-Agent`</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;curl/7.37.1 Rcurl/1.95.4.5 httr/0.6.1&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $origin</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;24.21.209.71&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $url</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;http://httpbin.org/get&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span></code></pre></div>]]></content:encoded>
    </item>
    <item>
      <title>elastic - Elasticsearch from R</title>
      <link>http://localhost:1313/2015/01/elasticsearch/</link>
      <pubDate>Thu, 29 Jan 2015 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2015/01/elasticsearch/</guid>
      <description>We&amp;rsquo;ve (ropensci) been working on an R client for interacting with Elasticsearch for a while now, first commit was November 2013.
Elasticsearch is a document database built on the JVM. elastic interacts with the Elasticsearch HTTP API, and includes functions for setting connection details to Elasticsearch instances, loading bulk data, searching for documents with both HTTP query variables and JSON based body requests. In addition, elastic provides functions for interacting with APIs for indices, documents, nodes, clusters, an interface to the cat API, and more.</description><content:encoded><![CDATA[ ]]>
               <![CDATA[<p>We&rsquo;ve (ropensci) been working on an R client for interacting with <a href="https://www.elasticsearch.org/">Elasticsearch</a> for a while now, first commit was November 2013.</p>
<p>Elasticsearch is a document database built on the JVM. <code>elastic</code> interacts with the Elasticsearch HTTP API, and includes functions for setting connection details to Elasticsearch instances, loading bulk data, searching for documents with both HTTP query variables and JSON based body requests. In addition, <code>elastic</code> provides functions for interacting with APIs for indices, documents, nodes, clusters, an interface to the cat API, and more.</p>
<p>Here&rsquo;s a few examples of what you can do.</p>
<p>Note: <code>elastic</code> was just pushed to CRAN. It just got accepted, so binaries may not be available, try again soon, or install from Github, or install from source from CRAN like <code>install.packages(&quot;https://cran.r-project.org/src/contrib/elastic_0.3.0.tar.gz&quot;, repos=NULL, type=&quot;source&quot;)</code>.</p>
<h2 id="installation">Installation</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">install.packages</span>(<span style="color:#e6db74">&#34;elastic&#34;</span>)
</span></span></code></pre></div><p>Or install development version:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">install.packages</span>(<span style="color:#e6db74">&#34;devtools&#34;</span>)
</span></span><span style="display:flex;"><span>devtools<span style="color:#f92672">::</span><span style="color:#a6e22e">install_github</span>(<span style="color:#e6db74">&#34;ropensci/elastic&#34;</span>)
</span></span></code></pre></div><p>Then load package</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">library</span>(<span style="color:#e6db74">&#34;elastic&#34;</span>)
</span></span></code></pre></div><h2 id="install-elasticsearch">Install Elasticsearch</h2>
<ul>
<li><a href="https://www.elasticsearch.org/guide/en/elasticsearch/reference/current/_installation.html">Elasticsearch installation help</a></li>
</ul>
<p><strong>Unix (linux/osx)</strong></p>
<p>Replace <code>1.4.1</code> with the version you are working with.</p>
<ul>
<li>Download zip or tar file from Elasticsearch <a href="https://www.elasticsearch.org/overview/elkdownloads/">see here for download</a>, e.g., <code>curl -L -O https://download.elasticsearch.org/elasticsearch/elasticsearch/elasticsearch-1.4.1.tar.gz</code></li>
<li>Uncompress it: <code>tar -xvf elasticsearch-1.4.1.tar.gz</code></li>
<li>Move it: <code>sudo mv /path/to/elasticsearch-1.4.1 /usr/local</code></li>
<li>Navigate to /usr/local: <code>cd /usr/local</code></li>
<li>Add shortcut: <code>sudo ln -s elasticsearch-1.4.1 elasticsearch</code></li>
</ul>
<p>On OSX, you can install via Homebrew: <code>brew install elasticsearch</code></p>
<p><strong>Windows</strong></p>
<p>Windows users can follow the above, but unzip the zip file instead of uncompressing the tar file.</p>
<h2 id="start-elasticsearch">Start Elasticsearch</h2>
<ul>
<li>Navigate to elasticsearch: <code>cd /usr/local/elasticsearch</code></li>
<li>Start elasticsearch: <code>bin/elasticsearch</code></li>
</ul>
<p>I create a little bash shortcut called <code>es</code> that does both of the above commands in one step (<code>cd /usr/local/elasticsearch &amp;&amp; bin/elasticsearch</code>).</p>
<p><strong>Note:</strong> Windows users should run the <code>elasticsearch.bat</code> file</p>
<h2 id="initialize-connection">Initialize connection</h2>
<p>The function <code>connect()</code> is used before doing anything else to set the connection details to your remote or local elasticsearch store. The details created by <code>connect()</code> are written to your options for the current session, and are used by <code>elastic</code> functions.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">connect</span>()
</span></span></code></pre></div><p>On package load, your base url and port are set to <code>https://127.0.0.1</code> and <code>9200</code>, respectively. You can of course override these settings per session or for all sessions.</p>
<h2 id="get-data">Get data</h2>
<p>Elasticsearch has a bulk load API to load data in fast. The format is pretty weird though. It&rsquo;s sort of JSON, but would pass no JSON linter. I include a few data sets in <code>elastic</code> so it&rsquo;s easy to get up and running, and so when you run examples in this package they&rsquo;ll actually run the same way (hopefully).</p>
<h3 id="shakespeare-data">Shakespeare data</h3>
<p>Elasticsearch provides some data on Shakespeare plays. I&rsquo;ve provided a subset of this data in this package. Get the path for the file specific to your machine:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>shakespeare <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">system.file</span>(<span style="color:#e6db74">&#34;examples&#34;</span>, <span style="color:#e6db74">&#34;shakespeare_data.json&#34;</span>, package <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;elastic&#34;</span>)
</span></span></code></pre></div><p>Then load the data into Elasticsearch:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">docs_bulk</span>(shakespeare)
</span></span></code></pre></div><h3 id="public-library-of-science-plos-data">Public Library of Science (PLOS) data</h3>
<p>A dataset inluded in the <code>elastic</code> package is metadata for PLOS scholarly articles.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>plosdat <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">system.file</span>(<span style="color:#e6db74">&#34;examples&#34;</span>, <span style="color:#e6db74">&#34;plos_data.json&#34;</span>, package <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;elastic&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">docs_bulk</span>(plosdat)
</span></span></code></pre></div><h3 id="global-biodiversity-information-facility-gbif-data">Global Biodiversity Information Facility (GBIF) data</h3>
<p>A dataset inluded in the <code>elastic</code> package is data for GBIF species occurrence records. Get the file path, then load:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>gbifdat <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">system.file</span>(<span style="color:#e6db74">&#34;examples&#34;</span>, <span style="color:#e6db74">&#34;gbif_data.json&#34;</span>, package <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;elastic&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">docs_bulk</span>(gbifdat)
</span></span></code></pre></div><p>GBIF geo data with a coordinates element to allow <code>geo_shape</code> queries</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>gbifgeo <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">system.file</span>(<span style="color:#e6db74">&#34;examples&#34;</span>, <span style="color:#e6db74">&#34;gbif_geo.json&#34;</span>, package <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;elastic&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">docs_bulk</span>(gbifgeo)
</span></span></code></pre></div><h2 id="the-search-function">The Search function</h2>
<p>The main interface to searching documents in your Elasticsearch store is the function <code>Search()</code>. I nearly always develop R software using all lowercase, but R has a function called <code>search()</code>, and I wanted to avoid collision with that function.</p>
<p><code>Search()</code> is an interface to both the HTTP search API (in which queries are passed in the URI of the request, meaning queries have to be relatively simple), as well as the POST API, or the Query DSL, in which queries are passed in the body of the request (so can be much more complex).</p>
<p>There are a huge amount of ways you can search Elasticsearch documents - this tutorial covers some of them, and highlights the ways in which you interact with the R outputs.</p>
<h3 id="search-an-index">Search an index</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>out <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">Search</span>(index<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;shakespeare&#34;</span>)
</span></span><span style="display:flex;"><span>out<span style="color:#f92672">$</span>hits<span style="color:#f92672">$</span>total
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] 5000</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>out<span style="color:#f92672">$</span>hits<span style="color:#f92672">$</span>hits[[1]]
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $`_index`</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;shakespeare&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $`_type`</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;line&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $`_id`</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;4&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $`_version`</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] 1</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $`_score`</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] 1</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $`_source`</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $`_source`$line_id</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] 5</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $`_source`$play_name</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;Henry IV&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $`_source`$speech_number</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] 1</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $`_source`$line_number</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;1.1.2&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $`_source`$speaker</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;KING HENRY IV&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $`_source`$text_entry</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;Find we a time for frighted peace to pant,&#34;</span>
</span></span></code></pre></div><h3 id="search-an-index-by-type">Search an index by type</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">Search</span>(index<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;shakespeare&#34;</span>, type<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;act&#34;</span>)<span style="color:#f92672">$</span>hits<span style="color:#f92672">$</span>hits[[1]]
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $`_index`</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;shakespeare&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $`_type`</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;act&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $`_id`</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;2227&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $`_version`</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] 1</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $`_score`</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] 1</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $`_source`</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $`_source`$line_id</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] 2228</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $`_source`$play_name</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;Henry IV&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $`_source`$speech_number</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] 81</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $`_source`$line_number</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $`_source`$speaker</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;FALSTAFF&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $`_source`$text_entry</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;ACT IV&#34;</span>
</span></span></code></pre></div><h3 id="return-certain-fields">Return certain fields</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">Search</span>(index<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;shakespeare&#34;</span>, fields<span style="color:#f92672">=</span><span style="color:#a6e22e">c</span>(<span style="color:#e6db74">&#39;play_name&#39;</span>,<span style="color:#e6db74">&#39;speaker&#39;</span>))<span style="color:#f92672">$</span>hits<span style="color:#f92672">$</span>hits[[1]]
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $`_index`</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;shakespeare&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $`_type`</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;line&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $`_id`</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;4&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $`_version`</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] 1</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $`_score`</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] 1</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $fields</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $fields$speaker</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $fields$speaker[[1]]</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;KING HENRY IV&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $fields$play_name</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $fields$play_name[[1]]</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;Henry IV&#34;</span>
</span></span></code></pre></div><h3 id="sorting">Sorting</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">Search</span>(index<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;shakespeare&#34;</span>, type<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;act&#34;</span>, sort<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;text_entry&#34;</span>)<span style="color:#f92672">$</span>hits<span style="color:#f92672">$</span>hits[1<span style="color:#f92672">:</span><span style="color:#ae81ff">2</span>]
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [[1]]</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [[1]]$`_index`</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;shakespeare&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [[1]]$`_type`</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;act&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [[1]]$`_id`</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;2227&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [[1]]$`_version`</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] 1</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [[1]]$`_score`</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; NULL</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [[1]]$`_source`</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [[1]]$`_source`$line_id</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] 2228</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [[1]]$`_source`$play_name</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;Henry IV&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [[1]]$`_source`$speech_number</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] 81</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [[1]]$`_source`$line_number</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [[1]]$`_source`$speaker</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;FALSTAFF&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [[1]]$`_source`$text_entry</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;ACT IV&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [[1]]$sort</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [[1]]$sort[[1]]</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;act&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [[2]]</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [[2]]$`_index`</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;shakespeare&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [[2]]$`_type`</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;act&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [[2]]$`_id`</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;2633&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [[2]]$`_version`</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] 1</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [[2]]$`_score`</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; NULL</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [[2]]$`_source`</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [[2]]$`_source`$line_id</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] 2634</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [[2]]$`_source`$play_name</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;Henry IV&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [[2]]$`_source`$speech_number</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] 9</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [[2]]$`_source`$line_number</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [[2]]$`_source`$speaker</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;ARCHBISHOP OF YORK&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [[2]]$`_source`$text_entry</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;ACT V&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [[2]]$sort</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [[2]]$sort[[1]]</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;act&#34;</span>
</span></span></code></pre></div><h3 id="paging">Paging</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">Search</span>(index<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;shakespeare&#34;</span>, size<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>, from<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>, fields<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;text_entry&#39;</span>)<span style="color:#f92672">$</span>hits
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $total</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] 5000</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $max_score</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] 1</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $hits</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $hits[[1]]</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $hits[[1]]$`_index`</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;shakespeare&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $hits[[1]]$`_type`</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;line&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $hits[[1]]$`_id`</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;9&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $hits[[1]]$`_version`</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] 1</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $hits[[1]]$`_score`</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] 1</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $hits[[1]]$fields</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $hits[[1]]$fields$text_entry</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $hits[[1]]$fields$text_entry[[1]]</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;Nor more shall trenching war channel her fields,&#34;</span>
</span></span></code></pre></div><h3 id="queries">Queries</h3>
<p>Using the <code>q</code> parameter you can pass in a query, which gets passed in the URI of the query. This type of query is less powerful than the below query passed in the body of the request, using the <code>body</code> parameter.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">Search</span>(index<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;shakespeare&#34;</span>, type<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;act&#34;</span>, q<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;speaker:KING HENRY IV&#34;</span>)<span style="color:#f92672">$</span>hits<span style="color:#f92672">$</span>total
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] 9</span>
</span></span></code></pre></div><h3 id="query-dsl-searches---queries-sent-in-the-body-of-the-request">Query DSL searches - queries sent in the body of the request</h3>
<p>Pass in as an R list</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>aggs <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">list</span>(aggs <span style="color:#f92672">=</span> <span style="color:#a6e22e">list</span>(stats <span style="color:#f92672">=</span> <span style="color:#a6e22e">list</span>(terms <span style="color:#f92672">=</span> <span style="color:#a6e22e">list</span>(field <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;text_entry&#34;</span>))))
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">Search</span>(index<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;shakespeare&#34;</span>, body<span style="color:#f92672">=</span>aggs)<span style="color:#f92672">$</span>hits<span style="color:#f92672">$</span>hits[[1]]
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $`_index`</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;shakespeare&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $`_type`</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;line&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $`_id`</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;4&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $`_version`</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] 1</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $`_score`</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] 1</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $`_source`</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $`_source`$line_id</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] 5</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $`_source`$play_name</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;Henry IV&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $`_source`$speech_number</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] 1</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $`_source`$line_number</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;1.1.2&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $`_source`$speaker</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;KING HENRY IV&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $`_source`$text_entry</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;Find we a time for frighted peace to pant,&#34;</span>
</span></span></code></pre></div><p>Or pass in as json query with newlines, easy to read</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>aggs <span style="color:#f92672">&lt;-</span> <span style="color:#e6db74">&#39;{
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    &#34;aggs&#34;: {
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        &#34;stats&#34; : {
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">            &#34;terms&#34; : {
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">                &#34;field&#34; : &#34;text_entry&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">            }
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        }
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    }
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">}&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">Search</span>(index<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;shakespeare&#34;</span>, body<span style="color:#f92672">=</span>aggs)<span style="color:#f92672">$</span>hits<span style="color:#f92672">$</span>hits[[1]]
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $`_index`</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;shakespeare&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $`_type`</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;line&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $`_id`</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;4&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $`_version`</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] 1</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $`_score`</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] 1</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $`_source`</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $`_source`$line_id</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] 5</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $`_source`$play_name</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;Henry IV&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $`_source`$speech_number</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] 1</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $`_source`$line_number</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;1.1.2&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $`_source`$speaker</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;KING HENRY IV&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $`_source`$text_entry</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;Find we a time for frighted peace to pant,&#34;</span>
</span></span></code></pre></div><p>Or pass in collapsed json string</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>aggs <span style="color:#f92672">&lt;-</span> <span style="color:#e6db74">&#39;{&#34;aggs&#34;:{&#34;stats&#34;:{&#34;terms&#34;:{&#34;field&#34;:&#34;text_entry&#34;}}}}&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">Search</span>(index<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;shakespeare&#34;</span>, body<span style="color:#f92672">=</span>aggs)<span style="color:#f92672">$</span>hits<span style="color:#f92672">$</span>hits[[1]]
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $`_index`</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;shakespeare&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $`_type`</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;line&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $`_id`</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;4&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $`_version`</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] 1</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $`_score`</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] 1</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $`_source`</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $`_source`$line_id</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] 5</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $`_source`$play_name</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;Henry IV&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $`_source`$speech_number</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] 1</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $`_source`$line_number</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;1.1.2&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $`_source`$speaker</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;KING HENRY IV&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $`_source`$text_entry</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;Find we a time for frighted peace to pant,&#34;</span>
</span></span></code></pre></div><h3 id="fuzzy-query">Fuzzy query</h3>
<p>Fuzzy query on numerics</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>fuzzy <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">list</span>(query <span style="color:#f92672">=</span> <span style="color:#a6e22e">list</span>(fuzzy <span style="color:#f92672">=</span> <span style="color:#a6e22e">list</span>(speech_number <span style="color:#f92672">=</span> <span style="color:#ae81ff">7</span>)))
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">Search</span>(index<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;shakespeare&#34;</span>, body<span style="color:#f92672">=</span>fuzzy)<span style="color:#f92672">$</span>hits<span style="color:#f92672">$</span>total
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] 523</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>fuzzy <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">list</span>(query <span style="color:#f92672">=</span> <span style="color:#a6e22e">list</span>(fuzzy <span style="color:#f92672">=</span> <span style="color:#a6e22e">list</span>(speech_number <span style="color:#f92672">=</span> <span style="color:#a6e22e">list</span>(value <span style="color:#f92672">=</span> <span style="color:#ae81ff">7</span>, fuzziness <span style="color:#f92672">=</span> <span style="color:#ae81ff">4</span>))))
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">Search</span>(index<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;shakespeare&#34;</span>, body<span style="color:#f92672">=</span>fuzzy)<span style="color:#f92672">$</span>hits<span style="color:#f92672">$</span>total
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] 1499</span>
</span></span></code></pre></div><h3 id="range-query">Range query</h3>
<p>With numeric</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>body <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">list</span>(query<span style="color:#f92672">=</span><span style="color:#a6e22e">list</span>(range<span style="color:#f92672">=</span><span style="color:#a6e22e">list</span>(decimalLongitude<span style="color:#f92672">=</span><span style="color:#a6e22e">list</span>(gte<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>, lte<span style="color:#f92672">=</span><span style="color:#ae81ff">3</span>))))
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">Search</span>(<span style="color:#e6db74">&#39;gbif&#39;</span>, body<span style="color:#f92672">=</span>body)<span style="color:#f92672">$</span>hits<span style="color:#f92672">$</span>total
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] 24</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>body <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">list</span>(query<span style="color:#f92672">=</span><span style="color:#a6e22e">list</span>(range<span style="color:#f92672">=</span><span style="color:#a6e22e">list</span>(decimalLongitude<span style="color:#f92672">=</span><span style="color:#a6e22e">list</span>(gte<span style="color:#f92672">=</span><span style="color:#ae81ff">2.9</span>, lte<span style="color:#f92672">=</span><span style="color:#ae81ff">10</span>))))
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">Search</span>(<span style="color:#e6db74">&#39;gbif&#39;</span>, body<span style="color:#f92672">=</span>body)<span style="color:#f92672">$</span>hits<span style="color:#f92672">$</span>total
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] 166</span>
</span></span></code></pre></div><p>With dates</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>body <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">list</span>(query<span style="color:#f92672">=</span><span style="color:#a6e22e">list</span>(range<span style="color:#f92672">=</span><span style="color:#a6e22e">list</span>(eventDate<span style="color:#f92672">=</span><span style="color:#a6e22e">list</span>(gte<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;2012-01-01&#34;</span>, lte<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;now&#34;</span>))))
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">Search</span>(<span style="color:#e6db74">&#39;gbif&#39;</span>, body<span style="color:#f92672">=</span>body)<span style="color:#f92672">$</span>hits<span style="color:#f92672">$</span>total
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] 899</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>body <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">list</span>(query<span style="color:#f92672">=</span><span style="color:#a6e22e">list</span>(range<span style="color:#f92672">=</span><span style="color:#a6e22e">list</span>(eventDate<span style="color:#f92672">=</span><span style="color:#a6e22e">list</span>(gte<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;2014-01-01&#34;</span>, lte<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;now&#34;</span>))))
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">Search</span>(<span style="color:#e6db74">&#39;gbif&#39;</span>, body<span style="color:#f92672">=</span>body)<span style="color:#f92672">$</span>hits<span style="color:#f92672">$</span>total
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] 685</span>
</span></span></code></pre></div><h3 id="highlighting">Highlighting</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>body <span style="color:#f92672">&lt;-</span> <span style="color:#e6db74">&#39;{
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74"> &#34;query&#34;: {
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">   &#34;query_string&#34;: {
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">     &#34;query&#34; : &#34;cell&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">   }
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74"> },
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74"> &#34;highlight&#34;: {
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">   &#34;fields&#34;: {
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">     &#34;title&#34;: {&#34;number_of_fragments&#34;: 2}
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">   }
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74"> }
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">}&#39;</span>
</span></span><span style="display:flex;"><span>out <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">Search</span>(<span style="color:#e6db74">&#39;plos&#39;</span>, <span style="color:#e6db74">&#39;article&#39;</span>, body<span style="color:#f92672">=</span>body)
</span></span><span style="display:flex;"><span>out<span style="color:#f92672">$</span>hits<span style="color:#f92672">$</span>total
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] 57</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">sapply</span>(out<span style="color:#f92672">$</span>hits<span style="color:#f92672">$</span>hits, <span style="color:#66d9ef">function</span>(x) x<span style="color:#f92672">$</span>highlight<span style="color:#f92672">$</span>title[[1]])[8<span style="color:#f92672">:</span><span style="color:#ae81ff">10</span>]
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;c-FLIP Protects Eosinophils from TNF-α-Mediated &lt;em&gt;Cell&lt;/em&gt; Death In Vivo&#34;                          </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [2] &#34;DUSP1 Is a Novel Target for Enhancing Pancreatic Cancer &lt;em&gt;Cell&lt;/em&gt; Sensitivity to Gemcitabine&#34;     </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [3] &#34;Carbon Ion Radiation Inhibits Glioma and Endothelial &lt;em&gt;Cell&lt;/em&gt; Migration Induced by Secreted VEGF&#34;</span>
</span></span></code></pre></div><h3 id="scrolling-search---instead-of-paging">Scrolling search - instead of paging</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">Search</span>(<span style="color:#e6db74">&#39;shakespeare&#39;</span>, q<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;a*&#34;</span>)<span style="color:#f92672">$</span>hits<span style="color:#f92672">$</span>total
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] 2747</span>
</span></span><span style="display:flex;"><span>res <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">Search</span>(index <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;shakespeare&#39;</span>, q<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;a*&#34;</span>, scroll<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;1m&#34;</span>)
</span></span><span style="display:flex;"><span>res <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">Search</span>(index <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;shakespeare&#39;</span>, q<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;a*&#34;</span>, scroll<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;1m&#34;</span>, search_type <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;scan&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">length</span>(<span style="color:#a6e22e">scroll</span>(scroll_id <span style="color:#f92672">=</span> res<span style="color:#f92672">$</span>`_scroll_id`)<span style="color:#f92672">$</span>hits<span style="color:#f92672">$</span>hits)
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] 50</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>res <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">Search</span>(index <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;shakespeare&#39;</span>, q<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;a*&#34;</span>, scroll<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;5m&#34;</span>, search_type <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;scan&#34;</span>)
</span></span><span style="display:flex;"><span>out <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">list</span>()
</span></span><span style="display:flex;"><span>hits <span style="color:#f92672">&lt;-</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">while</span>(hits <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0</span>){
</span></span><span style="display:flex;"><span>  res <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">scroll</span>(scroll_id <span style="color:#f92672">=</span> res<span style="color:#f92672">$</span>`_scroll_id`)
</span></span><span style="display:flex;"><span>  hits <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">length</span>(res<span style="color:#f92672">$</span>hits<span style="color:#f92672">$</span>hits)
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span>(hits <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span>    out <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">c</span>(out, res<span style="color:#f92672">$</span>hits<span style="color:#f92672">$</span>hits)
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">length</span>(out)
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] 2747</span>
</span></span></code></pre></div><p>Woohoo! Collected all 2747 documents in very little time.</p>
<h2 id="the-cat-api">The cat API</h2>
<p>List cat methods</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">cat_</span>()
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; =^.^=</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; /_cat/allocation</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; /_cat/shards</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; /_cat/shards/{index}</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; /_cat/master</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; /_cat/nodes</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; /_cat/indices</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; /_cat/indices/{index}</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; /_cat/segments</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; /_cat/segments/{index}</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; /_cat/count</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; /_cat/count/{index}</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; /_cat/recovery</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; /_cat/recovery/{index}</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; /_cat/health</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; /_cat/pending_tasks</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; /_cat/aliases</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; /_cat/aliases/{alias}</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; /_cat/thread_pool</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; /_cat/plugins</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; /_cat/fielddata</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; /_cat/fielddata/{fields}</span>
</span></span></code></pre></div><p>Get aliases</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">cat_aliases</span>()
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; things plos - - - </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; stuff  plos - - -</span>
</span></span></code></pre></div><p>Get indices</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">cat_indices</span>()
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; yellow open plosmore     5 1  1000  0   3.5mb   3.5mb </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; yellow open leotheadfadf 5 1     0  0    575b    575b </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; red    open alsothat     3 2                          </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; yellow open gbif         5 1   899  0     1mb     1mb </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; yellow open gbifgeopoint 5 1     0  0    575b    575b </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; yellow open gbifnewgeo   5 1     2  0   5.8kb   5.8kb </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; yellow open plos         5 1  1202 39  14.2mb  14.2mb </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; yellow open leothedog    5 1     0  0    575b    575b </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; yellow open shakespeare  5 1  5000  0     1mb     1mb </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; yellow open gbifgeo      5 1   600  0 861.9kb 861.9kb </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; yellow open plosbigdata  5 1 20000  0  53.6mb  53.6mb </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; yellow open mapuris      5 1    31  0  34.4kb  34.4kb </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; yellow open leothelion   5 1     0  0    575b    575b</span>
</span></span></code></pre></div><p>Get nodes</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">cat_nodes</span>()
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; Scotts-MacBook-Pro.local 192.168.1.104 6 79 3.44 d * Hellfire</span>
</span></span></code></pre></div><h2 id="work-with-indices">Work with indices</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>out <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">index_get</span>(index<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;shakespeare&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">names</span>(out<span style="color:#f92672">$</span>shakespeare<span style="color:#f92672">$</span>mappings)
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;line&#34;  &#34;scene&#34; &#34;act&#34;</span>
</span></span></code></pre></div><p>Check for index existence</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">index_exists</span>(index<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;shakespeare&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] TRUE</span>
</span></span></code></pre></div><p>Delete an index</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">index_delete</span>(index<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;plos&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $acknowledged</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] TRUE</span>
</span></span></code></pre></div><p>Create an index</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">index_create</span>(index<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;twitter&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $acknowledged</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] TRUE</span>
</span></span></code></pre></div><h2 id="work-with-documents">Work with documents</h2>
<p>Get a document</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">docs_get</span>(index<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;shakespeare&#39;</span>, type<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;line&#39;</span>, id<span style="color:#f92672">=</span><span style="color:#ae81ff">10</span>)
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $`_index`</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;shakespeare&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $`_type`</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;line&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $`_id`</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;10&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $`_version`</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] 1</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $found</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] TRUE</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $`_source`</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $`_source`$line_id</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] 11</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $`_source`$play_name</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;Henry IV&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $`_source`$speech_number</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] 1</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $`_source`$line_number</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;1.1.8&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $`_source`$speaker</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;KING HENRY IV&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $`_source`$text_entry</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;Nor bruise her flowerets with the armed hoofs&#34;</span>
</span></span></code></pre></div><p>Get certain fields</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">docs_get</span>(index<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;shakespeare&#39;</span>, type<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;line&#39;</span>, id<span style="color:#f92672">=</span><span style="color:#ae81ff">10</span>, fields<span style="color:#f92672">=</span><span style="color:#a6e22e">c</span>(<span style="color:#e6db74">&#39;play_name&#39;</span>,<span style="color:#e6db74">&#39;speaker&#39;</span>))
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $`_index`</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;shakespeare&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $`_type`</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;line&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $`_id`</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;10&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $`_version`</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] 1</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $found</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] TRUE</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $fields</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $fields$play_name</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $fields$play_name[[1]]</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;Henry IV&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $fields$speaker</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $fields$speaker[[1]]</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;KING HENRY IV&#34;</span>
</span></span></code></pre></div><p>Test for existence of the document</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">docs_get</span>(index<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;plos&#39;</span>, type<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;article&#39;</span>, id<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>, exists<span style="color:#f92672">=</span><span style="color:#66d9ef">TRUE</span>)
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] FALSE</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">docs_get</span>(index<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;plos&#39;</span>, type<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;article&#39;</span>, id<span style="color:#f92672">=</span><span style="color:#ae81ff">123456</span>, exists<span style="color:#f92672">=</span><span style="color:#66d9ef">TRUE</span>)
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] FALSE</span>
</span></span></code></pre></div><h2 id="thats-it">Thats it</h2>
<p>Let us know if you have any feedback!</p>
]]></content:encoded>
    </item>
    <item>
      <title>Dealing with multi handle errors</title>
      <link>http://localhost:1313/2014/12/multi-handle/</link>
      <pubDate>Mon, 08 Dec 2014 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2014/12/multi-handle/</guid>
      <description>At rOpenSci we occasssionally hear from our users that they run into an error like:
Error in function (type, msg, asError = TRUE) : easy handled already used in multi handle This error occurs in the httr package that we use to do http requests to sources of data on the web. It happens when e.g., you make a lot of requests to a resource, then it gets interrupted somehow - then you make another call, and you get the error above.</description><content:encoded><![CDATA[ ]]>
               <![CDATA[<p>At rOpenSci we occasssionally hear from our users that they run into an error like:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>Error <span style="color:#66d9ef">in</span> <span style="color:#66d9ef">function</span> (type, msg, asError <span style="color:#f92672">=</span> <span style="color:#66d9ef">TRUE</span>)  <span style="color:#f92672">:</span> 
</span></span><span style="display:flex;"><span>  easy handled already used <span style="color:#66d9ef">in</span> multi handle
</span></span></code></pre></div><p>This error occurs in the <code>httr</code> package that we use to do http requests to sources of data on the web. It happens when e.g., you make a lot of requests to a resource, then it gets interrupted somehow - then you make another call, and you get the error above. Let&rsquo;s try it with the an version of <code>httr</code> (<code>v0.5</code>):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">library</span>(<span style="color:#e6db74">&#34;httr&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#75715e"># run, then esc to cause multi handle error</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">replicate</span>(<span style="color:#ae81ff">50</span>, <span style="color:#a6e22e">GET</span>(<span style="color:#e6db74">&#34;http://google.com/&#34;</span>))
</span></span><span style="display:flex;"><span><span style="color:#75715e"># then retry single call, which trows multi handle error</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">GET</span>(<span style="color:#e6db74">&#34;http://google.com/&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; Error in function (type, msg, asError = TRUE)  : </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   easy handled already used in multi handle</span>
</span></span></code></pre></div><p>There are any number of reasons why your session may get interrupted, including an internet outage, the web service you are requesesting data from times out, etc.  There hasn&rsquo;t been a straight-forward way to handle this, until recently.</p>
<p>In <code>httr</code> version <code>0.6</code>, there are two new functions <code>handle_find()</code> and <code>handle_reset()</code> to help deal with this error.</p>
<p>First, install newest httr from Github</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">install.packages</span>(<span style="color:#e6db74">&#34;devtools&#34;</span>)
</span></span><span style="display:flex;"><span>devtools<span style="color:#f92672">::</span><span style="color:#a6e22e">install_github</span>(<span style="color:#e6db74">&#34;hadley/httr&#34;</span>)
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">library</span>(<span style="color:#e6db74">&#34;httr&#34;</span>)
</span></span></code></pre></div><p>Make a bunch of requests to google, interrupting part way through</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">replicate</span>(<span style="color:#ae81ff">50</span>, <span style="color:#a6e22e">HEAD</span>(<span style="color:#e6db74">&#34;http://google.com/&#34;</span>))
</span></span></code></pre></div><p>Then retry single call, which trows multi handle error</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">HEAD</span>(<span style="color:#e6db74">&#34;http://google.com/&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; Error in function (type, msg, asError = TRUE)  : </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   easy handled already used in multi handle</span>
</span></span></code></pre></div><p>Find handle</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">handle_find</span>(<span style="color:#e6db74">&#34;http://google.com/&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; Host: http://google.com/ &lt;0x10f3d1600&gt;</span>
</span></span></code></pre></div><p>Reset handle</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">handle_reset</span>(<span style="color:#e6db74">&#34;http://google.com/&#34;</span>)
</span></span></code></pre></div><p>Try call again, this time it should work</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">HEAD</span>(<span style="color:#e6db74">&#34;http://google.com/&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; Response [http://www.google.com/]</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   Date: 2014-12-08 13:37</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   Status: 200</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   Content-Type: text/html; charset=ISO-8859-1</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; &lt;EMPTY BODY&gt;</span>
</span></span></code></pre></div><h2 id="usage-in-ropensci-packages">Usage in ropensci packages</h2>
<p>We have more work to do yet to integrate this into our packages. It&rsquo;s great you can reset a handle as above, but to reset the handle you need to search for the URL used in the request, which our users would have to dig into the code for the function they are using. That is easy-ish to do, but perhaps not everyone knows they can get to the code easily.  So, we may try seting a parameter in functions that would let reset the handle to clear this error.</p>
<h2 id="note">Note</h2>
<p>Note that Hadley is planning on eliminating <code>RCurl</code> dependency (<a href="https://github.com/hadley/httr/issues/172)">https://github.com/hadley/httr/issues/172)</a>, so there may be a different solution in the future.</p>
]]></content:encoded>
    </item>
    <item>
      <title>http codes</title>
      <link>http://localhost:1313/2014/12/http-codes/</link>
      <pubDate>Tue, 02 Dec 2014 16:01:50 +0000</pubDate>
      <guid>http://localhost:1313/2014/12/http-codes/</guid>
      <description>Recently noticed a little Python library called httpcode that does a simple thing: gives information on http codes in the CLI. I thought this could maybe potentially be useful for R. So I made an R version.
Installation devtools::install_github(&amp;#34;sckott/httpcode&amp;#34;) library(&amp;#34;httpcode&amp;#34;) Search by http code http_code(100) #&amp;gt; &amp;lt;Status code: 100&amp;gt; #&amp;gt; Message: Continue #&amp;gt; Explanation: Request received, please continue http_code(400) #&amp;gt; &amp;lt;Status code: 400&amp;gt; #&amp;gt; Message: Bad Request #&amp;gt; Explanation: Bad request syntax or unsupported method http_code(503) #&amp;gt; &amp;lt;Status code: 503&amp;gt; #&amp;gt; Message: Service Unavailable #&amp;gt; Explanation: The server cannot process the request due to a high load http_code(999) #&amp;gt; Error: No description found for code: 999 Fuzzy code search http_code(&amp;#39;1xx&amp;#39;) #&amp;gt; [[1]] #&amp;gt; &amp;lt;Status code: 100&amp;gt; #&amp;gt; Message: Continue #&amp;gt; Explanation: Request received, please continue #&amp;gt; #&amp;gt; [[2]] #&amp;gt; &amp;lt;Status code: 101&amp;gt; #&amp;gt; Message: Switching Protocols #&amp;gt; Explanation: Switching to new protocol; obey Upgrade header #&amp;gt; #&amp;gt; [[3]] #&amp;gt; &amp;lt;Status code: 102&amp;gt; #&amp;gt; Message: Processing #&amp;gt; Explanation: WebDAV; RFC 2518 http_code(&amp;#39;3xx&amp;#39;) #&amp;gt; [[1]] #&amp;gt; &amp;lt;Status code: 300&amp;gt; #&amp;gt; Message: Multiple Choices #&amp;gt; Explanation: Object has several resources -- see URI list #&amp;gt; #&amp;gt; [[2]] #&amp;gt; &amp;lt;Status code: 301&amp;gt; #&amp;gt; Message: Moved Permanently #&amp;gt; Explanation: Object moved permanently -- see URI list #&amp;gt; #&amp;gt; [[3]] #&amp;gt; &amp;lt;Status code: 302&amp;gt; #&amp;gt; Message: Found #&amp;gt; Explanation: Object moved temporarily -- see URI list #&amp;gt; #&amp;gt; [[4]] #&amp;gt; &amp;lt;Status code: 303&amp;gt; #&amp;gt; Message: See Other #&amp;gt; Explanation: Object moved -- see Method and URL list #&amp;gt; #&amp;gt; [[5]] #&amp;gt; &amp;lt;Status code: 304&amp;gt; #&amp;gt; Message: Not Modified #&amp;gt; Explanation: Document has not changed since given time #&amp;gt; #&amp;gt; [[6]] #&amp;gt; &amp;lt;Status code: 305&amp;gt; #&amp;gt; Message: Use Proxy #&amp;gt; Explanation: You must use proxy specified in Location to access this resource.</description><content:encoded><![CDATA[ ]]>
               <![CDATA[<p>Recently noticed a little Python library called <a href="https://github.com/rspivak/httpcode">httpcode</a> that does a simple thing: gives information on http codes in the CLI. I thought this could maybe potentially be useful for R. So I made an R version.</p>
<h2 id="installation">Installation</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>devtools<span style="color:#f92672">::</span><span style="color:#a6e22e">install_github</span>(<span style="color:#e6db74">&#34;sckott/httpcode&#34;</span>)
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">library</span>(<span style="color:#e6db74">&#34;httpcode&#34;</span>)
</span></span></code></pre></div><h2 id="search-by-http-code">Search by http code</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">http_code</span>(<span style="color:#ae81ff">100</span>)
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; &lt;Status code: 100&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   Message: Continue</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   Explanation: Request received, please continue</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">http_code</span>(<span style="color:#ae81ff">400</span>)
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; &lt;Status code: 400&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   Message: Bad Request</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   Explanation: Bad request syntax or unsupported method</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">http_code</span>(<span style="color:#ae81ff">503</span>)
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; &lt;Status code: 503&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   Message: Service Unavailable</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   Explanation: The server cannot process the request due to a high load</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">http_code</span>(<span style="color:#ae81ff">999</span>)
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; Error: No description found for code: 999</span>
</span></span></code></pre></div><h2 id="fuzzy-code-search">Fuzzy code search</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">http_code</span>(<span style="color:#e6db74">&#39;1xx&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [[1]]</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; &lt;Status code: 100&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   Message: Continue</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   Explanation: Request received, please continue</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [[2]]</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; &lt;Status code: 101&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   Message: Switching Protocols</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   Explanation: Switching to new protocol; obey Upgrade header</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [[3]]</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; &lt;Status code: 102&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   Message: Processing</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   Explanation: WebDAV; RFC 2518</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">http_code</span>(<span style="color:#e6db74">&#39;3xx&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [[1]]</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; &lt;Status code: 300&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   Message: Multiple Choices</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   Explanation: Object has several resources -- see URI list</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [[2]]</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; &lt;Status code: 301&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   Message: Moved Permanently</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   Explanation: Object moved permanently -- see URI list</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [[3]]</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; &lt;Status code: 302&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   Message: Found</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   Explanation: Object moved temporarily -- see URI list</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [[4]]</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; &lt;Status code: 303&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   Message: See Other</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   Explanation: Object moved -- see Method and URL list</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [[5]]</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; &lt;Status code: 304&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   Message: Not Modified</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   Explanation: Document has not changed since given time</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [[6]]</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; &lt;Status code: 305&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   Message: Use Proxy</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   Explanation: You must use proxy specified in Location to access this resource.</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [[7]]</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; &lt;Status code: 306&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   Message: Switch Proxy</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   Explanation: Subsequent requests should use the specified proxy</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [[8]]</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; &lt;Status code: 307&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   Message: Temporary Redirect</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   Explanation: Object moved temporarily -- see URI list</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [[9]]</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; &lt;Status code: 308&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   Message: Permanent Redirect</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   Explanation: Object moved permanently</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">http_code</span>(<span style="color:#e6db74">&#39;30[12]&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [[1]]</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; &lt;Status code: 301&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   Message: Moved Permanently</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   Explanation: Object moved permanently -- see URI list</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [[2]]</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; &lt;Status code: 302&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   Message: Found</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   Explanation: Object moved temporarily -- see URI list</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">http_code</span>(<span style="color:#e6db74">&#39;30[34]&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [[1]]</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; &lt;Status code: 303&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   Message: See Other</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   Explanation: Object moved -- see Method and URL list</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [[2]]</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; &lt;Status code: 304&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   Message: Not Modified</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   Explanation: Document has not changed since given time</span>
</span></span></code></pre></div><h2 id="search-by-text-message">Search by text message</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">http_search</span>(<span style="color:#e6db74">&#34;request&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [[1]]</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; &lt;Status code: 100&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   Message: Continue</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   Explanation: Request received, please continue</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [[2]]</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; &lt;Status code: 200&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   Message: OK</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   Explanation: Request fulfilled, document follows</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [[3]]</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; &lt;Status code: 202&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   Message: Accepted</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   Explanation: Request accepted, processing continues off-line</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [[4]]</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; &lt;Status code: 203&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   Message: Non-Authoritative Information</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   Explanation: Request fulfilled from cache</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [[5]]</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; &lt;Status code: 204&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   Message: No Content</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   Explanation: Request fulfilled, nothing follows</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [[6]]</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; &lt;Status code: 306&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   Message: Switch Proxy</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   Explanation: Subsequent requests should use the specified proxy</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [[7]]</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; &lt;Status code: 400&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   Message: Bad Request</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   Explanation: Bad request syntax or unsupported method</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [[8]]</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; &lt;Status code: 403&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   Message: Forbidden</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   Explanation: Request forbidden -- authorization will not help</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [[9]]</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; &lt;Status code: 408&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   Message: Request Timeout</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   Explanation: Request timed out; try again later.</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [[10]]</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; &lt;Status code: 409&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   Message: Conflict</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   Explanation: Request conflict.</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [[11]]</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; &lt;Status code: 413&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   Message: Request Entity Too Large</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   Explanation: Entity is too large.</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [[12]]</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; &lt;Status code: 414&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   Message: Request-URI Too Long</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   Explanation: URI is too long.</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [[13]]</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; &lt;Status code: 416&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   Message: Requested Range Not Satisfiable</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   Explanation: Cannot satisfy request range.</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [[14]]</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; &lt;Status code: 503&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   Message: Service Unavailable</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   Explanation: The server cannot process the request due to a high load</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [[15]]</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; &lt;Status code: 505&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   Message: HTTP Version Not Supported</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   Explanation: Cannot fulfill request.</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">http_search</span>(<span style="color:#e6db74">&#34;forbidden&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [[1]]</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; &lt;Status code: 403&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   Message: Forbidden</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   Explanation: Request forbidden -- authorization will not help</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">http_search</span>(<span style="color:#e6db74">&#34;too&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [[1]]</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; &lt;Status code: 413&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   Message: Request Entity Too Large</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   Explanation: Entity is too large.</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [[2]]</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; &lt;Status code: 414&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   Message: Request-URI Too Long</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   Explanation: URI is too long.</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">http_search</span>(<span style="color:#e6db74">&#34;birds&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; Error: No status code found for search: : birds</span>
</span></span></code></pre></div>]]></content:encoded>
    </item>
  </channel>
</rss>
