<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>R on Recology</title>
    <link>http://localhost:1313/tags/r/</link>
    <description>Recent content in R on Recology</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 08 Mar 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/r/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Shiny file inputs</title>
      <link>http://localhost:1313/2024/03/shiny-file-inputs/</link>
      <pubDate>Fri, 08 Mar 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2024/03/shiny-file-inputs/</guid>
      <description>I wrote the other day about overcoming an issue with Shiny.
Another issue I ran into concurrently was about file inputs. The issue was that file inputs (i.e., shiny::fileInput) was difficult to clear. That is, after a user uploads a file, it was easy to get some of the various parts cleared/cleaned up, but not others:
(Not Easy) The UI components of fileInput (the text of the file name, the loading display) (Not Easy) The data behind the fileInput handler (Easy) Displaying some feedback in the UI after handling file input Load libraries</description>
    </item>
    <item>
      <title>Shiny button weirdness</title>
      <link>http://localhost:1313/2024/03/shiny-events/</link>
      <pubDate>Mon, 04 Mar 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2024/03/shiny-events/</guid>
      <description>I&amp;rsquo;ve been working on Shiny app at work for the past few months. One of the many frustrating things about Shiny lately has been around buttons. Well, it wasn&amp;rsquo;t really about buttons, but that&amp;rsquo;s where it started.
Load libraries
library(shiny) library(bslib) library(crul) Helper function, returned a random UUID from an httpbin server
httpbin_uuid &amp;lt;- function(...) { con &amp;lt;- crul::HttpClient$new(&amp;#34;https://hb.opencpu.org&amp;#34;) res &amp;lt;- con$get(&amp;#34;uuid&amp;#34;) jsonlite::fromJSON(res$parse(&amp;#34;UTF-8&amp;#34;))$uuid } A bslib ui component
ui &amp;lt;- page_sidebar( title = &amp;#34;My dashboard&amp;#34;, sidebar = list( actionButton(&amp;#34;submit&amp;#34;, &amp;#34;Submit&amp;#34;), actionButton(&amp;#34;reset&amp;#34;, &amp;#34;Reset&amp;#34;) ), textInput(inputId = &amp;#34;name&amp;#34;, &amp;#34;Your name&amp;#34;), textOutput(&amp;#34;uuid&amp;#34;) ) Here&amp;rsquo;s the server part that was giving me trouble.</description>
    </item>
    <item>
      <title>Working at Fred Hutchinson Cancer Center</title>
      <link>http://localhost:1313/2023/10/fred-hutch/</link>
      <pubDate>Fri, 06 Oct 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2023/10/fred-hutch/</guid>
      <description>Soooo, my last job at Deck was amazing. I loved it. I was doing data engineer stuff there, mostly maintaining infrastructure for data pipelines. Everyone was great and the mission was amazing: helping Democrats win. Yet the company was shut down about a month ago, sending me on another job search, the 3rd since early/mid 2021.
I&amp;rsquo;m super thrilled to have landed a job (Software and Reproducibility Software Developer) at the Fred Hutch Data Science Lab (DASL), headed up by Jeff Leek, working with Sean Kross, Amy Paguirigan, and Monica Gerber, among many other amazing folks.</description>
    </item>
    <item>
      <title>CRAN Checks API and Badges</title>
      <link>http://localhost:1313/2022/06/cran-checks-badges/</link>
      <pubDate>Thu, 02 Jun 2022 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2022/06/cran-checks-badges/</guid>
      <description>TL;DR In 6 months (end of November 2022) the CRAN Checks API https://cranchecks.info/ will be gone You can still get badges at https://badges.cranchecks.info You can use the new badges like: [![cran checks](https://badges.cranchecks.info/worst/dplyr.svg)](https://cran.r-project.org/web/checks/check_results_dplyr.html) Find more details at https://github.com/sckott/cchecksbadges
Sunsetting the CRAN Checks API If you contribute an R package to CRAN, you may use badges from the CRAN checks API at https://cranchecks.info/. The CRAN Checks API has been operating since about September 2017 (I think).</description>
    </item>
    <item>
      <title>Mocking HTTP redirects</title>
      <link>http://localhost:1313/2021/11/mocking-redirects/</link>
      <pubDate>Sat, 27 Nov 2021 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2021/11/mocking-redirects/</guid>
      <description>You&amp;rsquo;ve experienced an HTTP redirect (or URL redirect, or URL forwarding) even if you haven&amp;rsquo;t noticed. We all use browsers (I assume, since you are reading this), either on a phone or laptop/desktop computer. Browsers don&amp;rsquo;t show all the HTTP requests going on in the background, some of which are redirects. Redirection is used for various reasons, including to prevent broken links when web pages are moved, for privacy protection, to allow multiple domains to refer to a single web page, and more.</description>
    </item>
    <item>
      <title>API client design: how to deal with lots of parameters?</title>
      <link>http://localhost:1313/2020/12/api-client-params/</link>
      <pubDate>Mon, 21 Dec 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2020/12/api-client-params/</guid>
      <description>In February this year I wroute about how many parameters functions should have, looking at some other languages, with a detailed look at R. On a related topic &amp;hellip;
As I work on many R packages that are API clients for various web services, I began wondering: What is the best way to deal with API routes that have a lot of parameters?
The general programming wisdom I&amp;rsquo;ve seen is that a function should have no more than 3-4 parameters (e.</description>
    </item>
    <item>
      <title>stories behind archived packages</title>
      <link>http://localhost:1313/2020/09/archived-pkgs/</link>
      <pubDate>Thu, 10 Sep 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2020/09/archived-pkgs/</guid>
      <description>Update on 2021-02-09: I&amp;rsquo;ve archived 8 more packages. Post below updated
Code is often arranged in packages for any given language. Packages are often cataloged in a package registry of some kind: NPM for node, crates.io for Rust, etc. For R, that registry is either CRAN or Bioconductor (for the most part).
CRAN has the concept of an archived package. That is, the namespace for a package (foo) is still in the registry (and can not be used again), but the package is archived - no longer gets updated and checks I think are no longer performed.</description>
    </item>
    <item>
      <title>taxizedb: an update</title>
      <link>http://localhost:1313/2020/08/taxizedb-update/</link>
      <pubDate>Mon, 17 Aug 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2020/08/taxizedb-update/</guid>
      <description>taxizedb arose from pain in using taxize when dealing with large amounts of data in a single request or doing a lot of requests of any data size. taxize works with remote data sources on the web, so there&amp;rsquo;s a number of issues that can slow the response down: internet speed, server response speed (was a response already cached or not; or do they even use caching), etc.
The idea with taxizedb was to allow users to do the same things as taxize allows, but much faster by accessing the entire database for a data source on their own computer.</description>
    </item>
    <item>
      <title>how many parameters?</title>
      <link>http://localhost:1313/2020/02/how-many-parameters/</link>
      <pubDate>Mon, 10 Feb 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2020/02/how-many-parameters/</guid>
      <description>Functions can have no parameters, or have a lot of parameters, or somewhere in between. How many parameters is too many? Does it even matter how many parameters there are in a function?
There&amp;rsquo;s AFAIK no &amp;ldquo;correct&amp;rdquo; answer to this question. And surely the &amp;ldquo;best practice&amp;rdquo; varies among programming languages. What do folks say about this and what should we be doing in R?
From other languages Many of the blog posts and SO posts on this topic cite the book Clean Code by &amp;ldquo;Uncle Bob&amp;rdquo;.</description>
    </item>
    <item>
      <title>finding truffles</title>
      <link>http://localhost:1313/2020/01/test-truffles/</link>
      <pubDate>Thu, 30 Jan 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2020/01/test-truffles/</guid>
      <description>The bad thing about making software is that you can sometimes make it easier for someone to shoot themselves in the foot. The good thing about software is that you can make more software to help them not shoot a foot off.
The R package vcr, an R port of the Ruby library of the same name, records and plays back HTTP requests. Some HTTP requests can have secrets (e.g., passwords, API keys, etc.</description>
    </item>
  </channel>
</rss>
