<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>R on Recology</title>
    <link>http://localhost:1313/tags/r/</link>
    <description>Recent content in R on Recology</description>
    <generator>Hugo -- 0.143.1</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 04 Feb 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/r/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Keeping internal function examples alive</title>
      <link>http://localhost:1313/2025/02/r-examples-internal/</link>
      <pubDate>Tue, 04 Feb 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2025/02/r-examples-internal/</guid>
      <description>&lt;p&gt;While reviewing an R package at work I realized I wasn&amp;rsquo;t totally sure what advice to give about examples for internal functions in a package.&lt;/p&gt;
&lt;p&gt;That is, there&amp;rsquo;s an R package. The package has some exported functions, and some internal functions that are not exported.&lt;/p&gt;
&lt;p&gt;Internal functions are not loaded when the package loads so the normal flow of running examples under &lt;code&gt;roxygen2&lt;/code&gt; tag &lt;code&gt;@examples&lt;/code&gt; doesn&amp;rsquo;t work (assuming you don&amp;rsquo;t prevent it from running any of various ways).&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>While reviewing an R package at work I realized I wasn&rsquo;t totally sure what advice to give about examples for internal functions in a package.</p>
<p>That is, there&rsquo;s an R package. The package has some exported functions, and some internal functions that are not exported.</p>
<p>Internal functions are not loaded when the package loads so the normal flow of running examples under <code>roxygen2</code> tag <code>@examples</code> doesn&rsquo;t work (assuming you don&rsquo;t prevent it from running any of various ways).</p>
<p>So I asked about this on Mastodon:</p>

<blockquote class="mastodon-embed" data-embed-url="https://fosstodon.org/@sckottie/113913038108676372/embed" style="background: #FCF8FF; border-radius: 8px; border: 1px solid #C9C4DA; margin: 0; max-width: 540px; min-width: 270px; overflow: hidden; padding: 0;"> <a href="https://fosstodon.org/@sckottie/113913038108676372" target="_blank" style="align-items: center; color: #1C1A25; display: flex; flex-direction: column; font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Oxygen, Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', Roboto, sans-serif; font-size: 14px; justify-content: center; letter-spacing: 0.25px; line-height: 20px; padding: 24px; text-decoration: none;"> <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="32" height="32" viewBox="0 0 79 75"><path d="M74.7135 16.6043C73.6199 8.54587 66.5351 2.19527 58.1366 0.964691C56.7196 0.756754 51.351 0 38.9148 0H38.822C26.3824 0 23.7135 0.756754 22.2966 0.964691C14.1319 2.16118 6.67571 7.86752 4.86669 16.0214C3.99657 20.0369 3.90371 24.4888 4.06535 28.5726C4.29578 34.4289 4.34049 40.275 4.877 46.1075C5.24791 49.9817 5.89495 53.8251 6.81328 57.6088C8.53288 64.5968 15.4938 70.4122 22.3138 72.7848C29.6155 75.259 37.468 75.6697 44.9919 73.971C45.8196 73.7801 46.6381 73.5586 47.4475 73.3063C49.2737 72.7302 51.4164 72.086 52.9915 70.9542C53.0131 70.9384 53.0308 70.9178 53.0433 70.8942C53.0558 70.8706 53.0628 70.8445 53.0637 70.8179V65.1661C53.0634 65.1412 53.0574 65.1167 53.0462 65.0944C53.035 65.0721 53.0189 65.0525 52.9992 65.0371C52.9794 65.0218 52.9564 65.011 52.9318 65.0056C52.9073 65.0002 52.8819 65.0003 52.8574 65.0059C48.0369 66.1472 43.0971 66.7193 38.141 66.7103C29.6118 66.7103 27.3178 62.6981 26.6609 61.0278C26.1329 59.5842 25.7976 58.0784 25.6636 56.5486C25.6622 56.5229 25.667 56.4973 25.6775 56.4738C25.688 56.4502 25.7039 56.4295 25.724 56.4132C25.7441 56.397 25.7678 56.3856 25.7931 56.3801C25.8185 56.3746 25.8448 56.3751 25.8699 56.3816C30.6101 57.5151 35.4693 58.0873 40.3455 58.086C41.5183 58.086 42.6876 58.086 43.8604 58.0553C48.7647 57.919 53.9339 57.6701 58.7591 56.7361C58.8794 56.7123 58.9998 56.6918 59.103 56.6611C66.7139 55.2124 73.9569 50.665 74.6929 39.1501C74.7204 38.6967 74.7892 34.4016 74.7892 33.9312C74.7926 32.3325 75.3085 22.5901 74.7135 16.6043ZM62.9996 45.3371H54.9966V25.9069C54.9966 21.8163 53.277 19.7302 49.7793 19.7302C45.9343 19.7302 44.0083 22.1981 44.0083 27.0727V37.7082H36.0534V27.0727C36.0534 22.1981 34.124 19.7302 30.279 19.7302C26.8019 19.7302 25.0651 21.8163 25.0617 25.9069V45.3371H17.0656V25.3172C17.0656 21.2266 18.1191 17.9769 20.2262 15.568C22.3998 13.1648 25.2509 11.9308 28.7898 11.9308C32.8859 11.9308 35.9812 13.492 38.0447 16.6111L40.036 19.9245L42.0308 16.6111C44.0943 13.492 47.1896 11.9308 51.2788 11.9308C54.8143 11.9308 57.6654 13.1648 59.8459 15.568C61.9529 17.9746 63.0065 21.2243 63.0065 25.3172L62.9996 45.3371Z" fill="currentColor"/></svg> <div style="color: #787588; margin-top: 16px;">Post by @sckottie@fosstodon.org</div> <div style="font-weight: 500;">View on Mastodon</div> </a> </blockquote> <script data-allowed-prefixes="https://fosstodon.org/" async src="https://fosstodon.org/embed.js"></script>

</br>
<h2 id="ideas-from-the-thread-included-">Ideas from the thread included &hellip;</h2>
<h3 id="package-devtag">Package devtag</h3>
<p>A number of friends (<a href="https://mastodon.social/@maelle">Maëlle</a> and <a href="https://mastodon.social/@grusonh">Hugo</a>) suggested using package <a href="https://github.com/moodymudskipper/devtag">devtag</a> - which creates documentation for an internal function. Maëlle says they use it in <a href="https://github.com/igraph/rigraph">igraph</a>. I poked around with it and could not sort out what it does different from existing <code>roxygen2</code> tags TBH, so am not pursuing this route.</p>
<h3 id="internal-and-asnamespace">Internal and asNamespace</h3>
<p>What my friend Zhian Kamvar does is to use <code>@keywords internal</code> and then use <code>pkg &lt;- asNamespace(&quot;package name&quot;)</code> to get a proxy for <code>:::</code> to avoid cran warnings. I&rsquo;ve used this pattern in <a href="https://docs.ropensci.org/tinkr/reference/isolate_nodes.html#ref-examples">tinkr</a></p>
<h2 id="other-ideas">Other ideas</h2>
<h3 id="export-and-internal">Export and internal</h3>
<p>Poking around at some of my own packages and those of the Posit folks, it seems like this pattern is pretty common for internal functions: use <code>@export</code> and <code>@keywords internal</code> so the function is found in the package namespace but it&rsquo;s hidden from topic indexes. This allows for any examples for those functions to run - which means that we can be sure examples aren&rsquo;t out of sync with the code - assuming the examples are actually run.</p>
<h3 id="tests-instead-of-examples">Tests instead of examples?</h3>
<p>Another possible route could be to instead use tests for internal functions instead of examples to avoid this problem. However, this seems like not a great idea since the sort of best practice I&rsquo;ve heard about with internal functions is that they are free to change because they&rsquo;re not user facing, and anyway testing of the exported functions that use them will cover the internal functions too?</p>
<h2 id="other-thoughts">Other thoughts</h2>
<p>Of course some internal functions are not documented at all and thus this whole issue for those functions is void.</p>
<p>Thinking on the different types of functions suggests a number of different distinct-ish types of functions with respect to visibility:</p>
<ul>
<li><strong>exported</strong> (user facing, should have great docs; shows up in pkgdown site)</li>
<li><strong>exported internal with docs</strong> (using <code>@export</code> and <code>@keywords internal</code>; exists in pkgdown site but not in ref list)</li>
<li><strong>internal with docs</strong> (using <code>@keywords internal</code>; exists in pkgdown site but not in ref list)</li>
<li><strong>plain ol internal</strong> (no <code>roxygen2</code> comments; not in pkgdown site at all)</li>
</ul>
<h2 id="what-to-do">What to do?</h2>
<p>I think the advice I&rsquo;ll give for now is to use a combination of <code>@export</code> and <code>@keywords internal</code> when the use case is a function that is not meant to be user facing but would benefit from making sure its examples are actually working rather than rotting on the vine.</p>
]]></content:encoded>
    </item>
    <item>
      <title>cowsay v1</title>
      <link>http://localhost:1313/2024/12/cowsay-v1/</link>
      <pubDate>Mon, 09 Dec 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2024/12/cowsay-v1/</guid>
      <description>&lt;p&gt;cowsay is a command line program written in Perl. The original version had a final release in 2016 (that&amp;rsquo;s the version of many installed cowsay programs) and there&amp;rsquo;s a number of forks of that release in Perl. There are also many many versions of cowsay in other programming languages, like &lt;a href=&#34;https://github.com/sckott/cowsay/&#34;&gt;the one I maintain&lt;/a&gt; written in R, unimaginatively called cowsay.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://localhost:1313/2014/02/cowsay/&#34;&gt;I wrote about cowsay here back in 2014&lt;/a&gt;. I didn&amp;rsquo;t think this would ever be 300+ stars popular, but here we are. Given that people seem to actually use it - or at least star it - seems worth putting some more time into it.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>cowsay is a command line program written in Perl. The original version had a final release in 2016 (that&rsquo;s the version of many installed cowsay programs) and there&rsquo;s a number of forks of that release in Perl. There are also many many versions of cowsay in other programming languages, like <a href="https://github.com/sckott/cowsay/">the one I maintain</a> written in R, unimaginatively called cowsay.</p>
<p><a href="/2014/02/cowsay/">I wrote about cowsay here back in 2014</a>. I didn&rsquo;t think this would ever be 300+ stars popular, but here we are. Given that people seem to actually use it - or at least star it - seems worth putting some more time into it.</p>
<h2 id="return-to-the-source">Return to the source</h2>
<p>I just released v1 of cowsay. At a high level, the major thing in v1 is bringing it closer to the original cowsay. That doesn&rsquo;t mean in how it&rsquo;s used - you still use it within R, and pass arguments to a function rather than flags to a command line program. Instead, the output is as close as I could get to the original cowsay. This goal was spurred on by <a href="https://github.com/sckott/cowsay/issues/67">an issue</a> - cough, sneeze - from 6 years ago.</p>
<p>The output of v1 is much closer to the original, for example:</p>
<p>in R cowsay before v1:</p>
<pre tabindex="0"><code> -----
 hello world
 ------
    \   ^__^
     \  (oo)\ ________
        (__)\         )\ /\
             ||------w|
             ||      ||
</code></pre><p>Now in v1:</p>
<pre tabindex="0"><code> ______________
&lt; Hello world! &gt;
 --------------
      \
       \

        ^__^
        (oo)\ ________
        (__)\         )\ /\
             ||------w|
             ||      ||
</code></pre><p>in Perl cli cowsay</p>
<pre tabindex="0"><code> ______________
&lt; Hello world! &gt;
 --------------
        \   ^__^
         \  (oo)\_______
            (__)\       )\/\
                ||----w |
                ||     ||
</code></pre><p>By much closer I mean:</p>
<ol>
<li>Instead of just a top and bottom line there&rsquo;s actually sides now.</li>
<li>Fixed bubble top in GitHub main at least (see below note)</li>
<li>The bubble expands with the text to contain it all within the bubble, for example:</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">library</span>(cowsay)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">library</span>(fortunes)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">say</span>(<span style="color:#e6db74">&#34;fortune&#34;</span>)
</span></span></code></pre></div><pre tabindex="0"><code> ________________________________________________________
/ The problem, as always, is what the heck does one mean \
| by &#39;outlier&#39; in these contexts. Seems to be like       |
| pornography -- &#34;I know it when I see it.&#34;  Berton      |
| Gunter quoting Justice Potter Stewart in a discussion  |
\ about tests for outliers R-help April 2005             /
 --------------------------------------------------------
      \
       \

        ^__^
        (oo)\ ________
        (__)\         )\ /\
             ||------w|
             ||      ||
</code></pre><p>A few notes:</p>
<ol>
<li>I realized in drafting this post that original cowsay uses underscores for the top of the bubble and hyphens for the bottom of the bubble whereas R cowsay was using hyphens for top and bottom. I just pushed a fix for this, so to get underscores for the bubble top install from GitHub (<code>pak::pak(&quot;sckott/cowsay&quot;)</code>).</li>
<li>With the refactoring of bubbles in v1, the &ldquo;tail&rdquo; is now above the animals b/c it was just easier that way. In a future version we&rsquo;ll try to fix that to have the tail coming down farther like original cowsay.</li>
</ol>
<p>The other thing that brings R cowsay closer to og cowsay is having <code>think()</code>, which I hadn&rsquo;t realized was a thing until finding the page in the Wayback Machine for the original cowsay. For example:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">library</span>(cowsay)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">library</span>(fortunes)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">think</span>(<span style="color:#e6db74">&#34;fortune&#34;</span>)
</span></span></code></pre></div><pre tabindex="0"><code> ________________________________________________________
( Dear Uwe, thank you very much for your unvaluable time )
( and effort.  Javier Cano thanking Uwe Ligges for       )
( solving a coding problem R-help July 2009              )
 --------------------------------------------------------
      o
       o

        ^__^
        (oo)\ ________
        (__)\         )\ /\
             ||------w|
             ||      ||
</code></pre><p><code>think()</code> differs from <code>say()</code> in having circles for the tail to the bubble and parens for the bubble sides rather than slashes.</p>
<h2 id="hand-rolled">Hand-rolled</h2>
<p>With v1 you can now hand roll cowsay output, for example:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">library</span>(cowsay)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">library</span>(fortunes)
</span></span><span style="display:flex;"><span>quote <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">as.character</span>(<span style="color:#a6e22e">fortune</span>())
</span></span><span style="display:flex;"><span>chicken <span style="color:#f92672">&lt;-</span> animals[[<span style="color:#e6db74">&#34;chicken&#34;</span>]]
</span></span><span style="display:flex;"><span>z <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">paste</span>(
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">c</span>(<span style="color:#a6e22e">bubble_say</span>(quote), <span style="color:#a6e22e">bubble_tail</span>(chicken, <span style="color:#e6db74">&#34;\\&#34;</span>), chicken),
</span></span><span style="display:flex;"><span>  collapse <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;\n&#34;</span>
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">cat</span>(z)
</span></span></code></pre></div><pre tabindex="0"><code> _______________________________________________________
/ This is a bit like asking how should I tweak my       \
| sailboat so I can explore the ocean floor.            |
| Roger Koenker                                         |
| in response to a question about tweaking the quantreg |
| package to handle probit and heckit models            |
| R-help                                                |
\ May 2013                                              /
 -------------------------------------------------------
      \
       \
         _
       _/ }
      `&gt;&#39; \
      `|   \
       |   /&#39;-.     .-.
        \&#39;     &#39;;`--&#39; .&#39;
         \&#39;.    `&#39;-./
          &#39;.`-..-;`
            `;-..&#39;
            _| _|
            /` /` [nosig]
</code></pre><p>A note about the refactored bubbles and tails: The tail horizontal position is now calculated based on the animal - so instead of always being in the same horizontal position, we attempt to place the tail close to the head of the animal.</p>
<h2 id="fin">Fin</h2>
<p>Have fun!</p>
]]></content:encoded>
    </item>
    <item>
      <title>Shiny file inputs</title>
      <link>http://localhost:1313/2024/03/shiny-file-inputs/</link>
      <pubDate>Fri, 08 Mar 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2024/03/shiny-file-inputs/</guid>
      <description>&lt;p&gt;I &lt;a href=&#34;http://localhost:1313/2024/03/shiny-events/&#34;&gt;wrote the other day&lt;/a&gt; about overcoming an issue with &lt;a href=&#34;https://shiny.posit.co/&#34;&gt;Shiny&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Another issue I ran into concurrently was about file inputs. The issue was that file inputs (i.e., &lt;code&gt;shiny::fileInput&lt;/code&gt;) was difficult to clear. That is, after a user uploads a file, it was easy to get some of the various parts cleared/cleaned up, but not others:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(Not Easy) The UI components of &lt;code&gt;fileInput&lt;/code&gt; (the text of the file name, the loading display)&lt;/li&gt;
&lt;li&gt;(Not Easy) The data behind the &lt;code&gt;fileInput&lt;/code&gt; handler&lt;/li&gt;
&lt;li&gt;(Easy) Displaying some feedback in the UI after handling file input&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Load libraries&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>I <a href="/2024/03/shiny-events/">wrote the other day</a> about overcoming an issue with <a href="https://shiny.posit.co/">Shiny</a>.</p>
<p>Another issue I ran into concurrently was about file inputs. The issue was that file inputs (i.e., <code>shiny::fileInput</code>) was difficult to clear. That is, after a user uploads a file, it was easy to get some of the various parts cleared/cleaned up, but not others:</p>
<ul>
<li>(Not Easy) The UI components of <code>fileInput</code> (the text of the file name, the loading display)</li>
<li>(Not Easy) The data behind the <code>fileInput</code> handler</li>
<li>(Easy) Displaying some feedback in the UI after handling file input</li>
</ul>
<p>Load libraries</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">library</span>(shiny)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">library</span>(shinyjs)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">library</span>(bslib)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">library</span>(DT)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">library</span>(vroom)
</span></span></code></pre></div><p>A helper function to handle reactive inputs</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>reactiveInput <span style="color:#f92672">&lt;-</span> <span style="color:#66d9ef">function</span>(rval, path) {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">is.null</span>(rval)) {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span>(<span style="color:#66d9ef">NULL</span>)
</span></span><span style="display:flex;"><span>  } <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> (rval <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;loaded&#39;</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span>(path)
</span></span><span style="display:flex;"><span>  } <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> (rval <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;reset&#39;</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span>(<span style="color:#66d9ef">NULL</span>)
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>A <code>bslib</code> ui component</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>ui <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">page_sidebar</span>(
</span></span><span style="display:flex;"><span>  title <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;My dashboard&#34;</span>,
</span></span><span style="display:flex;"><span>  sidebar <span style="color:#f92672">=</span> <span style="color:#a6e22e">list</span>(
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">actionButton</span>(<span style="color:#e6db74">&#34;submit&#34;</span>, <span style="color:#e6db74">&#34;Submit&#34;</span>),
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">actionButton</span>(<span style="color:#e6db74">&#34;reset&#34;</span>, <span style="color:#e6db74">&#34;Reset&#34;</span>)
</span></span><span style="display:flex;"><span>  ),
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">fileInput</span>(inputId <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;afile&#34;</span>, <span style="color:#e6db74">&#34;Upload file&#34;</span>, accept <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;.csv&#34;</span>),
</span></span><span style="display:flex;"><span>  DT<span style="color:#f92672">::</span><span style="color:#a6e22e">DTOutput</span>(<span style="color:#e6db74">&#34;result&#34;</span>),
</span></span><span style="display:flex;"><span>  shinyjs<span style="color:#f92672">::</span><span style="color:#a6e22e">useShinyjs</span>()
</span></span><span style="display:flex;"><span>)
</span></span></code></pre></div><p>Here&rsquo;s the server part that was giving me trouble.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>server <span style="color:#f92672">&lt;-</span> <span style="color:#66d9ef">function</span>(input, output) {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">observeEvent</span>(input<span style="color:#f92672">$</span>submit, {
</span></span><span style="display:flex;"><span>    output<span style="color:#f92672">$</span>result <span style="color:#f92672">&lt;-</span> DT<span style="color:#f92672">::</span><span style="color:#a6e22e">renderDataTable</span>({
</span></span><span style="display:flex;"><span>      dat <span style="color:#f92672">&lt;-</span> vroom<span style="color:#f92672">::</span><span style="color:#a6e22e">vroom</span>(
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">isolate</span>(input<span style="color:#f92672">$</span>afile<span style="color:#f92672">$</span>datapath)
</span></span><span style="display:flex;"><span>      )
</span></span><span style="display:flex;"><span>      DT<span style="color:#f92672">::</span><span style="color:#a6e22e">datatable</span>(dat)
</span></span><span style="display:flex;"><span>    })
</span></span><span style="display:flex;"><span>  })
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">observeEvent</span>(input<span style="color:#f92672">$</span>reset, {
</span></span><span style="display:flex;"><span>    shinyjs<span style="color:#f92672">::</span><span style="color:#a6e22e">reset</span>(<span style="color:#e6db74">&#34;afile&#34;</span>)
</span></span><span style="display:flex;"><span>    output<span style="color:#f92672">$</span>result <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">renderText</span>({})
</span></span><span style="display:flex;"><span>  })
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>With <code>shinyjs::reset</code> we can reset the UI components of the file input handler, and with <code>renderText</code> with an empty input we can reset the UI feedback. However, the data backing the file input handler is not reset. This led to problems in the UI where you could keep pressing submit after clicking the Reset button because the data for the last uploaded file was still there, whereas the user should get an error that they need to upload a file before clicking Submit.</p>
<p>To be able to completey reset data behind the file input handler I found out about a solution using reactive values via stackoverflow. Basically, the change involves handling file input data through a reactive value and keeping track of the state of the file input loader.</p>
<p>Here&rsquo;s the entire app that doesn&rsquo;t work</p>
<details>
  <summary>Click to expand</summary>
  <div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">library</span>(shiny)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">library</span>(shinyjs)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">library</span>(bslib)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">library</span>(DT)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">library</span>(vroom)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>ui <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">page_sidebar</span>(
</span></span><span style="display:flex;"><span>  title <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;My dashboard&#34;</span>,
</span></span><span style="display:flex;"><span>  sidebar <span style="color:#f92672">=</span> <span style="color:#a6e22e">list</span>(
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">actionButton</span>(<span style="color:#e6db74">&#34;submit&#34;</span>, <span style="color:#e6db74">&#34;Submit&#34;</span>),
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">actionButton</span>(<span style="color:#e6db74">&#34;reset&#34;</span>, <span style="color:#e6db74">&#34;Reset&#34;</span>)
</span></span><span style="display:flex;"><span>  ),
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">fileInput</span>(inputId <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;afile&#34;</span>, <span style="color:#e6db74">&#34;Upload file&#34;</span>, accept <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;.csv&#34;</span>),
</span></span><span style="display:flex;"><span>  DT<span style="color:#f92672">::</span><span style="color:#a6e22e">DTOutput</span>(<span style="color:#e6db74">&#34;result&#34;</span>),
</span></span><span style="display:flex;"><span>  shinyjs<span style="color:#f92672">::</span><span style="color:#a6e22e">useShinyjs</span>()
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>server <span style="color:#f92672">&lt;-</span> <span style="color:#66d9ef">function</span>(input, output) {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">observeEvent</span>(input<span style="color:#f92672">$</span>submit, {
</span></span><span style="display:flex;"><span>    output<span style="color:#f92672">$</span>result <span style="color:#f92672">&lt;-</span> DT<span style="color:#f92672">::</span><span style="color:#a6e22e">renderDataTable</span>({
</span></span><span style="display:flex;"><span>      dat <span style="color:#f92672">&lt;-</span> vroom<span style="color:#f92672">::</span><span style="color:#a6e22e">vroom</span>(
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">isolate</span>(input<span style="color:#f92672">$</span>afile<span style="color:#f92672">$</span>datapath)
</span></span><span style="display:flex;"><span>      )
</span></span><span style="display:flex;"><span>      DT<span style="color:#f92672">::</span><span style="color:#a6e22e">datatable</span>(dat)
</span></span><span style="display:flex;"><span>    })
</span></span><span style="display:flex;"><span>  })
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">observeEvent</span>(input<span style="color:#f92672">$</span>reset, {
</span></span><span style="display:flex;"><span>    shinyjs<span style="color:#f92672">::</span><span style="color:#a6e22e">reset</span>(<span style="color:#e6db74">&#34;afile&#34;</span>)
</span></span><span style="display:flex;"><span>    output<span style="color:#f92672">$</span>result <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">renderText</span>({})
</span></span><span style="display:flex;"><span>  })
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">shinyApp</span>(ui, server)
</span></span></code></pre></div>
</details>

<br />

<p>And here&rsquo;s the entire app that does work</p>
<details>
  <summary>Click to expand</summary>
  <div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">library</span>(shiny)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">library</span>(shinyjs)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">library</span>(bslib)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">library</span>(DT)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">library</span>(vroom)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>reactiveInput <span style="color:#f92672">&lt;-</span> <span style="color:#66d9ef">function</span>(rval, path) {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">is.null</span>(rval)) {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span>(<span style="color:#66d9ef">NULL</span>)
</span></span><span style="display:flex;"><span>  } <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> (rval <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;loaded&#39;</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span>(path)
</span></span><span style="display:flex;"><span>  } <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> (rval <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;reset&#39;</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span>(<span style="color:#66d9ef">NULL</span>)
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>ui <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">page_sidebar</span>(
</span></span><span style="display:flex;"><span>  title <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;My dashboard&#34;</span>,
</span></span><span style="display:flex;"><span>  sidebar <span style="color:#f92672">=</span> <span style="color:#a6e22e">list</span>(
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">actionButton</span>(<span style="color:#e6db74">&#34;submit&#34;</span>, <span style="color:#e6db74">&#34;Submit&#34;</span>),
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">actionButton</span>(<span style="color:#e6db74">&#34;reset&#34;</span>, <span style="color:#e6db74">&#34;Reset&#34;</span>)
</span></span><span style="display:flex;"><span>  ),
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">fileInput</span>(inputId <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;afile&#34;</span>, <span style="color:#e6db74">&#34;Upload file&#34;</span>, accept <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;.csv&#34;</span>),
</span></span><span style="display:flex;"><span>  DT<span style="color:#f92672">::</span><span style="color:#a6e22e">DTOutput</span>(<span style="color:#e6db74">&#34;result&#34;</span>),
</span></span><span style="display:flex;"><span>  shinyjs<span style="color:#f92672">::</span><span style="color:#a6e22e">useShinyjs</span>()
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>server <span style="color:#f92672">&lt;-</span> <span style="color:#66d9ef">function</span>(input, output) {
</span></span><span style="display:flex;"><span>  rv_file <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">reactiveValues</span>(file_state <span style="color:#f92672">=</span> <span style="color:#66d9ef">NULL</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  thefile <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">reactive</span>({
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">reactiveInput</span>(rv_file<span style="color:#f92672">$</span>file_state, input<span style="color:#f92672">$</span>afile<span style="color:#f92672">$</span>datapath)
</span></span><span style="display:flex;"><span>  })
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">observeEvent</span>(input<span style="color:#f92672">$</span>afile, {
</span></span><span style="display:flex;"><span>    rv_file<span style="color:#f92672">$</span>file_state <span style="color:#f92672">&lt;-</span> <span style="color:#e6db74">&#39;loaded&#39;</span>
</span></span><span style="display:flex;"><span>  })
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">observeEvent</span>(input<span style="color:#f92672">$</span>submit, {
</span></span><span style="display:flex;"><span>    output<span style="color:#f92672">$</span>result <span style="color:#f92672">&lt;-</span> DT<span style="color:#f92672">::</span><span style="color:#a6e22e">renderDataTable</span>({
</span></span><span style="display:flex;"><span>      dat <span style="color:#f92672">&lt;-</span> vroom<span style="color:#f92672">::</span><span style="color:#a6e22e">vroom</span>(
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">isolate</span>(<span style="color:#a6e22e">thefile</span>())
</span></span><span style="display:flex;"><span>      )
</span></span><span style="display:flex;"><span>      DT<span style="color:#f92672">::</span><span style="color:#a6e22e">datatable</span>(dat)
</span></span><span style="display:flex;"><span>    })
</span></span><span style="display:flex;"><span>  })
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">observeEvent</span>(input<span style="color:#f92672">$</span>reset, {
</span></span><span style="display:flex;"><span>    shinyjs<span style="color:#f92672">::</span><span style="color:#a6e22e">reset</span>(<span style="color:#e6db74">&#34;afile&#34;</span>)
</span></span><span style="display:flex;"><span>    rv_file<span style="color:#f92672">$</span>file_state <span style="color:#f92672">&lt;-</span> <span style="color:#e6db74">&#39;reset&#39;</span>
</span></span><span style="display:flex;"><span>    output<span style="color:#f92672">$</span>result <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">renderText</span>({})
</span></span><span style="display:flex;"><span>  })
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">shinyApp</span>(ui, server)
</span></span></code></pre></div>
</details>

]]></content:encoded>
    </item>
    <item>
      <title>Shiny button weirdness</title>
      <link>http://localhost:1313/2024/03/shiny-events/</link>
      <pubDate>Mon, 04 Mar 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2024/03/shiny-events/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve been working on &lt;a href=&#34;https://shiny.posit.co/&#34;&gt;Shiny&lt;/a&gt; app at work for the past few months. One of the many frustrating things about Shiny lately has been around buttons. Well, it wasn&amp;rsquo;t really about buttons, but that&amp;rsquo;s where it started.&lt;/p&gt;
&lt;p&gt;Load libraries&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(shiny)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(bslib)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(crul)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Helper function, returned a random UUID from an httpbin server&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;httpbin_uuid &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;...&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  con &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; crul&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;HttpClient&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;new&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://hb.opencpu.org&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  res &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; con&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;uuid&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  jsonlite&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;fromJSON&lt;/span&gt;(res&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;parse&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;UTF-8&amp;#34;&lt;/span&gt;))&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;uuid
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;A bslib ui component&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ui &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;page_sidebar&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  title &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;My dashboard&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  sidebar &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;list&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;actionButton&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;submit&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Submit&amp;#34;&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;actionButton&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;reset&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Reset&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;textInput&lt;/span&gt;(inputId &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Your name&amp;#34;&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;textOutput&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;uuid&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here&amp;rsquo;s the server part that was giving me trouble. As I said this was an inherited repo, and the server side handling for many buttons was done with &lt;code&gt;eventReactive&lt;/code&gt; as below. Using &lt;code&gt;eventReactive&lt;/code&gt; meant that button clicks only sometimes triggered the server side code.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>I&rsquo;ve been working on <a href="https://shiny.posit.co/">Shiny</a> app at work for the past few months. One of the many frustrating things about Shiny lately has been around buttons. Well, it wasn&rsquo;t really about buttons, but that&rsquo;s where it started.</p>
<p>Load libraries</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">library</span>(shiny)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">library</span>(bslib)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">library</span>(crul)
</span></span></code></pre></div><p>Helper function, returned a random UUID from an httpbin server</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>httpbin_uuid <span style="color:#f92672">&lt;-</span> <span style="color:#66d9ef">function</span>(<span style="color:#66d9ef">...</span>) {
</span></span><span style="display:flex;"><span>  con <span style="color:#f92672">&lt;-</span> crul<span style="color:#f92672">::</span>HttpClient<span style="color:#f92672">$</span><span style="color:#a6e22e">new</span>(<span style="color:#e6db74">&#34;https://hb.opencpu.org&#34;</span>)
</span></span><span style="display:flex;"><span>  res <span style="color:#f92672">&lt;-</span> con<span style="color:#f92672">$</span><span style="color:#a6e22e">get</span>(<span style="color:#e6db74">&#34;uuid&#34;</span>)
</span></span><span style="display:flex;"><span>  jsonlite<span style="color:#f92672">::</span><span style="color:#a6e22e">fromJSON</span>(res<span style="color:#f92672">$</span><span style="color:#a6e22e">parse</span>(<span style="color:#e6db74">&#34;UTF-8&#34;</span>))<span style="color:#f92672">$</span>uuid
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>A bslib ui component</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>ui <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">page_sidebar</span>(
</span></span><span style="display:flex;"><span>  title <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;My dashboard&#34;</span>,
</span></span><span style="display:flex;"><span>  sidebar <span style="color:#f92672">=</span> <span style="color:#a6e22e">list</span>(
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">actionButton</span>(<span style="color:#e6db74">&#34;submit&#34;</span>, <span style="color:#e6db74">&#34;Submit&#34;</span>),
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">actionButton</span>(<span style="color:#e6db74">&#34;reset&#34;</span>, <span style="color:#e6db74">&#34;Reset&#34;</span>)
</span></span><span style="display:flex;"><span>  ),
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">textInput</span>(inputId <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;name&#34;</span>, <span style="color:#e6db74">&#34;Your name&#34;</span>),
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">textOutput</span>(<span style="color:#e6db74">&#34;uuid&#34;</span>)
</span></span><span style="display:flex;"><span>)
</span></span></code></pre></div><p>Here&rsquo;s the server part that was giving me trouble. As I said this was an inherited repo, and the server side handling for many buttons was done with <code>eventReactive</code> as below. Using <code>eventReactive</code> meant that button clicks only sometimes triggered the server side code.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>server <span style="color:#f92672">&lt;-</span> <span style="color:#66d9ef">function</span>(input, output, session) {
</span></span><span style="display:flex;"><span>  tmp <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">eventReactive</span>(input<span style="color:#f92672">$</span>submit, {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">httpbin_uuid</span>(input<span style="color:#f92672">$</span>name)
</span></span><span style="display:flex;"><span>  })
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  output<span style="color:#f92672">$</span>uuid <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">renderText</span>({ <span style="color:#a6e22e">tmp</span>() })
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">observeEvent</span>(input<span style="color:#f92672">$</span>reset, {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">updateTextInput</span>(session, <span style="color:#e6db74">&#34;name&#34;</span>, <span style="color:#e6db74">&#34;Your name&#34;</span>, <span style="color:#e6db74">&#34;&#34;</span>)
</span></span><span style="display:flex;"><span>    output<span style="color:#f92672">$</span>uuid <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">renderText</span>({})
</span></span><span style="display:flex;"><span>  })
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Eventually I landed upon switching from <code>eventReactive</code> to <code>observeEvent</code> for a variety of reasons. And tried something like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>  <span style="color:#a6e22e">observeEvent</span>(input<span style="color:#f92672">$</span>submit, {
</span></span><span style="display:flex;"><span>    output<span style="color:#f92672">$</span>uuid <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">renderText</span>({
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">httpbin_uuid</span>(input<span style="color:#f92672">$</span>name)
</span></span><span style="display:flex;"><span>    })
</span></span><span style="display:flex;"><span>  })
</span></span></code></pre></div><p>However, keen eyes will notice that this still doesn&rsquo;t work. The final missing piece was the function <code>isolate</code>. Without <code>isolate</code> the <code>observeEvent</code> handler was being triggered on changes other than just a button click.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>  <span style="color:#a6e22e">observeEvent</span>(input<span style="color:#f92672">$</span>submit, {
</span></span><span style="display:flex;"><span>    output<span style="color:#f92672">$</span>uuid <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">renderText</span>({
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">isolate</span>(
</span></span><span style="display:flex;"><span>      	<span style="color:#a6e22e">httpbin_uuid</span>(input<span style="color:#f92672">$</span>name)
</span></span><span style="display:flex;"><span>      )
</span></span><span style="display:flex;"><span>    })
</span></span><span style="display:flex;"><span>  })
</span></span></code></pre></div><p>Here&rsquo;s the entire app with <code>eventReactive</code> that didn&rsquo;t work:</p>
<details>
  <summary>Click to expand</summary>
  <div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">library</span>(shiny)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">library</span>(bslib)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">library</span>(crul)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>httpbin_uuid <span style="color:#f92672">&lt;-</span> <span style="color:#66d9ef">function</span>(<span style="color:#66d9ef">...</span>) {
</span></span><span style="display:flex;"><span>  con <span style="color:#f92672">&lt;-</span> crul<span style="color:#f92672">::</span>HttpClient<span style="color:#f92672">$</span><span style="color:#a6e22e">new</span>(<span style="color:#e6db74">&#34;https://hb.opencpu.org&#34;</span>)
</span></span><span style="display:flex;"><span>  res <span style="color:#f92672">&lt;-</span> con<span style="color:#f92672">$</span><span style="color:#a6e22e">get</span>(<span style="color:#e6db74">&#34;uuid&#34;</span>)
</span></span><span style="display:flex;"><span>  jsonlite<span style="color:#f92672">::</span><span style="color:#a6e22e">fromJSON</span>(res<span style="color:#f92672">$</span><span style="color:#a6e22e">parse</span>(<span style="color:#e6db74">&#34;UTF-8&#34;</span>))<span style="color:#f92672">$</span>uuid
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>ui <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">page_sidebar</span>(
</span></span><span style="display:flex;"><span>  title <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;My dashboard&#34;</span>,
</span></span><span style="display:flex;"><span>  sidebar <span style="color:#f92672">=</span> <span style="color:#a6e22e">list</span>(
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">actionButton</span>(<span style="color:#e6db74">&#34;submit&#34;</span>, <span style="color:#e6db74">&#34;Submit&#34;</span>),
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">actionButton</span>(<span style="color:#e6db74">&#34;reset&#34;</span>, <span style="color:#e6db74">&#34;Reset&#34;</span>)
</span></span><span style="display:flex;"><span>  ),
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">textInput</span>(inputId <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;name&#34;</span>, <span style="color:#e6db74">&#34;Your name&#34;</span>),
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">textOutput</span>(<span style="color:#e6db74">&#34;uuid&#34;</span>)
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>server <span style="color:#f92672">&lt;-</span> <span style="color:#66d9ef">function</span>(input, output, session) {
</span></span><span style="display:flex;"><span>  tmp <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">eventReactive</span>(input<span style="color:#f92672">$</span>submit, {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">httpbin_uuid</span>(input<span style="color:#f92672">$</span>name)
</span></span><span style="display:flex;"><span>  })
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  output<span style="color:#f92672">$</span>uuid <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">renderText</span>({ <span style="color:#a6e22e">tmp</span>() })
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">observeEvent</span>(input<span style="color:#f92672">$</span>reset, {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">updateTextInput</span>(session, <span style="color:#e6db74">&#34;name&#34;</span>, <span style="color:#e6db74">&#34;Your name&#34;</span>, <span style="color:#e6db74">&#34;&#34;</span>)
</span></span><span style="display:flex;"><span>    output<span style="color:#f92672">$</span>uuid <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">renderText</span>({})
</span></span><span style="display:flex;"><span>  })
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">shinyApp</span>(ui, server)
</span></span></code></pre></div>
</details>

<br />

<p>And here&rsquo;s the entire app with <code>obseveEvent</code> and <code>isolate</code> that worked:</p>
<details>
  <summary>Click to expand</summary>
  <div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">library</span>(shiny)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">library</span>(bslib)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">library</span>(crul)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>httpbin_uuid <span style="color:#f92672">&lt;-</span> <span style="color:#66d9ef">function</span>(<span style="color:#66d9ef">...</span>) {
</span></span><span style="display:flex;"><span>  con <span style="color:#f92672">&lt;-</span> crul<span style="color:#f92672">::</span>HttpClient<span style="color:#f92672">$</span><span style="color:#a6e22e">new</span>(<span style="color:#e6db74">&#34;https://hb.opencpu.org&#34;</span>)
</span></span><span style="display:flex;"><span>  res <span style="color:#f92672">&lt;-</span> con<span style="color:#f92672">$</span><span style="color:#a6e22e">get</span>(<span style="color:#e6db74">&#34;uuid&#34;</span>)
</span></span><span style="display:flex;"><span>  jsonlite<span style="color:#f92672">::</span><span style="color:#a6e22e">fromJSON</span>(res<span style="color:#f92672">$</span><span style="color:#a6e22e">parse</span>(<span style="color:#e6db74">&#34;UTF-8&#34;</span>))<span style="color:#f92672">$</span>uuid
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>ui <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">page_sidebar</span>(
</span></span><span style="display:flex;"><span>  title <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;My dashboard&#34;</span>,
</span></span><span style="display:flex;"><span>  sidebar <span style="color:#f92672">=</span> <span style="color:#a6e22e">list</span>(
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">actionButton</span>(<span style="color:#e6db74">&#34;submit&#34;</span>, <span style="color:#e6db74">&#34;Submit&#34;</span>),
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">actionButton</span>(<span style="color:#e6db74">&#34;reset&#34;</span>, <span style="color:#e6db74">&#34;Reset&#34;</span>)
</span></span><span style="display:flex;"><span>  ),
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">textInput</span>(inputId <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;name&#34;</span>, <span style="color:#e6db74">&#34;Your name&#34;</span>),
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">textOutput</span>(<span style="color:#e6db74">&#34;uuid&#34;</span>)
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>server <span style="color:#f92672">&lt;-</span> <span style="color:#66d9ef">function</span>(input, output, session) {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">observeEvent</span>(input<span style="color:#f92672">$</span>submit, {
</span></span><span style="display:flex;"><span>    output<span style="color:#f92672">$</span>uuid <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">renderText</span>({
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">isolate</span>(<span style="color:#a6e22e">httpbin_uuid</span>(input<span style="color:#f92672">$</span>name))
</span></span><span style="display:flex;"><span>    })
</span></span><span style="display:flex;"><span>  })
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">observeEvent</span>(input<span style="color:#f92672">$</span>reset, {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">updateTextInput</span>(session, <span style="color:#e6db74">&#34;name&#34;</span>, <span style="color:#e6db74">&#34;Your name&#34;</span>, <span style="color:#e6db74">&#34;&#34;</span>)
</span></span><span style="display:flex;"><span>    output<span style="color:#f92672">$</span>uuid <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">renderText</span>({})
</span></span><span style="display:flex;"><span>  })
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">shinyApp</span>(ui, server)
</span></span></code></pre></div>
</details>

]]></content:encoded>
    </item>
    <item>
      <title>Working at Fred Hutchinson Cancer Center</title>
      <link>http://localhost:1313/2023/10/fred-hutch/</link>
      <pubDate>Fri, 06 Oct 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2023/10/fred-hutch/</guid>
      <description>&lt;p&gt;Soooo, my last job at &lt;a href=&#34;https://welcome.deck.tools/&#34;&gt;Deck&lt;/a&gt; was amazing. I loved it. I was doing data engineer stuff there, mostly maintaining infrastructure for data pipelines. Everyone was great and the mission was amazing: helping Democrats win. Yet the company was shut down about a month ago, sending me on another job search, the 3rd since early/mid 2021.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m super thrilled to have landed a job (Software and Reproducibility Software Developer) at the &lt;a href=&#34;https://hutchdatascience.org/&#34;&gt;Fred Hutch Data Science Lab (DASL)&lt;/a&gt;, headed up by &lt;a href=&#34;https://jtleek.com/&#34;&gt;Jeff Leek&lt;/a&gt;, working with &lt;a href=&#34;https://seankross.com/&#34;&gt;Sean Kross&lt;/a&gt;, &lt;a href=&#34;https://amypag.com/&#34;&gt;Amy Paguirigan&lt;/a&gt;, and &lt;a href=&#34;https://www.monicagerber.com/&#34;&gt;Monica Gerber&lt;/a&gt;, among many other amazing folks.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>Soooo, my last job at <a href="https://welcome.deck.tools/">Deck</a> was amazing. I loved it. I was doing data engineer stuff there, mostly maintaining infrastructure for data pipelines. Everyone was great and the mission was amazing: helping Democrats win. Yet the company was shut down about a month ago, sending me on another job search, the 3rd since early/mid 2021.</p>
<p>I&rsquo;m super thrilled to have landed a job (Software and Reproducibility Software Developer) at the <a href="https://hutchdatascience.org/">Fred Hutch Data Science Lab (DASL)</a>, headed up by <a href="https://jtleek.com/">Jeff Leek</a>, working with <a href="https://seankross.com/">Sean Kross</a>, <a href="https://amypag.com/">Amy Paguirigan</a>, and <a href="https://www.monicagerber.com/">Monica Gerber</a>, among many other amazing folks.</p>
<p>I&rsquo;m excited to help support the DASL mission to help cancer patients, care providers and researchers.</p>
<p>In addition, I get to do a bunch (maybe all?) of software work as opensource, mostly in R and Python. After two jobs where opensource wasn&rsquo;t really part of the job, it&rsquo;s such a treat to get back to doing opensource work. Perhaps it will mostly be conversing with Fred Hutch people, but the goal is to make tools that will help far beyond Fred Hutch.</p>
]]></content:encoded>
    </item>
    <item>
      <title>CRAN Checks API and Badges</title>
      <link>http://localhost:1313/2022/06/cran-checks-badges/</link>
      <pubDate>Thu, 02 Jun 2022 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2022/06/cran-checks-badges/</guid>
      <description>&lt;h2 id=&#34;tldr&#34;&gt;TL;DR&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;In 6 months (end of November 2022) the CRAN Checks API &lt;a href=&#34;https://cranchecks.info/&#34;&gt;https://cranchecks.info/&lt;/a&gt; will be gone&lt;/li&gt;
&lt;li&gt;You can still get badges at &lt;a href=&#34;https://badges.cranchecks.info&#34;&gt;https://badges.cranchecks.info&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;You can use the new badges like:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[&lt;span style=&#34;color:#f92672&#34;&gt;![cran checks&lt;/span&gt;](&lt;span style=&#34;color:#a6e22e&#34;&gt;https://badges.cranchecks.info/worst/dplyr.svg&lt;/span&gt;)](https://cran.r-project.org/web/checks/check_results_dplyr.html)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Find more details at &lt;a href=&#34;https://github.com/sckott/cchecksbadges&#34;&gt;https://github.com/sckott/cchecksbadges&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;sunsetting-the-cran-checks-api&#34;&gt;Sunsetting the CRAN Checks API&lt;/h2&gt;
&lt;p&gt;If you contribute an R package to &lt;a href=&#34;https://cloud.r-project.org/&#34;&gt;CRAN&lt;/a&gt;, you may use badges from the CRAN checks API at &lt;a href=&#34;https://cranchecks.info/&#34;&gt;https://cranchecks.info/&lt;/a&gt;. The CRAN Checks API has been operating &lt;a href=&#34;https://recology.info/2017/09/cranchecks-api/&#34;&gt;since about September 2017&lt;/a&gt; (I think).&lt;/p&gt;
&lt;p&gt;The API has a number of routes, but really people only use the badges.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<h2 id="tldr">TL;DR</h2>
<ol>
<li>In 6 months (end of November 2022) the CRAN Checks API <a href="https://cranchecks.info/">https://cranchecks.info/</a> will be gone</li>
<li>You can still get badges at <a href="https://badges.cranchecks.info">https://badges.cranchecks.info</a></li>
<li>You can use the new badges like:</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-markdown" data-lang="markdown"><span style="display:flex;"><span>[<span style="color:#f92672">![cran checks</span>](<span style="color:#a6e22e">https://badges.cranchecks.info/worst/dplyr.svg</span>)](https://cran.r-project.org/web/checks/check_results_dplyr.html)
</span></span></code></pre></div><p>Find more details at <a href="https://github.com/sckott/cchecksbadges">https://github.com/sckott/cchecksbadges</a></p>
<h2 id="sunsetting-the-cran-checks-api">Sunsetting the CRAN Checks API</h2>
<p>If you contribute an R package to <a href="https://cloud.r-project.org/">CRAN</a>, you may use badges from the CRAN checks API at <a href="https://cranchecks.info/">https://cranchecks.info/</a>. The CRAN Checks API has been operating <a href="https://recology.info/2017/09/cranchecks-api/">since about September 2017</a> (I think).</p>
<p>The API has a number of routes, but really people only use the badges.</p>
<p>Given this usage pattern, and not wanting to pay for a server anymore, I&rsquo;ve decided to make the badges available on a static endpoint that doesn&rsquo;t cost me anything. There are costs of course - but they&rsquo;re on Github and Netlify (thanks y&rsquo;all!).</p>
<h2 id="the-new-static-site-version">The new static site version</h2>
<p>The static site is created using GitHub Actions.</p>
<p>For a static site you need to create files for any route you want to support - so the code for the static site creates 19 routes x No. of CRAN packages = approx. 360,000 svg files.</p>
<p>The badges will be updated once a day - the same schedule as the API.</p>
<p>I had to use Netlify because Github pages (as far as I know) doesn&rsquo;t provide ssl certs for custom domains and my domain host doesn&rsquo;t provide free Lets Encrypt certs - whereas Netlify does.</p>
<p>Some example routes you can look at</p>
<p><a href="https://badges.cranchecks.info/summary/taxize.svg">https://badges.cranchecks.info/summary/taxize.svg</a>
<a href="https://badges.cranchecks.info/worst/dplyr.svg">https://badges.cranchecks.info/worst/dplyr.svg</a>
<a href="https://badges.cranchecks.info/flavor/r-devel-linux-x86_64-fedora-clang/DT.svg">https://badges.cranchecks.info/flavor/r-devel-linux-x86_64-fedora-clang/DT.svg</a></p>
<p>If you find any issues with the badges at <a href="https://badges.cranchecks.info">https://badges.cranchecks.info</a> <a href="https://github.com/sckott/cchecksbadges/issues">open an issue</a>.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Mocking HTTP redirects</title>
      <link>http://localhost:1313/2021/11/mocking-redirects/</link>
      <pubDate>Sat, 27 Nov 2021 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2021/11/mocking-redirects/</guid>
      <description>&lt;p&gt;You&amp;rsquo;ve experienced an &lt;a href=&#34;https://en.wikipedia.org/wiki/URL_redirection&#34;&gt;HTTP redirect&lt;/a&gt; (or URL redirect, or URL forwarding) even if you haven&amp;rsquo;t noticed. We all use browsers (I assume, since you are reading this), either on a phone or laptop/desktop computer. Browsers don&amp;rsquo;t show all the HTTP requests going on in the background, some of which are redirects. Redirection is used for various reasons, including to prevent broken links when web pages are moved, for privacy protection, to allow multiple domains to refer to a single web page, and more.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>You&rsquo;ve experienced an <a href="https://en.wikipedia.org/wiki/URL_redirection">HTTP redirect</a> (or URL redirect, or URL forwarding) even if you haven&rsquo;t noticed. We all use browsers (I assume, since you are reading this), either on a phone or laptop/desktop computer. Browsers don&rsquo;t show all the HTTP requests going on in the background, some of which are redirects. Redirection is used for various reasons, including to prevent broken links when web pages are moved, for privacy protection, to allow multiple domains to refer to a single web page, and more.</p>
<p>The easiest way to know if you hit a redirect is to look at the <a href="https://en.wikipedia.org/wiki/List_of_HTTP_status_codes">HTTP status code</a>. Status codes in the 3xx series are mostly about URL redirection. The most common you will see are 301 (moved permanently), 302 (moved temporarily), and 303 (see other URI; usually in a &ldquo;Location&rdquo; response header).</p>
<p>When making HTTP requests in R, redirects are generally handled automatically by the three HTTP clients (<a href="https://jeroen.cran.dev/curl/">curl</a>, <a href="https://github.com/ropensci/crul">crul</a>, <a href="https://github.com/r-lib/httr">httr</a>). That is, if a 300 series code is detected, all three clients will go to the next URI and so on until there are no more redirects. Automatically following redirects may not be default behavior elsewhere (e.g., <code>crul</code> command line tool doesn&rsquo;t follow redirects by default), so beware.</p>
<p>HTTP redirects become more tricky when we have to mock them in unit tests or other similar situations. I&rsquo;ll cover the various tools for doing this in R.</p>
<h2 id="redirects">Redirects</h2>
<p>First, I&rsquo;ll show how redirects work with three major HTTP clients:</p>
<p><a href="https://jeroen.cran.dev/curl/">curl</a></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">library</span>(curl)
</span></span><span style="display:flex;"><span>h <span style="color:#f92672">&lt;-</span> curl<span style="color:#f92672">::</span><span style="color:#a6e22e">new_handle</span>()
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">handle_setopt</span>(h, followlocation<span style="color:#f92672">=</span><span style="color:#ae81ff">0L</span>)
</span></span><span style="display:flex;"><span>out <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">curl_fetch_memory</span>(<span style="color:#e6db74">&#34;https://hb.opencpu.org/redirect/3&#34;</span>, handle <span style="color:#f92672">=</span> h)
</span></span><span style="display:flex;"><span>curl<span style="color:#f92672">::</span><span style="color:#a6e22e">parse_headers</span>(out<span style="color:#f92672">$</span>headers, multiple <span style="color:#f92672">=</span> <span style="color:#66d9ef">TRUE</span>)
</span></span></code></pre></div><p><a href="https://github.com/ropensci/crul">crul</a></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">library</span>(crul)
</span></span><span style="display:flex;"><span>con <span style="color:#f92672">&lt;-</span> HttpClient<span style="color:#f92672">$</span><span style="color:#a6e22e">new</span>(<span style="color:#e6db74">&#34;https://hb.opencpu.org/redirect/3&#34;</span>)
</span></span><span style="display:flex;"><span>res <span style="color:#f92672">&lt;-</span> con<span style="color:#f92672">$</span><span style="color:#a6e22e">get</span>()
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">length</span>(res<span style="color:#f92672">$</span>response_headers_all)
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] 4</span>
</span></span></code></pre></div><p><a href="https://github.com/r-lib/httr">httr</a></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">library</span>(httr)
</span></span><span style="display:flex;"><span>z <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">GET</span>(<span style="color:#e6db74">&#34;https://hb.opencpu.org/redirect/3&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">length</span>(z<span style="color:#f92672">$</span>all_headers)
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] 4</span>
</span></span></code></pre></div><h2 id="mocking-redirects">Mocking redirects</h2>
<p>If you want to mock HTTP redirects, you can do so with the <a href="https://github.com/ropensci/webmockr">webmockr</a> package. Why would you want to mock redirects?</p>
<p>Here&rsquo;s one use case: Say you have a library/package interacting with a web resource that you interact with. You want to add some unit tests for a route that responds with one or more redirects. You&rsquo;d prefer not to perform real HTTP requests against the remote service for one reason or another (e.g., extreme rate limiting); and some would say it&rsquo;s best not to test with real HTTP requests b/c you want to test the functionality of the package, NOT the remote server with which it interacts.</p>
<p>In the following, we re-create what happens in real HTTP requests - but just status codes and the <code>location</code> response header.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">library</span>(webmockr)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">library</span>(crul)
</span></span><span style="display:flex;"><span>webmockr<span style="color:#f92672">::</span><span style="color:#a6e22e">enable</span>()
</span></span></code></pre></div><p>Make a single stub with each redirect response with <code>to_return()</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">stub_request</span>(<span style="color:#e6db74">&#34;get&#34;</span>, <span style="color:#e6db74">&#34;https://hb.opencpu.org/redirect/3&#34;</span>) <span style="color:#f92672">%&gt;%</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">to_return</span>(status <span style="color:#f92672">=</span> <span style="color:#ae81ff">302</span>, headers <span style="color:#f92672">=</span> <span style="color:#a6e22e">list</span>(location <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;/relative-redirect/2&#34;</span>)) <span style="color:#f92672">%&gt;%</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">to_return</span>(status <span style="color:#f92672">=</span> <span style="color:#ae81ff">302</span>, headers <span style="color:#f92672">=</span> <span style="color:#a6e22e">list</span>(location <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;/relative-redirect/1&#34;</span>)) <span style="color:#f92672">%&gt;%</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">to_return</span>(status <span style="color:#f92672">=</span> <span style="color:#ae81ff">302</span>, headers <span style="color:#f92672">=</span> <span style="color:#a6e22e">list</span>(location <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;/get&#34;</span>)) <span style="color:#f92672">%&gt;%</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">to_return</span>(status <span style="color:#f92672">=</span> <span style="color:#ae81ff">200</span>, headers <span style="color:#f92672">=</span> <span style="color:#a6e22e">list</span>(location <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;hooray, all done!&#34;</span>))
</span></span></code></pre></div><p>Then make four different requests to <code>https://hb.opencpu.org/redirect/3</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>con <span style="color:#f92672">&lt;-</span> crul<span style="color:#f92672">::</span>HttpClient<span style="color:#f92672">$</span><span style="color:#a6e22e">new</span>(url <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;https://hb.opencpu.org&#34;</span>)
</span></span><span style="display:flex;"><span>con<span style="color:#f92672">$</span><span style="color:#a6e22e">get</span>(<span style="color:#e6db74">&#34;redirect/3&#34;</span>)<span style="color:#f92672">$</span>response_headers
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $location</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;/relative-redirect/2&#34;</span>
</span></span><span style="display:flex;"><span>con<span style="color:#f92672">$</span><span style="color:#a6e22e">get</span>(<span style="color:#e6db74">&#34;redirect/3&#34;</span>)<span style="color:#f92672">$</span>response_headers
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $location</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;/relative-redirect/1&#34;</span>
</span></span><span style="display:flex;"><span>con<span style="color:#f92672">$</span><span style="color:#a6e22e">get</span>(<span style="color:#e6db74">&#34;redirect/3&#34;</span>)<span style="color:#f92672">$</span>response_headers
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $location</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;/get&#34;</span>
</span></span><span style="display:flex;"><span>con<span style="color:#f92672">$</span><span style="color:#a6e22e">get</span>(<span style="color:#e6db74">&#34;redirect/3&#34;</span>)<span style="color:#f92672">$</span>response_headers
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $location</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;hooray, all done!&#34;</span>
</span></span></code></pre></div><p>This isn&rsquo;t ideal because it doesn&rsquo;t reflect how the real HTTP request equivalent happens.</p>
<p>Alernatively, you could set it up like this, with four separate stubs:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">stub_request</span>(<span style="color:#e6db74">&#34;get&#34;</span>, <span style="color:#e6db74">&#34;https://hb.opencpu.org/redirect/3&#34;</span>) <span style="color:#f92672">%&gt;%</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">to_return</span>(status <span style="color:#f92672">=</span> <span style="color:#ae81ff">302</span>, headers <span style="color:#f92672">=</span> <span style="color:#a6e22e">list</span>(location <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;/relative-redirect/2&#34;</span>))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">stub_request</span>(<span style="color:#e6db74">&#34;get&#34;</span>, <span style="color:#e6db74">&#34;https://hb.opencpu.org/relative-redirect/2&#34;</span>) <span style="color:#f92672">%&gt;%</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">to_return</span>(status <span style="color:#f92672">=</span> <span style="color:#ae81ff">302</span>, headers <span style="color:#f92672">=</span> <span style="color:#a6e22e">list</span>(location <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;/relative-redirect/1&#34;</span>))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">stub_request</span>(<span style="color:#e6db74">&#34;get&#34;</span>, <span style="color:#e6db74">&#34;https://hb.opencpu.org/relative-redirect/1&#34;</span>) <span style="color:#f92672">%&gt;%</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">to_return</span>(status <span style="color:#f92672">=</span> <span style="color:#ae81ff">302</span>, headers <span style="color:#f92672">=</span> <span style="color:#a6e22e">list</span>(location <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;/get&#34;</span>))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">stub_request</span>(<span style="color:#e6db74">&#34;get&#34;</span>, <span style="color:#e6db74">&#34;https://hb.opencpu.org/get&#34;</span>) <span style="color:#f92672">%&gt;%</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">to_return</span>(status <span style="color:#f92672">=</span> <span style="color:#ae81ff">200</span>, headers <span style="color:#f92672">=</span> <span style="color:#a6e22e">list</span>(location <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;hooray, all done!&#34;</span>))
</span></span></code></pre></div><p>Then make each request in turn to each successive URL:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>con <span style="color:#f92672">&lt;-</span> crul<span style="color:#f92672">::</span>HttpClient<span style="color:#f92672">$</span><span style="color:#a6e22e">new</span>(url <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;https://hb.opencpu.org&#34;</span>)
</span></span><span style="display:flex;"><span>con<span style="color:#f92672">$</span><span style="color:#a6e22e">get</span>(<span style="color:#e6db74">&#34;redirect/3&#34;</span>)<span style="color:#f92672">$</span>response_headers
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $location</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;/relative-redirect/2&#34;</span>
</span></span><span style="display:flex;"><span>con<span style="color:#f92672">$</span><span style="color:#a6e22e">get</span>(<span style="color:#e6db74">&#34;relative-redirect/2&#34;</span>)<span style="color:#f92672">$</span>response_headers
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $location</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;/relative-redirect/1&#34;</span>
</span></span><span style="display:flex;"><span>con<span style="color:#f92672">$</span><span style="color:#a6e22e">get</span>(<span style="color:#e6db74">&#34;relative-redirect/1&#34;</span>)<span style="color:#f92672">$</span>response_headers
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $location</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;/get&#34;</span>
</span></span><span style="display:flex;"><span>con<span style="color:#f92672">$</span><span style="color:#a6e22e">get</span>(<span style="color:#e6db74">&#34;get&#34;</span>)<span style="color:#f92672">$</span>response_headers
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $location</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;hooray, all done!&#34;</span>
</span></span></code></pre></div><h2 id="faking-real-redirects">Faking real redirects</h2>
<p><a href="https://github.com/ropensci/vcr">vcr</a> is built on top of webmockr, but instead of returning stubbed responses and not allowing real HTTP requests, vcr stores real HTTP request/response and uses them on all subsequent matching HTTP requests.</p>
<p>I wrote this back in March 2021 - and was waiting to figure out how to deal with redirects in <a href="https://github.com/ropensci/vcr">vcr</a> before finishing this post - see <a href="https://github.com/ropensci/vcr/issues/220">vcr issue #220</a>. I still have and may never get to that issue. If you are interested, please do stop by vcr and make a pull request to get it fixed. The major issue is that vcr stores only the first HTTP response in a redirect chain, rather than the last HTTP response - as I would expect.</p>
]]></content:encoded>
    </item>
    <item>
      <title>API client design: how to deal with lots of parameters?</title>
      <link>http://localhost:1313/2020/12/api-client-params/</link>
      <pubDate>Mon, 21 Dec 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2020/12/api-client-params/</guid>
      <description>&lt;p&gt;In February this year I wroute about &lt;a href=&#34;https://recology.info/2020/02/how-many-parameters/&#34;&gt;how many parameters functions should have&lt;/a&gt;, looking at some other languages, with a detailed look at R. On a related topic &amp;hellip;&lt;/p&gt;
&lt;p&gt;As I work on many R packages that are API clients for various web services, I began wondering: What is the best way to deal with API routes that have a lot of parameters?&lt;/p&gt;
&lt;p&gt;The general programming wisdom I&amp;rsquo;ve seen is that a function should have no more than 3-4 parameters (e.g., &lt;a href=&#34;https://stackoverflow.com/questions/174968/how-many-parameters-are-too-many&#34;&gt;this long SO thread&lt;/a&gt;, or &lt;a href=&#34;https://softwareengineering.stackexchange.com/questions/331803/techniques-for-minimising-number-of-function-arguments&#34;&gt;this one&lt;/a&gt;). So should one do anything different from a normal function when that function is connecting to a web API route with a lot of parameters? I&amp;rsquo;ve not found very much spilled ink on this exact topic, but I&amp;rsquo;ll discuss what I have found.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>In February this year I wroute about <a href="https://recology.info/2020/02/how-many-parameters/">how many parameters functions should have</a>, looking at some other languages, with a detailed look at R. On a related topic &hellip;</p>
<p>As I work on many R packages that are API clients for various web services, I began wondering: What is the best way to deal with API routes that have a lot of parameters?</p>
<p>The general programming wisdom I&rsquo;ve seen is that a function should have no more than 3-4 parameters (e.g., <a href="https://stackoverflow.com/questions/174968/how-many-parameters-are-too-many">this long SO thread</a>, or <a href="https://softwareengineering.stackexchange.com/questions/331803/techniques-for-minimising-number-of-function-arguments">this one</a>). So should one do anything different from a normal function when that function is connecting to a web API route with a lot of parameters? I&rsquo;ve not found very much spilled ink on this exact topic, but I&rsquo;ll discuss what I have found.</p>
<h2 id="use-cases">Use cases?</h2>
<p>A Software Engineering StackExchange thread <a href="https://softwareengineering.stackexchange.com/questions/196895/how-to-handle-many-arguments-in-an-api-wrapper">How to handle many arguments in an API wrapper?</a> had a couple ideas. One idea is to consider use cases, and then make separate functions covering those use cases. This might work, but I haven&rsquo;t explored it thoroughly for a real API route yet. Pondering on it though I doubt this would work since you&rsquo;d have to pre-emptively think about all the different scenarios users might dream up, which seems like a fools errand.</p>
<h2 id="builder-pattern">Builder pattern</h2>
<p>Another concept brought up in the thread mentioned above was the <a href="https://en.wikipedia.org/wiki/Builder_pattern">Builder pattern</a>. It&rsquo;s hard for me to understand the idea in abstract - <a href="https://medium.com/kkempin/builder-design-pattern-in-ruby-dfa2d557ff1b">here&rsquo;s a nicer discussion of this in Ruby</a>.</p>
<p>This is a good concept to know about, but I don&rsquo;t think is appropriate for the issue at hand, of how to handle many API parameters.</p>
<h2 id="named-parameter-map">Named parameter map</h2>
<p>Another idea in that thread was to use a named parameter map. In R this would look something like this (imagine a lot more parameters though):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>foo <span style="color:#f92672">&lt;-</span> <span style="color:#66d9ef">function</span>(args) {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">get</span>(<span style="color:#e6db74">&#34;/some-api-route&#34;</span>, args)
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>api_args <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">list</span>(query <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;*:*&#34;</span>, limit <span style="color:#f92672">=</span> <span style="color:#ae81ff">10</span>)
</span></span><span style="display:flex;"><span>my_args <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">modifyList</span>(api_args, <span style="color:#a6e22e">list</span>(query <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;bears&#34;</span>, limit <span style="color:#f92672">=</span> <span style="color:#ae81ff">300</span>))
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">foo</span>(my_args)
</span></span></code></pre></div><p>That is, the above would replace this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>foo <span style="color:#f92672">&lt;-</span> <span style="color:#66d9ef">function</span>(query <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;*:*&#34;</span>, limit <span style="color:#f92672">=</span> <span style="color:#ae81ff">10</span>) {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">get</span>(<span style="color:#e6db74">&#34;/some-api-route&#34;</span>, <span style="color:#a6e22e">list</span>(query <span style="color:#f92672">=</span> query, limit <span style="color:#f92672">=</span> limit))
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">foo</span>(query <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;*:*&#34;</span>, limit <span style="color:#f92672">=</span> <span style="color:#ae81ff">10</span>)
</span></span></code></pre></div><p>So in the first code block the function no longer has a lot of parameters in it. The drawback of this in R (and I&rsquo;m sure is similar in other languages) is that users lose the autocomplete helpers that most modern IDE&rsquo;s and text editors have - helping users type less and quickly get a tip on what each parameter is intended to do and importantly (if the developer has documented the function well) what types the parameters expects and what (if any) options there are to pass to the parameter.</p>
<p>Of course a user can &ldquo;just&rdquo; read the docs to figure out what each parameter expects, but it sure can save a lot of time if the help is right there in the tooltips of the IDE/text editor. In addition, in R there&rsquo;s automated checking that parameters in functions are also documented, which is nice for making sure parameters and docs don&rsquo;t get out of sync. You&rsquo;d lose this by using a parameter map - though you could document the parameter map - and perhaps wire together some custom code to make sure the parameters in the parameter map are all handled by the function. This does seem like a lot of fuss though compared to simply having the parameters in the function itself.</p>
<p>This approach probably becomes more attractive if a client has many functions that take the same parameters - in which a named parameter map could handle the parameters and any logic behind checking those parameters.</p>
<h2 id="include-no-parameters-in-the-function">Include no parameters in the function</h2>
<p>In other words: Pass all parameters on to the API w/o including any of them in the function - i.e., let the API handle any problems in parameters.</p>
<p>Another approach I&rsquo;ve not seen written about but that I&rsquo;ve seen in code is having a rather lite wrapper around an API and letting the API itself sort out any problems due to user inputs.</p>
<p>An example is the <a href="https://gh.r-lib.org/">gh R package</a>, a client for the GitHub API. For query parameters you can pass in named parameters through the ellipsis <code>...</code>, all of which are passed as query parameters. The gh package does no checking of these parameters (that I know of); simply passes them to the GitHub API. The GitHub API happens to apparently ignore invalid (silently drop) parameters and invalid valuses of parameters (here, &ldquo;stuff&rdquo; is an invalid value for the <code>page</code> parameter).</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>x <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">gh</span>(<span style="color:#e6db74">&#34;GET /users/{username}/repos&#34;</span>, username <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;gaborcsardi&#34;</span>, page <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;stuff&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">length</span>(x)
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 30</span>
</span></span></code></pre></div><p>I don&rsquo;t hate this solution, but I don&rsquo;t love it either. This approach is highly dependent on a well designed API that fails gracefully, with informative error messages and with correct status codes, etc. I would say  most APIs are not as nice as GitHub&rsquo;s, at least in the scientific API space in which I work.</p>
<p>One plus side of this approach is the R package gh only has one parameter (<code>...</code>) to handle all query parameters, so you do solve the too many query parameters problem.</p>
<p>Another upside to this approach is you do not have to keep up with any changes in parameters on each API route - for example, an API route could drop one parameter, and add another, and the R client wouldn&rsquo;t have to change anything (assuming the change in parameters wasn&rsquo;t associated with a change that breaks code in the client).</p>
<p>A major downside of this approach is that the user often has to mount a time-consuming expedition to figure out what parameters are accepted. Some API clients may document them, and some will simply direct users to the web APIs docs. I think this part alone makes this solution (include no parameters in the function) not a good one since the user experience can be so bad if the documentation is not good. And all developers know its much easier for their docs to get out of date than their code.</p>
<h2 id="include-some-parameters-in-the-function">Include some parameters in the function</h2>
<p>Another approach is to define some query parameters in the function, and handle all others via R&rsquo;s ellipsis (<code>...</code>) - or similar in other languages. I&rsquo;ve seen this relatively often and have used it myself. It&rsquo;s often used when there&rsquo;s a clear smaller set of important parameters - those can be put in the function as named parameters. And then there&rsquo;s a long tail of other parameters that the maintainer thinks are not likely to be used very often. Those can be looked up by the user in the API docs for whatever API the client interacts with.</p>
<p>An example of this is the rOpenSci package <a href="https://docs.ropensci.org/rtweet/">rtweet</a> - a client for the Twitter API. In the <a href="https://docs.ropensci.org/rtweet/reference/search_tweets.html#arguments">search_tweets() function</a> there are a half dozen or so named parameters in the function, but then the ellipsis handles all other parameters.</p>
<p>The drawback to this approach is that no two APIs behave the same way. In the case of Twitter they silently ignore/drop parameters they do not support (same as the GitHub API, see above). For example:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">library</span>(rtweet)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">search_tweets</span>(<span style="color:#e6db74">&#34;hillaryclinton&#34;</span>, n <span style="color:#f92672">=</span> <span style="color:#ae81ff">3</span>, foo <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;bar&#34;</span>)
</span></span></code></pre></div><p>Works just fine even though <code>foo</code> is absolutely not a parameter supported by the Twitter API. They must ignore parameters they don&rsquo;t support. This is same behavior as the GitHub API we saw above.</p>
<p>In the case of Twitter and GitHub one might want to raise errors on unsupported parameters client side in rtweet to avoid any use confusion of parameters being silently dropped.</p>
<h2 id="grouping-similar-parameters-together">Grouping similar parameters together</h2>
<p>Many threads (e.g., <a href="https://softwareengineering.stackexchange.com/a/352676/329940">this one</a>) suggest that similar parameters could be grouped together to reduce the number of parameters passed to a function. For example, if a function has the parameters <code>latitude</code> and <code>longitude</code> you could group those into a single parameter called e.g., <code>coordinates</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#75715e"># Original function, each parameter separate</span>
</span></span><span style="display:flex;"><span>foo <span style="color:#f92672">&lt;-</span> <span style="color:#66d9ef">function</span>(latitude, longitude) {
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># do something with latitude/longitude</span>
</span></span><span style="display:flex;"><span>    latitude
</span></span><span style="display:flex;"><span>    longitude
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Modified function, grouping the two parameters into one</span>
</span></span><span style="display:flex;"><span>foo <span style="color:#f92672">&lt;-</span> <span style="color:#66d9ef">function</span>(coordinates) {
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># do something with latitude/longitude</span>
</span></span><span style="display:flex;"><span>    coordinates<span style="color:#f92672">$</span>latitude
</span></span><span style="display:flex;"><span>    coordinates<span style="color:#f92672">$</span>longitude
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Though I&rsquo;ve not tried this approach myself, it might be a good compromise between a function not handling any parameters (i.e., just passing all to the web API unhandled) and handling every parameter individually.</p>
<h2 id="closing-thoughts">Closing thoughts</h2>
<p>The benefit of documenting API query parameters in a client package is that you can tell the user what each parameters expects in language they can understand. That is, if you simply direct users to the docs for the web API with which the client interacts, the API docs could be not very good and/or specify types expected that the user may not understand. In addition, there may be edge cases or similar with some parameters that are not documented in the API docs but that you can document in the client docs for each parameter.</p>
<p>I would say the vast majority of web API clients I use that do succeed in having very few parameters also have docs in which it&rsquo;s a nightmare trying to figure out what parameters each method accepts. That is, the pursuit of very few parameters at least is correlated with a very poor user experience  - in my experience.</p>
]]></content:encoded>
    </item>
    <item>
      <title>stories behind archived packages</title>
      <link>http://localhost:1313/2020/09/archived-pkgs/</link>
      <pubDate>Thu, 10 Sep 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2020/09/archived-pkgs/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Update on 2021-02-09: I&amp;rsquo;ve archived 8 more packages. Post below updated&lt;/p&gt;&lt;/blockquote&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;Code is often arranged in packages for any given language. Packages
are often cataloged in a package registry of some kind: NPM for
node, crates.io for Rust, etc. For R, that registry is either
&lt;a href=&#34;https://cran.r-project.org/&#34;&gt;CRAN&lt;/a&gt; or &lt;a href=&#34;https://bioconductor.org/&#34;&gt;Bioconductor&lt;/a&gt;
(for the most part).&lt;/p&gt;
&lt;p&gt;CRAN has the concept of an archived package. That is, the namespace
for a package (&lt;code&gt;foo&lt;/code&gt;) is still in the registry (and can not be used again),
but the package is archived - no longer gets updated and checks
I think are no longer performed.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<blockquote>
<p>Update on 2021-02-09: I&rsquo;ve archived 8 more packages. Post below updated</p></blockquote>
<!-- raw HTML omitted -->
<p>Code is often arranged in packages for any given language. Packages
are often cataloged in a package registry of some kind: NPM for
node, crates.io for Rust, etc. For R, that registry is either
<a href="https://cran.r-project.org/">CRAN</a> or <a href="https://bioconductor.org/">Bioconductor</a>
(for the most part).</p>
<p>CRAN has the concept of an archived package. That is, the namespace
for a package (<code>foo</code>) is still in the registry (and can not be used again),
but the package is archived - no longer gets updated and checks
I think are no longer performed.</p>
<p>We rarely hear the stories behind how software gets laid to rest. What are
the most common reasons for software to be abandoned?</p>
<h2 id="my-cran-archived-packages">My CRAN archived packages</h2>
<p>First, my archived CRAN packages:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">library</span>(pkgsearch)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">library</span>(dplyr)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">library</span>(data.table)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">library</span>(tibble)
</span></span><span style="display:flex;"><span>x <span style="color:#f92672">=</span> <span style="color:#a6e22e">cran_events</span>(releases <span style="color:#f92672">=</span> <span style="color:#66d9ef">FALSE</span>, archivals <span style="color:#f92672">=</span> <span style="color:#66d9ef">TRUE</span>, limit <span style="color:#f92672">=</span> <span style="color:#ae81ff">4000L</span>)
</span></span><span style="display:flex;"><span>res <span style="color:#f92672">=</span> <span style="color:#a6e22e">lapply</span>(x, <span style="color:#66d9ef">function</span>(w)
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">tibble</span>(pkg<span style="color:#f92672">=</span>w<span style="color:#f92672">$</span>name, maintainer<span style="color:#f92672">=</span>w<span style="color:#f92672">$</span>package<span style="color:#f92672">$</span>Maintainer))
</span></span><span style="display:flex;"><span>df <span style="color:#f92672">=</span> <span style="color:#a6e22e">rbindlist</span>(res, use.names <span style="color:#f92672">=</span> <span style="color:#66d9ef">TRUE</span>, fill <span style="color:#f92672">=</span> <span style="color:#66d9ef">TRUE</span>)
</span></span><span style="display:flex;"><span>df <span style="color:#f92672">=</span> <span style="color:#a6e22e">as_tibble</span>(df)
</span></span><span style="display:flex;"><span>scott <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">filter</span>(df, <span style="color:#a6e22e">grepl</span>(<span style="color:#e6db74">&#34;chamberlain&#34;</span>, maintainer, ignore.case <span style="color:#f92672">=</span> <span style="color:#66d9ef">TRUE</span>)) <span style="color:#f92672">%&gt;%</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">select</span>(pkg) <span style="color:#f92672">%&gt;%</span> 
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">data.frame</span>()
</span></span><span style="display:flex;"><span>scott
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;            pkg</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 1      originr</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 2       geoaxe</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 3         lawn</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 4     pleiades</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 5       geoops</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 6          rif</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 7     rbraries</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 8        ccafs</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 9     rjsonapi</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 10       rdpla</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 11 seaaroundus</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 12    crevents</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 13      etseed</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 14      rtimes</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 15   rsunlight</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 16        nneo</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 17     binomen</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 18        solr</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 19      enigma</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 20         alm</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 21    ropensnp</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 22      govdat</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 23  spoccutils</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 24     rgauges</span>
</span></span></code></pre></div><p>I have 24 archived packages on CRAN.</p>
<h2 id="stories">Stories</h2>
<p>The following are brief stories of why each package was archived on CRAN.</p>
<ul>
<li><strong>spoccutils</strong>: was a package of utility functions that didn&rsquo;t quite fit within the scope of another package <a href="https://github.com/ropensci/spocc">spocc</a>. It was renamed to <a href="https://github.com/ropensci/mapr">mapr</a>. I suppose I could have asked CRAN to change the name, hmmm</li>
<li><strong><a href="https://github.com/ropensci-archive/rgauges">rgauges</a></strong>: was a client for the <a href="https://get.gaug.es/">Gaug.es</a> website analytics API - we started the package to gather data on visitors to the rOpenSci website. Eventually we stopped using Gaug.es and then it didn&rsquo;t make sense to maintain the package, so it was archived.</li>
<li><strong><a href="https://github.com/ropensci-archive/alm">alm</a></strong>: was a client for a generic article-level metrics web service framework called Lagotto. In the early days of rOpenSci we were quite engaged with the community of folks working on article-level metrics. If I remember correctly, Lagotto usage slowed down and wasn&rsquo;t used much so I gave up on maintaining <code>alm</code></li>
<li><strong>ropensnp</strong>: was a client for the service <a href="https://opensnp.org/">OpenSNP</a>. There were other sources of SNP data that I thought would be nice to access all from one package; so a new package (<a href="https://github.com/ropensci/rsnps">rsnps</a>) was created and incorporated functions for OpenSNP and <code>ropensnp</code> was archived.</li>
<li><strong>solr</strong>: was a package client for the <a href="https://lucene.apache.org/solr/">Apache Solr</a> database. At some point it got a major overhual and I decided to change the package name to <a href="https://github.com/ropensci/solrium">solrium</a>.</li>
<li><strong><a href="https://github.com/ropensci/binomen">binomen</a></strong>: aim of the package was functions for creating taxonomic classes/objects and functions for manipulating taxonomic data, sort of like dplyr. Evolution of ideas in <code>binomen</code> gave way to a new package <a href="https://github.com/ropensci/taxa">taxa</a>, now maintained by <a href="https://github.com/zachary-foster">Zach Foster</a>.</li>
<li><strong><a href="https://github.com/ropensci-archive/nneo">nneo</a></strong>: was a client for APIs for <a href="https://data.neonscience.org/data-api/">NEON</a> data. At some point I stumbled upon someone else from NEON making essentially the same package, so I archived mine.</li>
<li><strong><a href="https://github.com/ropensci-archive/etseed">etseed</a></strong>: was a package for interacting with the distributed key-value store <a href="https://etcd.io/">etcd</a>. I was on a kick at the time of making R packages for databases, and saw a missing package I thought. After getting familiar with etcd, I realized I would probably never use it myself, and further, it probably didn&rsquo;t make sense to interact with etcd from R anyway.</li>
<li><strong><a href="https://github.com/ropensci-archive/crevents">crevents</a></strong>: <a href="https://www.crossref.org/">Crossref</a> mints DOIs for scholarly articles (among other works). A neat service they started was collecting and making searchable the &ldquo;events&rdquo; on DOIs - that is, the links pointing to DOIs, e.g., from Twitter, etc. The service at some point became very unreliable (was often down), so the package was archived.</li>
<li><strong><a href="https://github.com/ropensci-archive/seaaroundus">seaaroundus</a></strong>: <a href="https://www.seaaroundus.org/">Seaaroundus</a> maintains fisheries and fisheries-related data. I was helping maintain an R package for the API, but it was a difficult one to maintain, and most users simply sent emails requesting dumps of data anyway - so the package was archived.</li>
<li><strong><a href="https://github.com/ropensci-archive/rdpla">rdpla</a></strong>: The <a href="https://dp.la/">Digital Public Library of America</a> is a very cool organization that is similar to Crossref in a way, in that they centralize metadata about &ldquo;things&rdquo;; metadata on museum collections for DPLA and scholarly works for Crossref. I figured many researchers would enjoy being able to easily get metadata from DPLA for research on museum collections. In the end not many people used the package.</li>
<li><strong><a href="https://github.com/ropensci-archive/rjsonapi">rjsonapi</a></strong>: <a href="https://jsonapi.org/">JSON:API</a> is a cool idea - a sort of specification for building APIs in JSON. REST APIs are incredibly variable - this is an attempto standardize it a bit. I thought perhaps JSON:API would be adopted widely and that an R client would be useful for consuming JSON:API services - however, I&rsquo;ve seen only very few APIs using JSON:API.</li>
<li><strong><a href="https://github.com/ropensci-archive/originr">originr</a></strong>: The idea with <code>originr</code> originally was to centralize in one package tools for biologists to get data on &ldquo;nativity&rdquo; of species in their studies: are species X and Y native to A, B, and C countries. I was lucky to get a collaborator (<a href="https://github.com/ibartomeus">Ignasi Bartomeus</a>) to help on that package. The package simply was not used much at all, and the data sources used were very flaky, making for a buggy user experience.</li>
<li><strong><a href="https://github.com/ropensci-archive/geoaxe">geoaxe</a></strong>: This package always had a very narrow scope. It was created to solve a problem in two widely used packages: <a href="https://github.com/ropensci/rgbif">rgbif</a> and <a href="https://github.com/ropensci/spocc">spocc</a>. In both of those packages we needed to take user input of a Well-known text (WKT) string representing a polygon in which the user wanted to search for something in a remote data source. And with that WKT we would chop up the polygon into smaller polygons to be submitted in multiple (spatial) requests instead of one very large (spatial) request. I didn&rsquo;t want to depend on the heavy <code>rgdal</code> depenency, so I cooked up <code>geoaxe</code> that only used <code>sp</code> and <code>rgeos</code>. <code>geoaxe</code> lasted for many years, but there&rsquo;s better tools out there now, so it was archived.</li>
<li><strong><a href="https://github.com/ropensci-archive/lawn">lawn</a></strong>: This package started out when I was trying to see what we could do in spatial R packages, specifically around GeoJSON. Jeroen had recently created the <a href="https://github.com/jeroen/v8">V8</a> package so you could leverage bundled Javascript libraries in R. <a href="https://turfjs.org/">turf.js</a> was a neat project for Javascript for spatial analysis and built in a modular, approachable manner - I thought. So collaborator <a href="https://github.com/jhollist">Jeff Hollister</a> and I wrapped turf.js in R. It was not used that much - and especially not used much after the rise of sf and related &ldquo;tidy&rdquo; spatial packages, leading to archival.</li>
<li><strong><a href="https://github.com/sckott/geoops">geoops</a></strong>: This package was a follow on from <code>lawn</code>, in exploring more GeoJSON focused work. I wanted to learn how to make an R package mostly out of C++, with just a thin layer of R on top. Like <code>lawn</code>, <code>geoops</code> was not used much at all as far as I could tell, maybe partly because it focused only on GeoJSON - but this was also during the rise of <code>sf</code> and friends. I moved it to my own personal account just as a little C++ in R playground in case I want to brush up on that.</li>
<li><strong><a href="https://github.com/ropensci-archive/pleiades">pleiades</a></strong>: I don&rsquo;t remember how or why this package started. It was a client for Pleiades (<a href="https://pleiades.stoa.org/home">https://pleiades.stoa.org/home</a>), a database of historical geographic information about the ancient world. It was used very, very little as far as I could tell - so was archived.</li>
<li><strong><a href="https://github.com/ropensci-archive/rif">rif</a></strong>: This package was started after a some exploration of what R work we (rOpenSci) could do in the neuroscience field. It was a client for the Neuroscience Information Framework (<a href="https://neuinfo.org/">https://neuinfo.org/</a>), a database of neuroscience information. Another package not used - so was archived.</li>
<li><strong><a href="https://github.com/ropensci-archive/rbraries">rbraries</a></strong>: This package started because I thought rOpenSci would make use of the metadata around R package downloads/etc. that <a href="https://libraries.io/">https://libraries.io/</a> collected. We never ended up using the data - and no one seemed to use the package - so was archived.</li>
<li><strong><a href="https://github.com/ropensci-archive/ccafs">ccafs</a></strong>: A client for Climate Change, Agriculture, and Food Security (CCAFS) General Circulation Models (GCM) data (<a href="https://www.ccafs-climate.org/">https://www.ccafs-climate.org/</a>). All I could find for motivation for this package was an email with someone where they shared a few links to different sources of climate data - then apparently this package was born shortly thereafter. It wasn&rsquo;t used much at all - so was archived.</li>
</ul>
<p>The following four packages were all R clients for sources of government open data - see the organization <a href="https://github.com/ropengov">rOpenGov</a> for R packages on government data.</p>
<ul>
<li><strong>govdat</strong>: was split into two packages (<code>rsunlight</code> and <code>rtimes</code>) and <code>govdat</code> was archived</li>
<li><strong><a href="https://github.com/rOpenGov/rsunlight">rsunlight</a></strong>: was a client for many APIs of the organization <a href="https://sunlightfoundation.com/api/">Sunlight Labs</a> - part of the reason for archiving this package was the disintegration of Sunlight Labs, which made the previously sensible organization of many APIs into one R package not sensible anymore. Also, government data was considered out of scope for our work at rOpenSci.</li>
<li><strong><a href="https://github.com/rOpenGov/rtimes">rtimes</a></strong>: was a client for a number of the government data APIs from the New York Times. One reason for abandoning this package was that NYT almost never responded to questions/feedback on their APIs. Another reason was the aforementioned focus of rOpenSci.</li>
<li><strong><a href="https://github.com/rOpenGov/enigma">enigma</a></strong>: was a client for the Enigma API - the company I think was first focused on making open government data easier to access - as well as data on companies. I didn&rsquo;t really use the package at all though, and there wasn&rsquo;t much usage of the package, so archived it.</li>
</ul>
<p>As a summary of the lists above, a list of the major reasons each package was archived:</p>
<ul>
<li>Not used
<ul>
<li>rjsonapi</li>
<li>rdpla</li>
<li>etseed</li>
<li>enigma</li>
<li>rgauges</li>
<li>rtimes</li>
<li>originr</li>
<li>geaoxe</li>
<li>pleiades</li>
<li>rif</li>
<li>rbraries</li>
<li>ccafs</li>
</ul>
</li>
<li>The fall of the GeoJSON-verse <sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>
<ul>
<li>lawn</li>
<li>geoops</li>
</ul>
</li>
<li>Bad/retired service
<ul>
<li>rtimes</li>
<li>seaaroundus</li>
<li>crevents</li>
<li>alm</li>
</ul>
</li>
<li>Name change
<ul>
<li>solr</li>
<li>ropensnp</li>
<li>spoccutils</li>
</ul>
</li>
<li>Evolution to new package
<ul>
<li>binomen</li>
<li>govdat</li>
</ul>
</li>
<li>Duplicated work
<ul>
<li>nneo</li>
</ul>
</li>
<li>Out of scope
<ul>
<li>rsunlight</li>
</ul>
</li>
</ul>
<p>Footnotes:</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>although, <code>geojsonsf</code> is very successful so I think my projects were just crap I guess :)&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
]]></content:encoded>
    </item>
    <item>
      <title>taxizedb: an update</title>
      <link>http://localhost:1313/2020/08/taxizedb-update/</link>
      <pubDate>Mon, 17 Aug 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2020/08/taxizedb-update/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/ropensci/taxizedb&#34;&gt;taxizedb&lt;/a&gt; arose from pain in using &lt;a href=&#34;https://github.com/ropensci/taxize&#34;&gt;taxize&lt;/a&gt; when dealing with large amounts of data in a single request or doing a lot of requests of any data size. &lt;a href=&#34;https://github.com/ropensci/taxize&#34;&gt;taxize&lt;/a&gt; works with remote data sources on the web, so there&amp;rsquo;s a number of issues that can slow the response down: internet speed, server response speed (was a response already cached or not; or do they even use caching), etc.&lt;/p&gt;
&lt;p&gt;The idea with &lt;a href=&#34;https://github.com/ropensci/taxizedb&#34;&gt;taxizedb&lt;/a&gt; was to allow users to do the same things as taxize allows, but much faster by accessing the entire database for a data source on their own computer. The previous versions of taxizedb used a variety of different databases (MySQL/MariaDB, PostgreSQL, SQLite), so the technical barrier to entry was pretty high. In the newest version just released, we&amp;rsquo;ve drastically simplified the database situation, among other things.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p><a href="https://github.com/ropensci/taxizedb">taxizedb</a> arose from pain in using <a href="https://github.com/ropensci/taxize">taxize</a> when dealing with large amounts of data in a single request or doing a lot of requests of any data size. <a href="https://github.com/ropensci/taxize">taxize</a> works with remote data sources on the web, so there&rsquo;s a number of issues that can slow the response down: internet speed, server response speed (was a response already cached or not; or do they even use caching), etc.</p>
<p>The idea with <a href="https://github.com/ropensci/taxizedb">taxizedb</a> was to allow users to do the same things as taxize allows, but much faster by accessing the entire database for a data source on their own computer. The previous versions of taxizedb used a variety of different databases (MySQL/MariaDB, PostgreSQL, SQLite), so the technical barrier to entry was pretty high. In the newest version just released, we&rsquo;ve drastically simplified the database situation, among other things.</p>
<p><a href="https://github.com/ropensci/taxadb">taxadb</a> was developed as an alternative approach to taxizedb and should also be considered when dealing with taxonomic names. It takes a different approach for the data, with tabular files hosted on GitHub releases, but is similar in that after downloading the data is put into a SQL database, SQLite by default (with other options for databases). taxadb user facing functions are different from those in taxizedb, and largely don&rsquo;t overlap.</p>
<p>taxizedb quick links:</p>
<ul>
<li><a href="https://github.com/ropensci/taxizedb">taxizedb repo</a></li>
<li><a href="https://cloud.r-project.org/web/packages/taxizedb/">taxizedb on cran</a></li>
<li><a href="https://ropensci.github.io/taxizedb/">taxizedb docs</a></li>
</ul>
<p>Install the latest version, if you don&rsquo;t get <code>v0.2.0</code> with</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">install.packages</span>(<span style="color:#e6db74">&#34;taxizedb&#34;</span>)
</span></span></code></pre></div><p>then use</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">install.packages</span>(<span style="color:#e6db74">&#34;taxizedb&#34;</span>, repos <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;https://dev.ropensci.org&#34;</span>)
</span></span></code></pre></div><p>Load the package</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">library</span>(taxizedb)
</span></span></code></pre></div><!-- raw HTML omitted -->
<h2 id="all-sqlite">All SQLite!</h2>
<p>SQLite is shipped in nearly every device these days, so taxizedb now uses only SQLite for the database backend for each data source. Every person that installs taxizedb should have SQLite already installed. In addition, there&rsquo;s no usernames/passwords/ports to setup with. How we&rsquo;ve accomplished this is partly through automation:</p>
<ul>
<li>NCBI: SQLite built within R from tabular files</li>
<li>ITIS: they provide a SQLite dump</li>
<li>Plantlist: is no longer updated; we build a SQLite manually from csv files</li>
<li>COL: a SQLite is built once a day via GitHub Actions</li>
<li>GBIF: a SQLite is built once a day via GitHub Actions</li>
<li>Wikidata: SQLite built within R from a tabular file</li>
<li>World Flora Online: SQLite built within R from a tabular file</li>
</ul>
<p>Some of the databases have indices to speed up queries, making them a bit larger relative to no indices, but these days most people likely are willing to use up a little more disk space on their computer to have faster queries.</p>
<!-- raw HTML omitted -->
<h2 id="new-data-sources">New data sources</h2>
<p>Three new data sources were added:</p>
<ul>
<li><a href="https://www.ncbi.nlm.nih.gov/taxonomy">NCBI taxonomy</a> - all of this work was done by <a href="https://github.com/arendsee">Zebulun Arendsee</a></li>
<li><a href="https://www.worldfloraonline.org/">World Flora Online</a> - the replacement for The Plant List</li>
<li><a href="https://zenodo.org/record/1213477">Wikidata</a> - the table <code>wikidata-taxon-info</code>, extracted taxon objects from Wikidata, last updated April 2018, on Zenodo</li>
</ul>
<!-- raw HTML omitted -->
<h2 id="new-functions-taxize-equivalents">New functions: taxize equivalents</h2>
<p>Three new high level functions matching those in taxize were added: <code>children</code>, <code>classification</code>, <code>downstream</code>. The taxize version of those functions are still good for smaller requests, but with larger requests, its probably best to use taxizedb. The most common problem where taxize becomes frustrating is with <code>downstream</code> where a user wants all species within a high taxonomic rank like phylum. The original work for these functions was done by <a href="https://github.com/arendsee">Zebulun Arendsee</a>.</p>
<p>Here&rsquo;s a comparison of taxize vs. taxizedb with <code>downstream</code> - getting all species within the genus <em>Bombus</em> (bumble bees)</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>id_tx <span style="color:#f92672">&lt;-</span> taxize<span style="color:#f92672">::</span><span style="color:#a6e22e">get_tsn</span>(<span style="color:#e6db74">&#34;Bombus&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">system.time</span>(taxize<span style="color:#f92672">::</span><span style="color:#a6e22e">downstream</span>(id_tx, db <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;itis&#34;</span>, downto <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;species&#34;</span>))
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;    user  system elapsed </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   2.144   0.130  20.533</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>id_txdb <span style="color:#f92672">&lt;-</span> taxizedb<span style="color:#f92672">::</span><span style="color:#a6e22e">name2taxid</span>(<span style="color:#e6db74">&#39;Bombus&#39;</span>, db <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;itis&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">system.time</span>(taxizedb<span style="color:#f92672">::</span><span style="color:#a6e22e">downstream</span>(id_txdb, db <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;itis&#34;</span>, downto <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;species&#34;</span>))
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;    user  system elapsed </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   0.132   0.051   0.186</span>
</span></span></code></pre></div><!-- raw HTML omitted -->
<p>In addition, three new &ldquo;mapping&rdquo; functions were added that are similar to those in taxize, but with different names: <code>name2taxid</code> (scientific or common name to taxonomy ID); <code>taxid2name</code> (taxonomy ID to scientific name); <code>taxid2rank</code> (taxonomy ID to rank).</p>
<p>We saw <code>name2taxid</code> above. Below we get the taxonomic ID for COL, ITIS and GBIF for <em>Bombus</em></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">name2taxid</span>(<span style="color:#e6db74">&#39;Bombus&#39;</span>, db <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;col&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;3993765&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">name2taxid</span>(<span style="color:#e6db74">&#39;Bombus&#39;</span>, db <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;itis&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;154397&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">name2taxid</span>(<span style="color:#e6db74">&#39;Bombus&#39;</span>, db <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;gbif&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;1340278&#34;</span>
</span></span></code></pre></div><p>Get the scientific name from a taxonomic ID</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">taxid2name</span>(<span style="color:#ae81ff">3993765</span>, db <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;col&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;Bombus&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">taxid2rank</span>(<span style="color:#ae81ff">3993765</span>, db <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;col&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;genus&#34;</span>
</span></span></code></pre></div><p>These functions are quite fast too:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>x <span style="color:#f92672">&lt;-</span> taxize<span style="color:#f92672">::</span><span style="color:#a6e22e">names_list</span>(rank <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;species&#34;</span>, size <span style="color:#f92672">=</span> <span style="color:#ae81ff">10000L</span>)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">system.time</span>(<span style="color:#a6e22e">name2taxid</span>(x, db <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;gbif&#34;</span>, out_type <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;summary&#34;</span>))
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;    user  system elapsed </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   0.096   0.206   1.053</span>
</span></span></code></pre></div><!-- raw HTML omitted -->
<h2 id="thoughts">Thoughts?</h2>
<p>Get in touch if you have any feedback at <a href="https://github.com/ropensci/taxizedb/issues">https://github.com/ropensci/taxizedb/issues</a></p>
]]></content:encoded>
    </item>
  </channel>
</rss>
