<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Github on Recology</title>
    <link>http://localhost:1313/tags/github/</link>
    <description>Recent content in Github on Recology</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 05 Jan 2015 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/github/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>gistr - R client for GitHub gists</title>
      <link>http://localhost:1313/2015/01/gistr-github-gists/</link>
      <pubDate>Mon, 05 Jan 2015 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2015/01/gistr-github-gists/</guid>
      <description>GitHub has this site https://gist.github.com/ in which we can share code, text, images, maps, plots, etc super easily, without having to open up a repo, etc. GitHub gists are a great way to throw up an example use case to show someone, or show code that&amp;rsquo;s throwing errors to a support person, etc. In addition, there&amp;rsquo;s API access, which means we can interact with Gists not just from their web interface, but from the command line, or any programming language.</description>
    </item>
    <item>
      <title>Intro to alpha ckanr - R client for CKAN RESTful API</title>
      <link>http://localhost:1313/2014/11/ckanr-intro/</link>
      <pubDate>Wed, 26 Nov 2014 11:42:36 +0000</pubDate>
      <guid>http://localhost:1313/2014/11/ckanr-intro/</guid>
      <description>Recently I had need to create a client for scraping museum metadata to help out some folks that use that kind of data. It&amp;rsquo;s called musemeta. One of the data sources in that package uses the open source data portal software CKAN, and so we can interact with the CKAN API to get data. Since many groups can use CKAN API/etc infrastucture because it&amp;rsquo;s open source, I thought why not have a general purpose R client for this, since there are other clients for Python, PHP, Ruby, etc.</description>
    </item>
    <item>
      <title>Fun with the GitHub API</title>
      <link>http://localhost:1313/2014/11/github-fun/</link>
      <pubDate>Wed, 26 Nov 2014 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2014/11/github-fun/</guid>
      <description>Recently I&amp;rsquo;ve had fun playing with the GitHub API, and here are some notes to self about this fun having.
Setup Get/load packages
install.packages(c(&amp;#39;devtools&amp;#39;,&amp;#39;jsonlite&amp;#39;,&amp;#39;httr&amp;#39;,&amp;#39;yaml&amp;#39;)) library(&amp;#34;devtools&amp;#34;) library(&amp;#34;httr&amp;#34;) library(&amp;#34;yaml&amp;#34;) Define a vector of package names pkgs &amp;lt;- c(&amp;#34;alm&amp;#34;, &amp;#34;bmc&amp;#34;, &amp;#34;bold&amp;#34;, &amp;#34;clifro&amp;#34;, &amp;#34;ecoengine&amp;#34;, &amp;#34;elastic&amp;#34;, &amp;#34;fulltext&amp;#34;, &amp;#34;geonames&amp;#34;, &amp;#34;gistr&amp;#34;, &amp;#34;RNeXML&amp;#34;, &amp;#34;rnoaa&amp;#34;, &amp;#34;rnpn&amp;#34;, &amp;#34;traits&amp;#34;, &amp;#34;rplos&amp;#34;, &amp;#34;rsnps&amp;#34;, &amp;#34;rWBclimate&amp;#34;, &amp;#34;solr&amp;#34;, &amp;#34;spocc&amp;#34;, &amp;#34;taxize&amp;#34;, &amp;#34;togeojson&amp;#34;, &amp;#34;treeBASE&amp;#34;) pkgs &amp;lt;- sort(pkgs) Define functions github_auth &amp;lt;- function(appname = getOption(&amp;#34;gh_appname&amp;#34;), key = getOption(&amp;#34;gh_id&amp;#34;), secret = getOption(&amp;#34;gh_secret&amp;#34;)) { if (is.</description>
    </item>
    <item>
      <title>Jekyll - an intro</title>
      <link>http://localhost:1313/2013/11/jekyll-intro/</link>
      <pubDate>Wed, 20 Nov 2013 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2013/11/jekyll-intro/</guid>
      <description>I started using Jekyll when I didn&amp;rsquo;t really know HTML, CSS, or Ruby - so I&amp;rsquo;ve had to learn a lot - but using Jekyll has been a great learning experience for all those languages.
I&amp;rsquo;ve tried to boil down steps to building a Jekyll site or blog to the minimal steps:
Install Jekyll Mac/Linux/Unix: Install dependencies: Ruby RubyGems Install Jekyll using RubyGems gem install jekyll (you may need to do sudo.</description>
    </item>
    <item>
      <title>On writing, sharing, collaborating, and hosting code for science</title>
      <link>http://localhost:1313/2013/07/code/</link>
      <pubDate>Sat, 20 Jul 2013 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2013/07/code/</guid>
      <description>I recently engaged with a number of tweeps in response to my tweet:
Rule number 1 wrt science code: DO NOT post your code on your personal website
That tweet wasn&amp;rsquo;t super clear, and it&amp;rsquo;s difficult to convey my thoughts in a tweet. What I should have said was do post your code - ideally on Github/Bitbucket/etc. Here goes with a much longer version to explain what I meant. The tweet was just about where to host code, whereas the following is about more than that, but related.</description>
    </item>
    <item>
      <title>Visualizing rOpenSci collaboration</title>
      <link>http://localhost:1313/2013/03/ropensci-collaboration/</link>
      <pubDate>Fri, 08 Mar 2013 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2013/03/ropensci-collaboration/</guid>
      <description>We (rOpenSci) have been writing code for R packages for a couple years, so it is time to take a look back at the data. What data you ask? The commits data from GitHub ~ data that records who did what and when.
Using the Github commits API we can gather data on who commited code to a Github repository, and when they did it. Then we can visualize this hitorical record.</description>
    </item>
    <item>
      <title>Visualize your Github stats (forks and watchers) in a browser with R!</title>
      <link>http://localhost:1313/2012/05/opencpu-github-stats/</link>
      <pubDate>Sat, 05 May 2012 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2012/05/opencpu-github-stats/</guid>
      <description>So OpenCPU is pretty awesome. You can run R in a browser using URL calls with an alphanumeric code (e.g., x3e50ee0780) defining a stored function, and any arguments you pass to it.
Go here to store a function. And you can output lots of different types of things: png, pdf, json, etc - see here.
Here&amp;rsquo;s a function I created (originally from https://gist.github.com/2602432):
# Store a function with man lines # Go Here: http://beta.</description>
    </item>
  </channel>
</rss>
