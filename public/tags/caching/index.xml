<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Caching on Recology</title>
    <link>http://localhost:1313/tags/caching/</link>
    <description>Recent content in Caching on Recology</description>
    <generator>Hugo -- 0.144.1</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 15 Aug 2017 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/caching/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>hoardr: simple file caching</title>
      <link>http://localhost:1313/2017/08/hoardr/</link>
      <pubDate>Tue, 15 Aug 2017 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2017/08/hoardr/</guid>
      <description>&lt;p&gt;&lt;code&gt;hoardr&lt;/code&gt; is a client for caching files and managing those files.&lt;/p&gt;
&lt;p&gt;You can definitely achieve the same tasks without a separate pacakge, and there&amp;rsquo;s
a number of packages for caching various objects in R already. However,
I didn&amp;rsquo;t think there was a tool for that did everything I needed.&lt;/p&gt;
&lt;p&gt;The use cases I typically need &lt;code&gt;hoardr&lt;/code&gt; for are when dealing with large files,
either text (e.g., csv) or binary (e.g., shp) files that would be nice to not
make the user of packages I maintain download again if they already have the
file. This makes the server&amp;rsquo;s life easier that&amp;rsquo;s serving the files and makes
work faster for the user of my package.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p><code>hoardr</code> is a client for caching files and managing those files.</p>
<p>You can definitely achieve the same tasks without a separate pacakge, and there&rsquo;s
a number of packages for caching various objects in R already. However,
I didn&rsquo;t think there was a tool for that did everything I needed.</p>
<p>The use cases I typically need <code>hoardr</code> for are when dealing with large files,
either text (e.g., csv) or binary (e.g., shp) files that would be nice to not
make the user of packages I maintain download again if they already have the
file. This makes the server&rsquo;s life easier that&rsquo;s serving the files and makes
work faster for the user of my package.</p>
<p>Given the existence of the awesome <a href="https://github.com/r-lib/R6">R6</a>, <code>hoardr</code> becomes simple to use
inside of other packages. Namely, <code>hoardr</code> can export just a single object
that another package has to import, then we can call methods on that object, instead
of having to import loads of functions.</p>
<h2 id="install">Install</h2>
<p>From CRAN</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">install.packages</span>(<span style="color:#e6db74">&#34;hoardr&#34;</span>)
</span></span></code></pre></div><p>Dev version</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>devtools<span style="color:#f92672">::</span><span style="color:#a6e22e">install_github</span>(<span style="color:#e6db74">&#34;ropensci/hoardr&#34;</span>)
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">library</span>(<span style="color:#e6db74">&#34;hoardr&#34;</span>)
</span></span></code></pre></div><h2 id="package-api">Package API</h2>
<p>There&rsquo;s only a single exported object: <code>hoard</code>. This is a normal function, although
is a lite wrapper around the R6 class <code>HoardClient</code>, which contains all the
smarts.</p>
<h2 id="example-usage">Example usage</h2>
<p>Initialze an object</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>(x <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">hoard</span>())
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; &lt;hoard&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   path: </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   cache path: /var/folders/gs/4khph0xs0436gmd2gdnwsg080000gn/T//RtmpPITEm6/R/foobar</span>
</span></span></code></pre></div><p>After making the object with <code>hoardr()</code>, it&rsquo;s good to set a cache path. Here,
we&rsquo;ll use a temporary directoy, which we can set by doing <code>type = &quot;tempdir&quot;</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>x<span style="color:#f92672">$</span><span style="color:#a6e22e">cache_path_set</span>(path <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;foobar&#34;</span>, type <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;tempdir&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;/var/folders/gs/4khph0xs0436gmd2gdnwsg080000gn/T//RtmpPITEm6/R/foobar&#34;</span>
</span></span></code></pre></div><p>Now our cache path is set to a temp dir</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>x
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; &lt;hoard&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   path: foobar</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   cache path: /var/folders/gs/4khph0xs0436gmd2gdnwsg080000gn/T//RtmpPITEm6/R/foobar</span>
</span></span></code></pre></div><p>And we can request the base cache path as well</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>x<span style="color:#f92672">$</span><span style="color:#a6e22e">cache_path_get</span>()
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;/var/folders/gs/4khph0xs0436gmd2gdnwsg080000gn/T//RtmpPITEm6/R/foobar&#34;</span>
</span></span></code></pre></div><p>The next thing you&rsquo;ll likely want to do is create that base directory since
setting the path doesn&rsquo;t create the directory:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>x<span style="color:#f92672">$</span><span style="color:#a6e22e">mkdir</span>()
</span></span></code></pre></div><p>What files are in the directory (hint: there shouldn&rsquo;t be any):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>x<span style="color:#f92672">$</span><span style="color:#a6e22e">list</span>()
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; character(0)</span>
</span></span></code></pre></div><p>Let&rsquo;s put a file in the cache</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">cat</span>(<span style="color:#ae81ff">1</span><span style="color:#f92672">:</span><span style="color:#ae81ff">10000L</span>, file <span style="color:#f92672">=</span> <span style="color:#a6e22e">file.path</span>(x<span style="color:#f92672">$</span><span style="color:#a6e22e">cache_path_get</span>(), <span style="color:#e6db74">&#34;foo.txt&#34;</span>))
</span></span></code></pre></div><p>Now see what&rsquo;s in there</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>x<span style="color:#f92672">$</span><span style="color:#a6e22e">list</span>()
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;/var/folders/gs/4khph0xs0436gmd2gdnwsg080000gn/T//RtmpPITEm6/R/foobar/foo.txt&#34;</span>
</span></span></code></pre></div><p>While <code>list()</code> method lists full file paths, we can get more details with the <code>details()</code> method:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>x<span style="color:#f92672">$</span><span style="color:#a6e22e">details</span>()
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; &lt;cached files&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   directory: /var/folders/gs/4khph0xs0436gmd2gdnwsg080000gn/T//RtmpPITEm6/R/foobar</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   file: /foo.txt</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   size: 0.049 mb</span>
</span></span></code></pre></div><p>You can delete files by name:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>x<span style="color:#f92672">$</span><span style="color:#a6e22e">delete</span>(<span style="color:#e6db74">&#34;foo.txt&#34;</span>)
</span></span><span style="display:flex;"><span>x<span style="color:#f92672">$</span><span style="color:#a6e22e">list</span>()
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; character(0)</span>
</span></span></code></pre></div><p>As well as delete all files:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">cat</span>(<span style="color:#e6db74">&#34;one\ntwo\nthree&#34;</span>, file <span style="color:#f92672">=</span> <span style="color:#a6e22e">file.path</span>(x<span style="color:#f92672">$</span><span style="color:#a6e22e">cache_path_get</span>(), <span style="color:#e6db74">&#34;foo.txt&#34;</span>))
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">cat</span>(<span style="color:#e6db74">&#34;asdfasdf asd fasdf&#34;</span>, file <span style="color:#f92672">=</span> <span style="color:#a6e22e">file.path</span>(x<span style="color:#f92672">$</span><span style="color:#a6e22e">cache_path_get</span>(), <span style="color:#e6db74">&#34;bar.txt&#34;</span>))
</span></span><span style="display:flex;"><span>x<span style="color:#f92672">$</span><span style="color:#a6e22e">list</span>()
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;/var/folders/gs/4khph0xs0436gmd2gdnwsg080000gn/T//RtmpPITEm6/R/foobar/bar.txt&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [2] &#34;/var/folders/gs/4khph0xs0436gmd2gdnwsg080000gn/T//RtmpPITEm6/R/foobar/foo.txt&#34;</span>
</span></span><span style="display:flex;"><span>x<span style="color:#f92672">$</span><span style="color:#a6e22e">delete_all</span>()
</span></span><span style="display:flex;"><span>x<span style="color:#f92672">$</span><span style="color:#a6e22e">list</span>()
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; character(0)</span>
</span></span></code></pre></div><p>There&rsquo;s also methods for compressing and uncompressing all the files in your cache:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">cat</span>(<span style="color:#e6db74">&#34;one\ntwo\nthree&#34;</span>, file <span style="color:#f92672">=</span> <span style="color:#a6e22e">file.path</span>(x<span style="color:#f92672">$</span><span style="color:#a6e22e">cache_path_get</span>(), <span style="color:#e6db74">&#34;foo.txt&#34;</span>))
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">cat</span>(<span style="color:#e6db74">&#34;asdfasdf asd fasdf&#34;</span>, file <span style="color:#f92672">=</span> <span style="color:#a6e22e">file.path</span>(x<span style="color:#f92672">$</span><span style="color:#a6e22e">cache_path_get</span>(), <span style="color:#e6db74">&#34;bar.txt&#34;</span>))
</span></span><span style="display:flex;"><span>x<span style="color:#f92672">$</span><span style="color:#a6e22e">compress</span>()
</span></span><span style="display:flex;"><span>x<span style="color:#f92672">$</span><span style="color:#a6e22e">list</span>()
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;/var/folders/gs/4khph0xs0436gmd2gdnwsg080000gn/T//RtmpPITEm6/R/foobar/compress.zip&#34;</span>
</span></span><span style="display:flex;"><span>x<span style="color:#f92672">$</span><span style="color:#a6e22e">uncompress</span>()
</span></span><span style="display:flex;"><span>x<span style="color:#f92672">$</span><span style="color:#a6e22e">list</span>()
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;/var/folders/gs/4khph0xs0436gmd2gdnwsg080000gn/T//RtmpPITEm6/R/foobar/bar.txt&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [2] &#34;/var/folders/gs/4khph0xs0436gmd2gdnwsg080000gn/T//RtmpPITEm6/R/foobar/foo.txt&#34;</span>
</span></span></code></pre></div><p><!-- raw HTML omitted --><!-- raw HTML omitted --></p>
<h2 id="how-to-use-in-a-package">How to use in a package</h2>
<p>I already use <code>hoardr</code> in five R packages I maintain: <a href="https://github.com/ropensci/crminer">crminer</a>, <a href="https://github.com/ropensci/rdpla">rdpla</a>, <a href="https://github.com/ropensci/rerddap">rerddap</a>, <a href="https://github.com/ropensci/rnoaa">rnoaa</a>, and <a href="https://github.com/ropensci/taxizedb">taxizedb</a>. I&rsquo;m planning to use it in
many more packages, especially as it gets more stable.</p>
<p>This is how I use <code>hoardr</code> in packages.</p>
<ul>
<li>list <code>hoardr</code> in your Imports in your DESCRIPTION file</li>
<li>make on <code>.onLoad</code> method in your package, with the following content (as an example):</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>cache <span style="color:#f92672">&lt;-</span> <span style="color:#66d9ef">NULL</span>
</span></span><span style="display:flex;"><span>.onLoad <span style="color:#f92672">&lt;-</span> <span style="color:#66d9ef">function</span>(libname, pkgname){
</span></span><span style="display:flex;"><span>  x <span style="color:#f92672">&lt;-</span> hoardr<span style="color:#f92672">::</span><span style="color:#a6e22e">hoard</span>()
</span></span><span style="display:flex;"><span>  x<span style="color:#f92672">$</span><span style="color:#a6e22e">cache_path_set</span>(<span style="color:#e6db74">&#34;&lt;your package name&gt;&#34;</span>)
</span></span><span style="display:flex;"><span>  cache <span style="color:#f92672">&lt;&lt;-</span> x
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Then when the package is loaded, you have a <code>cache</code> object that you can then use
to manage cached files.</p>
<ul>
<li>Use <code>cache$mkdir()</code> to make the directory</li>
<li>Probably use <code>cache$cache_path_get()</code> in combination with e.g., <code>file.path()</code>
to make file paths for files you need to cache</li>
<li>Write files as needed</li>
<li>If you need to delete files you can use <code>delete()</code> method to delete by name, or
use <code>unlink()</code> on the complete file path, or you can <code>delet_all()</code> if you need to
delete all files.</li>
<li>If you need to do compression <code>compress</code>/<code>uncompress</code> are available - may be a nice
thing to do for users so files are taking up less disk space.</li>
<li>Add a manual file with a description of the various methods available and
example usage, e.g, <a href="https://github.com/ropensci/crminer/blob/master/R/caching.R">https://github.com/ropensci/crminer/blob/master/R/caching.R</a></li>
<li>The <code>cache</code> object created above is also available to the user of your package
so that they can manage files themselves as well - but of course you can
choose not to export the cache object with methods to the user.</li>
</ul>
]]></content:encoded>
    </item>
  </channel>
</rss>
