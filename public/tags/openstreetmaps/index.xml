<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Openstreetmaps on Recology</title>
    <link>http://localhost:1313/tags/openstreetmaps/</link>
    <description>Recent content in Openstreetmaps on Recology</description>
    <generator>Hugo -- 0.140.2</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 30 Jun 2013 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/openstreetmaps/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>R to GeoJSON</title>
      <link>http://localhost:1313/2013/06/geojson/</link>
      <pubDate>Sun, 30 Jun 2013 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2013/06/geojson/</guid>
      <description>&lt;p&gt;&lt;strong&gt;UPDATE&lt;/strong&gt; As you can see in Patrick&amp;rsquo;s comment below you can convert to GeoJSON format files with rgdal as an alternative to calling the Ogre web API described below. See &lt;a href=&#34;https://github.com/patperu/write2geojson/blob/master/write-geojson.R&#34;&gt;here&lt;/a&gt; for example code for converting to GeoJSON with rgdal.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;GitHub recently introduced the ability to render &lt;a href=&#34;http://en.wikipedia.org/wiki/GeoJSON&#34;&gt;GeoJSON&lt;/a&gt; files on their site as maps &lt;a href=&#34;https://github.com/blog/1528-there-s-a-map-for-that&#34;&gt;here&lt;/a&gt;, and recently introduced &lt;a href=&#34;https://github.com/blog/1541-geojson-rendering-improvements&#34;&gt;here&lt;/a&gt; support for &lt;a href=&#34;https://github.com/mbostock/topojson&#34;&gt;TopoJSON&lt;/a&gt;, an extension of GeoJSON can be up to 80% smaller than GeoJSON, support for other file extensions (&lt;code&gt;.topojson&lt;/code&gt; and &lt;code&gt;.json&lt;/code&gt;), and you can embed the maps on other sites (so awesome). The underlying maps used on GitHub are &lt;a href=&#34;http://www.openstreetmap.org/&#34;&gt;Openstreet Maps&lt;/a&gt;.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p><strong>UPDATE</strong> As you can see in Patrick&rsquo;s comment below you can convert to GeoJSON format files with rgdal as an alternative to calling the Ogre web API described below. See <a href="https://github.com/patperu/write2geojson/blob/master/write-geojson.R">here</a> for example code for converting to GeoJSON with rgdal.</p>
<hr>
<p>GitHub recently introduced the ability to render <a href="http://en.wikipedia.org/wiki/GeoJSON">GeoJSON</a> files on their site as maps <a href="https://github.com/blog/1528-there-s-a-map-for-that">here</a>, and recently introduced <a href="https://github.com/blog/1541-geojson-rendering-improvements">here</a> support for <a href="https://github.com/mbostock/topojson">TopoJSON</a>, an extension of GeoJSON can be up to 80% smaller than GeoJSON, support for other file extensions (<code>.topojson</code> and <code>.json</code>), and you can embed the maps on other sites (so awesome). The underlying maps used on GitHub are <a href="http://www.openstreetmap.org/">Openstreet Maps</a>.</p>
<p>A recent blog post showed how to convert .shp or .kml files to GeoJSON to then upload to GitHub <a href="http://ben.balter.com/2013/06/26/how-to-convert-shapefiles-to-geojson-for-use-on-github/">here</a>. The approach used Ruby on the command line locally to convert the geospatial files to GeoJSON.</p>
<p>Can we do this in R? Perhaps others have already done this, but there&rsquo;s more than one way to do anything, no?</p>
<p>I&rsquo;m not aware of a converter to GeoJSON within R, but there is a web service that can do this, called <a href="http://ogre.adc4gis.com/">Ogre</a>. The service lets you <code>POST</code> a file, which then converts to GeoJSON and gives it back to you. Ogre accepts many different file formats: BNA, CSV, DGN, DXF, zipped shapefiles, GeoConcept, GeoJSON, GeoRSS, GML, GMT, KML, MapInfo, and VRT.</p>
<p>We can use the Ogre API to upload a local geospatial file of various formats and get the GeoJSON back, then put it up on GitHub, and they render the map for you. Sweetness.</p>
<p>So here&rsquo;s the protocol.</p>
<h3 id="1-load-httr-what-is-httr-for-those-not-in-the-know-it-is-a-simpler-wrapper-around-rcurl-a-curl-interface-for-r">1. Load httr. What is httr? For those not in the know it is a simpler wrapper around RCurl, a curl interface for R.</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#75715e"># install.packages(&#39;httr&#39;)</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">library</span>(httr)
</span></span></code></pre></div><h3 id="2-here-is-a-function-to-convert-your-geospatial-files-to-geojson-with-roxygen-docs">2. Here is a function to convert your geospatial files to GeoJSON (with roxygen docs).</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>togeojson <span style="color:#f92672">&lt;-</span> <span style="color:#66d9ef">function</span>(file, writepath <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;~&#34;</span>) {
</span></span><span style="display:flex;"><span>    url <span style="color:#f92672">&lt;-</span> <span style="color:#e6db74">&#34;http://ogre.adc4gis.com/convert&#34;</span>
</span></span><span style="display:flex;"><span>    tt <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">POST</span>(url, body <span style="color:#f92672">=</span> <span style="color:#a6e22e">list</span>(upload <span style="color:#f92672">=</span> <span style="color:#a6e22e">upload_file</span>(file)))
</span></span><span style="display:flex;"><span>    out <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">content</span>(tt, as <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;text&#34;</span>)
</span></span><span style="display:flex;"><span>    fileConn <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">file</span>(writepath)
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">writeLines</span>(out, fileConn)
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">close</span>(fileConn)
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h3 id="3-convert-a-file-to-geojson">3. Convert a file to GeoJSON</h3>
<p><strong>KML</strong></p>
<p>In the first line I specify the location of the file on my machine. In the second line the function <code>togeojson</code> reads in the file, sends the file to the API endpoint <em><a href="http://ogre.adc4gis.com/convert">http://ogre.adc4gis.com/convert</a></em>, collects the returned GeoJSON object, and saves the GeoJSON to a file that you specify. Here we are converting a KML file with point occurrences (data collected from <a href="http://bison.usgs.ornl.gov/">USGS&rsquo;s BISON service</a>).</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>file <span style="color:#f92672">&lt;-</span> <span style="color:#e6db74">&#34;~/github/sac/rgeojson/acer_spicatum.kml&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">togeojson</span>(file, <span style="color:#e6db74">&#34;~/github/sac/rgeojson/acer_spicatum.geojson&#34;</span>)
</span></span></code></pre></div><p><strong>Shapefiles</strong></p>
<p>Here, we are converting a zip file containing shape files for <em>Pinus contorta</em> (data collected from the USGS <a href="http://esp.cr.usgs.gov/data/little/">here</a>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>file <span style="color:#f92672">&lt;-</span> <span style="color:#e6db74">&#34;~/github/sac/rgeojson/pinucont.zip&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">togeojson</span>(file, <span style="color:#e6db74">&#34;~/github/sac/rgeojson/pinus.geojson&#34;</span>)
</span></span></code></pre></div><h3 id="4-then-commit-and-push-to-github-and-this-is-what-they-look-like-on-github">4. Then commit and push to GitHub. And this is what they look like on GitHub</h3>
<p><em>Acer spicatum</em> distribution (points)</p>

<script src="https://embed.github.com/view/geojson/sckott/rgeojson/output/acer_spicatum.geojson"></script>

<p><em>Pinus contorta</em> distribution (polygons)</p>

<script src="https://embed.github.com/view/geojson/sckott/rgeojson/output/pinus.geojson"></script>

<p>If you want, you can clone a repo from my account. Then do the below. (of course, you must have git installed, and have a GitHub account&hellip;)</p>
<p>First, fork my <code>rgeojson</code> repo <a href="https://github.com/sckott/rgeojson">here</a> to your GitHub account.</p>
<p>Second, in your terminal/command line&hellip;</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>git clone https://github.com/&lt;yourgithubusername&gt;/rgeojson.git
</span></span><span style="display:flex;"><span>cd rgeojson
</span></span></code></pre></div><p>Third, in R specify the location of either the KML file or the zipped shape files, then call <code>togeojson</code> function to convert the KML file to a GeoJSON file (which should output a file <em>acer_spicatum.geojson</em>)</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>file <span style="color:#f92672">&lt;-</span> <span style="color:#e6db74">&#34;/path/to/acer_spicatum.kml&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">togeojson</span>(file, <span style="color:#e6db74">&#34;~/path/to/write/to/acer_spicatum.geojson&#34;</span>)
</span></span></code></pre></div><p>Fourth, back in the terminal&hellip;</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>git add acer_spicatum.geojson
</span></span><span style="display:flex;"><span>git commit -a -m <span style="color:#e6db74">&#39;some cool commit message&#39;</span>
</span></span><span style="display:flex;"><span>git push
</span></span></code></pre></div><p>Fifth, go to your <em>rgeojson</em> repo on GitHub and click on the <em>acer_spicatum.geojson</em> file, and the map should render.</p>
<p>Look for this functionality to come to the <a href="https://github.com/ropensci/rbison">rbison</a> and <a href="https://github.com/ropensci/rgbif">rgbif</a> R packages soon. Why is that cool?  Think of the workflow: Query for species occurrence data in the BISON or GBIF databases, convert the results to a GeoJSON file, push to GitHub, and you have an awesome interactive map on the web. Not too bad eh.</p>
]]></content:encoded>
    </item>
  </channel>
</rss>
