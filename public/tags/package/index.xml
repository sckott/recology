<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Package on Recology</title>
    <link>http://localhost:1313/tags/package/</link>
    <description>Recent content in Package on Recology</description>
    <generator>Hugo -- 0.140.2</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 07 Apr 2016 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/package/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>atomize - make new packages from other packages</title>
      <link>http://localhost:1313/2016/04/atomize/</link>
      <pubDate>Thu, 07 Apr 2016 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2016/04/atomize/</guid>
      <description>&lt;p&gt;We (rOpenSci) just held our 3rd annual rOpenSci unconference (&lt;a href=&#34;https://unconf16.ropensci.org/&#34;&gt;https://unconf16.ropensci.org/&lt;/a&gt;) in San Francisco. There were &lt;a href=&#34;https://github.com/ropensci/unconf16/issues&#34;&gt;a lot of ideas&lt;/a&gt;, and lots of awesome projects from awesome people came out of the 2 day event.&lt;/p&gt;
&lt;p&gt;One weird idea I had comes from looking at the Node world, where there are lots of tiny packages, instead of the often larger packages we have in the R world. One reason for tiny in Node is that of course you want a library to be tiny if running in the browser for faster load times (esp. on mobile).&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>We (rOpenSci) just held our 3rd annual rOpenSci unconference (<a href="https://unconf16.ropensci.org/">https://unconf16.ropensci.org/</a>) in San Francisco. There were <a href="https://github.com/ropensci/unconf16/issues">a lot of ideas</a>, and lots of awesome projects from awesome people came out of the 2 day event.</p>
<p>One weird idea I had comes from looking at the Node world, where there are lots of tiny packages, instead of the often larger packages we have in the R world. One reason for tiny in Node is that of course you want a library to be tiny if running in the browser for faster load times (esp. on mobile).</p>
<p>So the idea is, what if we could separate all the functions in a package, or any particular function of your choice, into new packages, with all the internal functions and dependencies. And automatically as well, not manually.</p>
<p>So what are the use cases? I can&rsquo;t imagine this being used to create stable packages to disperse to the world on CRAN, but it could be really useful for development purposes, or for R users/analysts that want lighter weight dependencies (e.g., a package with just the one function needed from a larger package).</p>
<p>This approach of course has drawbacks. The new created package is now broken apart from the original - however, beause it&rsquo;s automated, you can just re-create it.</p>
<p>Another pain point would surely be with packages that have C/C++ code in them.</p>
<p>The package: <code>atomize</code>.</p>
<p>The package was made possible by the awesome <a href="https://github.com/MangoTheCat/functionMap">functionMap</a> package by <a href="https://github.com/gaborcsardi">Gábor Csárdi</a>, and the more well-known <code>devtools</code>.</p>
<p>Expect bugs, the package has no tests. Sorry :(</p>
<h2 id="installation">Installation</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>devtools<span style="color:#f92672">::</span><span style="color:#a6e22e">install_github</span>(<span style="color:#e6db74">&#34;ropenscilabs/atomize&#34;</span>)
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">library</span>(<span style="color:#e6db74">&#34;atomize&#34;</span>)
</span></span></code></pre></div><h2 id="usage">usage</h2>
<h3 id="atomize-a-fxn-into-separate-package">atomize a fxn into separate package</h3>
<p>You can select one function, or many. Here, I&rsquo;m using another package I maintain, <a href="https://github.com/ropenscilabs/rredlist">rredlist</a>, a pkg to interact with the <a href="https://apiv3.iucnredlist.org/api/v3/docs">IUCN Redlist API</a>.</p>
<p>In this example, I want a new package called <code>foobar</code> with just the function <code>rl_citation()</code>. The function <code>atomize::atomizer()</code> takes the path for the package to extract from, then a path for the new package, then the function names.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">atomizer</span>(path_ref <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;../rredlist&#34;</span>, path_new <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;../foobar&#34;</span>, funcs <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;rl_citation&#34;</span>)
</span></span></code></pre></div><p>This creates a new package in the <code>path_new</code> directory</p>
<h3 id="install">install</h3>
<p>Now we need to install the new package, can do easily with <code>devtools::install()</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>devtools<span style="color:#f92672">::</span><span style="color:#a6e22e">install</span>(<span style="color:#e6db74">&#34;../foobar&#34;</span>)
</span></span></code></pre></div><h3 id="load">load</h3>
<p>Then load the new package</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">library</span>(<span style="color:#e6db74">&#34;foobar&#34;</span>)
</span></span></code></pre></div><h3 id="call-function">call function</h3>
<p>Now call the function in the new package</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>foobar<span style="color:#f92672">::</span><span style="color:#a6e22e">rl_citation</span>()
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;IUCN 2015. IUCN Red List of Threatened Species. Version 2015-4 &lt;www.iucnredlist.org&gt;&#34;</span>
</span></span></code></pre></div><p>it&rsquo;s identical to the same function in the old package</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">identical</span>(rredlist<span style="color:#f92672">::</span><span style="color:#a6e22e">rl_citation</span>(), foobar<span style="color:#f92672">::</span><span style="color:#a6e22e">rl_citation</span>())
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] TRUE</span>
</span></span></code></pre></div>]]></content:encoded>
    </item>
  </channel>
</rss>
