<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Python on Recology</title>
    <link>http://localhost:1313/tags/python/</link>
    <description>Recent content in Python on Recology</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 06 Oct 2023 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Working at Fred Hutchinson Cancer Center</title>
      <link>http://localhost:1313/2023/10/fred-hutch/</link>
      <pubDate>Fri, 06 Oct 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2023/10/fred-hutch/</guid>
      <description>Soooo, my last job at Deck was amazing. I loved it. I was doing data engineer stuff there, mostly maintaining infrastructure for data pipelines. Everyone was great and the mission was amazing: helping Democrats win. Yet the company was shut down about a month ago, sending me on another job search, the 3rd since early/mid 2021.
I&amp;rsquo;m super thrilled to have landed a job (Software and Reproducibility Software Developer) at the Fred Hutch Data Science Lab (DASL), headed up by Jeff Leek, working with Sean Kross, Amy Paguirigan, and Monica Gerber, among many other amazing folks.</description>
    </item>
    <item>
      <title>Python, ast, and redbaron</title>
      <link>http://localhost:1313/2023/04/python-ast/</link>
      <pubDate>Tue, 18 Apr 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2023/04/python-ast/</guid>
      <description>I recently had a use case at work where I wanted to check that file paths given in a Python script actually existed. These paths were in various GitHub repositories, so all I had to do was pull out the paths and check if they exist on GitHub.
There were a few catches though.
First, I couldn&amp;rsquo;t simply get any string out of each Python script - they needed to be strings specficied by a specific function parameter, and match a regex (e.</description>
    </item>
    <item>
      <title>List comprehension vs. filter vs. key lookup</title>
      <link>http://localhost:1313/2022/04/lookup-vs-filter/</link>
      <pubDate>Mon, 18 Apr 2022 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2022/04/lookup-vs-filter/</guid>
      <description>I was working on a work task last week, and needed to filter out one instance of a class from a list of class instances. No matter how you do this speed doesn&amp;rsquo;t matter too much if you&amp;rsquo;re doing this operation once or a few times.
However, I this operation needs to be done about 100K times each time the script runs - so speed definitely does matter in this case.</description>
    </item>
    <item>
      <title>Notes on Python</title>
      <link>http://localhost:1313/2022/02/python-notes/</link>
      <pubDate>Mon, 07 Feb 2022 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2022/02/python-notes/</guid>
      <description>It&amp;rsquo;s been interesting switching jobs with respect to programming languages. I used to write 95% R - now I write 95% Python.
I have been using Python for many years, but not seriously or getting paid either. I&amp;rsquo;ve learned alot in the first 6 months.
Some Python things learned:
Functions and methods I used to think functions and methods were the same thing. But during the last 6 months I learned that functions and methods are not the same.</description>
    </item>
    <item>
      <title>habanero update: Crossref data from Python</title>
      <link>http://localhost:1313/2017/10/habanero-update/</link>
      <pubDate>Mon, 23 Oct 2017 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2017/10/habanero-update/</guid>
      <description>I wrote about Crossref clients back nearly two years ago on this blog: Crossref programmatic clients.
Since it&amp;rsquo;s been a while, it seems worth talking again about the the many ways to work programmatically with Crossref data - and focus in on the Python client habanero since it has some recent updates.
The 3 clients work with the main Crossref API, which lets you do things like search for works by title, author, etc.</description>
    </item>
    <item>
      <title>Crossref programmatic clients</title>
      <link>http://localhost:1313/2015/11/crossref-clients/</link>
      <pubDate>Mon, 30 Nov 2015 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2015/11/crossref-clients/</guid>
      <description>I gave two talks recently at the annual Crossref meeting, one of which was a somewhat technical overview of programmatic clients for Crossref APIs. Check out the talk here. I talked about the motivation for working with Crossref data by writing code/etc. rather than going the GUI route, then went over the various clients, with brief examples.
We (rOpenSci) have been working on the R client rcrossref for a while now, but I&amp;rsquo;m also working on the Python and Ruby clients for Crossref.</description>
    </item>
    <item>
      <title>pygbif - GBIF client for Python</title>
      <link>http://localhost:1313/2015/11/pygbif/</link>
      <pubDate>Thu, 12 Nov 2015 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2015/11/pygbif/</guid>
      <description>I maintain an R client for the GBIF API, at rgbif. Been working on it for a few years, and recently been thinking that there should be a nice low level client for Python as well. I didn&amp;rsquo;t see one searching Github, etc. so I started working on one recently: pygbif
It&amp;rsquo;s up on pypi.
There&amp;rsquo;s not much in pygbif yet - I wanted to get something up to start getting some users to more quickly make the library useful to people.</description>
    </item>
    <item>
      <title>pytaxize - low level ITIS functions</title>
      <link>http://localhost:1313/2014/12/pytaxize-itis/</link>
      <pubDate>Fri, 26 Dec 2014 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2014/12/pytaxize-itis/</guid>
      <description>I&amp;rsquo;ve been working on a Python port of the R package taxize that I maintain. It&amp;rsquo;s still early days with this Python library, I&amp;rsquo;d love to know what people think. For example, I&amp;rsquo;m giving back Pandas DataFrame&amp;rsquo;s from most functions. Does this make sense?
Installation sudo pip install git+git://github.com/sckott/pytaxize.git#egg=pytaxize Or git clone the repo down, and python setup.py build &amp;amp;&amp;amp; python setup.py install
Load library import pytaxize ITIS ping pytaxize.itis_ping() &amp;#39;This is the ITIS Web Service, providing access to the data behind www.</description>
    </item>
    <item>
      <title>icanhaz altmetrics</title>
      <link>http://localhost:1313/2014/12/icanhaz-altmetrics/</link>
      <pubDate>Mon, 08 Dec 2014 19:45:29 +0000</pubDate>
      <guid>http://localhost:1313/2014/12/icanhaz-altmetrics/</guid>
      <description>The Lagotto application is a Rails app that collects and serves up via RESTful API article level metrics data for research objects. So far, this application has only been applied to scholarly articles, but will see action on datasets soon.
Martin Fenner has lead the development of Lagotto. He recently set up a discussion site if you want to chat about it.
The application has a nice GUI interface, and a quite nice RESTful API.</description>
    </item>
    <item>
      <title>Taxonomy data from the web in three languages</title>
      <link>http://localhost:1313/2013/09/taxonomy-in-three-acts/</link>
      <pubDate>Fri, 27 Sep 2013 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2013/09/taxonomy-in-three-acts/</guid>
      <description>Eduard Sz√∂cs and I started developing a taxonomic toolbelt for the R language a while back , which lets you interact with a multitude of taxonomic databases on the web. We have a paper in F1000Research if you want to find out more (see here).
I thought it would be fun to rewrite some of taxize in other languages to learn more languages. Ruby and Python made the most sense to try.</description>
    </item>
  </channel>
</rss>
