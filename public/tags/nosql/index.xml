<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Nosql on Recology</title>
    <link>http://localhost:1313/tags/nosql/</link>
    <description>Recent content in Nosql on Recology</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 18 Nov 2014 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/nosql/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>sofa - reboot</title>
      <link>http://localhost:1313/2014/11/sofa/</link>
      <pubDate>Tue, 18 Nov 2014 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2014/11/sofa/</guid>
      <description>I&amp;rsquo;ve reworked sofa recently after someone reported a bug in the package. Since the last post on this package on 2013-06-21, there&amp;rsquo;s a bunch of changes:
Removed the sofa_ prefix from all functions as it wasn&amp;rsquo;t really necessary. Replaced rjson/RJSONIO with jsonlite for JSON I/O. New functions: revisions() - to get the revision numbers for a document. uuids() - get any number of UUIDs - e.g., if you want to set document IDs with UUIDs Most functions that deal with documents are prefixed with doc_ Functions that deal with databases are prefixed with db_ Simplified all code, reducing duplication All functions take cushion as the first parameter, for consistency sake.</description>
    </item>
    <item>
      <title>Stashing and playing with raw data locally from the web</title>
      <link>http://localhost:1313/2013/06/couch/</link>
      <pubDate>Mon, 17 Jun 2013 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2013/06/couch/</guid>
      <description>It is getting easier to get data directly into R from the web. Often R packages that retrieve data from the web return useful R data structures to users like a data.frame. This is a good thing of course to make things user friendly.
However, what if you want to drill down into the data that&amp;rsquo;s returned from a query to a database in R? What if you want to get that nice data.</description>
    </item>
  </channel>
</rss>
