<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Code on Recology</title>
    <link>http://localhost:1313/tags/code/</link>
    <description>Recent content in Code on Recology</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 06 Dec 2018 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/code/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>condition control: I just want that message once</title>
      <link>http://localhost:1313/2018/12/condition-control/</link>
      <pubDate>Thu, 06 Dec 2018 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2018/12/condition-control/</guid>
      <description>I&amp;rsquo;m sure there&amp;rsquo;s already a way to do this, but here goes. OR maybe this is an anti-pattern. Either way, this is me, asking the stupid question.
I ran into this a few hours ago:
Sys.unsetenv(&amp;#34;ENTREZ_KEY&amp;#34;) library(brranching) mynames &amp;lt;- c(&amp;#34;Poa annua&amp;#34;, &amp;#34;Salix goodingii&amp;#34;, &amp;#34;Helianthus annuus&amp;#34;) phylomatic_names(taxa = mynames, format=&amp;#39;rsubmit&amp;#39;) No ENTREZ API key provided Get one via taxize::use_entrez() See https://ncbiinsights.ncbi.nlm.nih.gov/2017/11/02/new-api-keys-for-the-e-utilities/ No ENTREZ API key provided Get one via taxize::use_entrez() See https://ncbiinsights.</description>
    </item>
    <item>
      <title>limiting dependencies in R package development</title>
      <link>http://localhost:1313/2018/10/limiting-dependencies/</link>
      <pubDate>Tue, 02 Oct 2018 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2018/10/limiting-dependencies/</guid>
      <description>The longer you do anything, the more preferences you may develop for that thing. One of these things is making R packages.
One preference I&amp;rsquo;ve developed is in limiting package dependencies - or at least limiting to the least painful dependencies - in the packages I maintain. Ideally, if a base R solution can be done then do it that way. Everybody has base R packages if they are using R, so you can&amp;rsquo;t fail there, at least on package installation.</description>
    </item>
    <item>
      <title>Balancing user friendliness and code fragility</title>
      <link>http://localhost:1313/2018/07/friendliness-fragility/</link>
      <pubDate>Fri, 27 Jul 2018 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2018/07/friendliness-fragility/</guid>
      <description>I occasionally think about these various topics and ping back and forth between them, thinking I&amp;rsquo;ve got to make a package more user friendly, then back to thinking oh, I really should make this package easier to maintain, but what if that makes it less user friendly?
I&amp;rsquo;ve wanted to get these thoughts written down for a while now, so here goes.
User friendliness and code fragility It&amp;rsquo;s an unassailable good to make your code more user friendly.</description>
    </item>
    <item>
      <title>Metrics for open source projects</title>
      <link>http://localhost:1313/2015/10/open-source-metrics/</link>
      <pubDate>Mon, 19 Oct 2015 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2015/10/open-source-metrics/</guid>
      <description>Measuring use of open source software isn&amp;rsquo;t always straightforward. The problem is especially acute for software targeted largely at academia, where usage is not measured just by software downloads, but also by citations.
Citations are a well-known pain point because the citation graph is privately held by iron doors (e.g., Scopus, Google Scholar). New ventures aim to open up citation data, but of course it&amp;rsquo;s an immense amount of work, and so does not come quickly.</description>
    </item>
    <item>
      <title>Code display in scholarly journals</title>
      <link>http://localhost:1313/2013/10/codeinpapers/</link>
      <pubDate>Fri, 25 Oct 2013 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2013/10/codeinpapers/</guid>
      <description>Code in journals, that is, code you would type to do some programmatic operation in say R or Python, is kind of a mess to say the least. Okay, so you can SEE code in papers, but code is not formatted in a way that facilites reuse. If an author in a paper writes out some code for software they create, or an analysis they do in the paper, wouldn&amp;rsquo;t it be nice for a reader to be able to copy and paste that code directly into whatever environment that code should execute in, and actually work.</description>
    </item>
    <item>
      <title>On writing, sharing, collaborating, and hosting code for science</title>
      <link>http://localhost:1313/2013/07/code/</link>
      <pubDate>Sat, 20 Jul 2013 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2013/07/code/</guid>
      <description>I recently engaged with a number of tweeps in response to my tweet:
Rule number 1 wrt science code: DO NOT post your code on your personal website
That tweet wasn&amp;rsquo;t super clear, and it&amp;rsquo;s difficult to convey my thoughts in a tweet. What I should have said was do post your code - ideally on Github/Bitbucket/etc. Here goes with a much longer version to explain what I meant. The tweet was just about where to host code, whereas the following is about more than that, but related.</description>
    </item>
  </channel>
</rss>
