<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Code on Recology</title>
    <link>http://localhost:1313/tags/code/</link>
    <description>Recent content in Code on Recology</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 06 Dec 2018 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/code/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>condition control: I just want that message once</title>
      <link>http://localhost:1313/2018/12/condition-control/</link>
      <pubDate>Thu, 06 Dec 2018 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2018/12/condition-control/</guid>
      <description>I&amp;rsquo;m sure there&amp;rsquo;s already a way to do this, but here goes. OR maybe this is an anti-pattern. Either way, this is me, asking the stupid question.
I ran into this a few hours ago:
Sys.unsetenv(&amp;#34;ENTREZ_KEY&amp;#34;) library(brranching) mynames &amp;lt;- c(&amp;#34;Poa annua&amp;#34;, &amp;#34;Salix goodingii&amp;#34;, &amp;#34;Helianthus annuus&amp;#34;) phylomatic_names(taxa = mynames, format=&amp;#39;rsubmit&amp;#39;) No ENTREZ API key provided Get one via taxize::use_entrez() See https://ncbiinsights.ncbi.nlm.nih.gov/2017/11/02/new-api-keys-for-the-e-utilities/ No ENTREZ API key provided Get one via taxize::use_entrez() See https://ncbiinsights.</description><content:encoded><![CDATA[ ]]>
               <![CDATA[<p>I&rsquo;m sure there&rsquo;s already a way to do this, but here goes. OR maybe this is an
anti-pattern. Either way, this is me, asking the stupid question.</p>
<p>I ran into this a few hours ago:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">Sys.unsetenv</span>(<span style="color:#e6db74">&#34;ENTREZ_KEY&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">library</span>(brranching)
</span></span><span style="display:flex;"><span>mynames <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">c</span>(<span style="color:#e6db74">&#34;Poa annua&#34;</span>, <span style="color:#e6db74">&#34;Salix goodingii&#34;</span>, <span style="color:#e6db74">&#34;Helianthus annuus&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">phylomatic_names</span>(taxa <span style="color:#f92672">=</span> mynames, format<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;rsubmit&#39;</span>)
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>No ENTREZ API key provided
</span></span><span style="display:flex;"><span> Get one via taxize<span style="color:#f92672">::</span><span style="color:#a6e22e">use_entrez</span>()
</span></span><span style="display:flex;"><span> See https<span style="color:#f92672">://</span>ncbiinsights.ncbi.nlm.nih.gov<span style="color:#f92672">/</span><span style="color:#ae81ff">2017</span><span style="color:#f92672">/</span><span style="color:#ae81ff">11</span><span style="color:#f92672">/</span><span style="color:#ae81ff">02</span><span style="color:#f92672">/</span>new<span style="color:#f92672">-</span>api<span style="color:#f92672">-</span>keys<span style="color:#f92672">-</span><span style="color:#66d9ef">for</span><span style="color:#f92672">-</span>the<span style="color:#f92672">-</span>e<span style="color:#f92672">-</span>utilities<span style="color:#f92672">/</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>No ENTREZ API key provided
</span></span><span style="display:flex;"><span> Get one via taxize<span style="color:#f92672">::</span><span style="color:#a6e22e">use_entrez</span>()
</span></span><span style="display:flex;"><span> See https<span style="color:#f92672">://</span>ncbiinsights.ncbi.nlm.nih.gov<span style="color:#f92672">/</span><span style="color:#ae81ff">2017</span><span style="color:#f92672">/</span><span style="color:#ae81ff">11</span><span style="color:#f92672">/</span><span style="color:#ae81ff">02</span><span style="color:#f92672">/</span>new<span style="color:#f92672">-</span>api<span style="color:#f92672">-</span>keys<span style="color:#f92672">-</span><span style="color:#66d9ef">for</span><span style="color:#f92672">-</span>the<span style="color:#f92672">-</span>e<span style="color:#f92672">-</span>utilities<span style="color:#f92672">/</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>No ENTREZ API key provided
</span></span><span style="display:flex;"><span> Get one via taxize<span style="color:#f92672">::</span><span style="color:#a6e22e">use_entrez</span>()
</span></span><span style="display:flex;"><span> See https<span style="color:#f92672">://</span>ncbiinsights.ncbi.nlm.nih.gov<span style="color:#f92672">/</span><span style="color:#ae81ff">2017</span><span style="color:#f92672">/</span><span style="color:#ae81ff">11</span><span style="color:#f92672">/</span><span style="color:#ae81ff">02</span><span style="color:#f92672">/</span>new<span style="color:#f92672">-</span>api<span style="color:#f92672">-</span>keys<span style="color:#f92672">-</span><span style="color:#66d9ef">for</span><span style="color:#f92672">-</span>the<span style="color:#f92672">-</span>e<span style="color:#f92672">-</span>utilities<span style="color:#f92672">/</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>[1] <span style="color:#e6db74">&#34;poaceae%2Fpoa%2Fpoa_annua&#34;</span>                   <span style="color:#e6db74">&#34;salicaceae%2Fsalix%2Fsalix_goodingii&#34;</span>        <span style="color:#e6db74">&#34;asteraceae%2Fhelianthus%2Fhelianthus_annuus&#34;</span>
</span></span></code></pre></div><p>The <a href="https://github.com/ropensci/brranching/">brranching</a> package uses the <a href="https://github.com/ropensci/taxize/">taxize</a> package internally, calling it&rsquo;s function
<code>taxize::tax_name()</code>. The <code>taxize::tax_name()</code> function throws useful messages to the user
if their NCBI Entrez API key is not found, and gives them instructions on how to find it.</p>
<p>However, the user does not have to get an API key. If they don&rsquo;t they then get subjected
to lots of repeats of the same message.</p>
<p>I wondered if there&rsquo;s anything that could be done about this. That is, if the same
message is going to be thrown that was already thrown within a function call, just skip
additional messages that are the same.</p>
<p>There is of course <code>suppressMessages()</code> for messages, but in package development if you
do want a user to see a message, you don&rsquo;t want to suppress messages. <code>suppressMessages</code>
is too blunt of an instrument for this use case.</p>
<h2 id="the-code">the code</h2>
<p><code>with_mssgs()</code> captures values and messages, suppressing the message</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>with_mssgs <span style="color:#f92672">&lt;-</span> <span style="color:#66d9ef">function</span>(expr) {
</span></span><span style="display:flex;"><span>  my_mssgs <span style="color:#f92672">&lt;-</span> <span style="color:#66d9ef">NULL</span>
</span></span><span style="display:flex;"><span>  w_handler <span style="color:#f92672">&lt;-</span> <span style="color:#66d9ef">function</span>(w) {
</span></span><span style="display:flex;"><span>    my_mssgs <span style="color:#f92672">&lt;&lt;-</span> <span style="color:#a6e22e">c</span>(my_mssgs, <span style="color:#a6e22e">list</span>(w))
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">invokeRestart</span>(<span style="color:#e6db74">&#34;muffleMessage&#34;</span>)
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  val <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">withCallingHandlers</span>(expr, message <span style="color:#f92672">=</span> w_handler)
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">list</span>(value <span style="color:#f92672">=</span> val, messages <span style="color:#f92672">=</span> my_mssgs)
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p><code>MessageKeeper</code> is a little <a href="https://cran.rstudio.com/web/packages/R6/">R6</a> class to handle messages, matching, and
simple checks to see if messages have been used or not.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">library</span>(R6)
</span></span><span style="display:flex;"><span>MessageKeeper <span style="color:#f92672">&lt;-</span> R6<span style="color:#f92672">::</span><span style="color:#a6e22e">R6Class</span>(<span style="color:#e6db74">&#34;MessageKeeper&#34;</span>,
</span></span><span style="display:flex;"><span>  public <span style="color:#f92672">=</span> <span style="color:#a6e22e">list</span>(
</span></span><span style="display:flex;"><span>    bucket <span style="color:#f92672">=</span> <span style="color:#66d9ef">NULL</span>,
</span></span><span style="display:flex;"><span>    print <span style="color:#f92672">=</span> <span style="color:#66d9ef">function</span>(x, <span style="color:#66d9ef">...</span>) {
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">cat</span>(<span style="color:#e6db74">&#39;MessageKeeper&#39;</span>, sep <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;\n&#34;</span>)
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">cat</span>(<span style="color:#a6e22e">paste0</span>(<span style="color:#e6db74">&#39; messages: &#39;</span>, <span style="color:#a6e22e">length</span>(self<span style="color:#f92672">$</span>bucket)))
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">length</span>(self<span style="color:#f92672">$</span>bucket) <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">0</span>) {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">cat</span>(<span style="color:#e6db74">&#34;\n&#34;</span>)
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> (i <span style="color:#66d9ef">in</span> self<span style="color:#f92672">$</span>bucket) {
</span></span><span style="display:flex;"><span>          <span style="color:#a6e22e">cat</span>(<span style="color:#a6e22e">paste0</span>(<span style="color:#e6db74">&#34;  &#34;</span>, <span style="color:#a6e22e">substring</span>(i, <span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">50</span>)))
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>      }
</span></span><span style="display:flex;"><span>    },
</span></span><span style="display:flex;"><span>    add <span style="color:#f92672">=</span> <span style="color:#66d9ef">function</span>(x) {
</span></span><span style="display:flex;"><span>      self<span style="color:#f92672">$</span>bucket <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">c</span>(self<span style="color:#f92672">$</span>bucket, <span style="color:#a6e22e">list</span>(x))
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">invisible</span>(self)
</span></span><span style="display:flex;"><span>    },
</span></span><span style="display:flex;"><span>    remove <span style="color:#f92672">=</span> <span style="color:#66d9ef">function</span>() {
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">if</span> (self<span style="color:#f92672">$</span><span style="color:#a6e22e">length</span>() <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>) <span style="color:#66d9ef">return</span>(<span style="color:#66d9ef">NULL</span>)
</span></span><span style="display:flex;"><span>      head <span style="color:#f92672">&lt;-</span> self<span style="color:#f92672">$</span>bucket[[1]]
</span></span><span style="display:flex;"><span>      self<span style="color:#f92672">$</span>bucket <span style="color:#f92672">&lt;-</span> self<span style="color:#f92672">$</span>bucket[<span style="color:#ae81ff">-1</span>]
</span></span><span style="display:flex;"><span>      head
</span></span><span style="display:flex;"><span>    },
</span></span><span style="display:flex;"><span>    purge <span style="color:#f92672">=</span> <span style="color:#66d9ef">function</span>() {
</span></span><span style="display:flex;"><span>      self<span style="color:#f92672">$</span>bucket <span style="color:#f92672">&lt;-</span> <span style="color:#66d9ef">NULL</span>
</span></span><span style="display:flex;"><span>    },
</span></span><span style="display:flex;"><span>    thrown_already <span style="color:#f92672">=</span> <span style="color:#66d9ef">function</span>(x) {
</span></span><span style="display:flex;"><span>      x <span style="color:#f92672">%in%</span> self<span style="color:#f92672">$</span>bucket
</span></span><span style="display:flex;"><span>    },
</span></span><span style="display:flex;"><span>    not_thrown_yet <span style="color:#f92672">=</span> <span style="color:#66d9ef">function</span>(x) {
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">!</span>self<span style="color:#f92672">$</span><span style="color:#a6e22e">thrown_already</span>(x)
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>  )
</span></span><span style="display:flex;"><span>)
</span></span></code></pre></div><p>MessageKeeper examples</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>mssger <span style="color:#f92672">&lt;-</span> MessageKeeper<span style="color:#f92672">$</span><span style="color:#a6e22e">new</span>()
</span></span><span style="display:flex;"><span>mssger
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; MessageKeeper</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;  messages: 0</span>
</span></span><span style="display:flex;"><span>mssger<span style="color:#f92672">$</span><span style="color:#a6e22e">add</span>(<span style="color:#e6db74">&#34;one&#34;</span>)
</span></span><span style="display:flex;"><span>mssger<span style="color:#f92672">$</span><span style="color:#a6e22e">add</span>(<span style="color:#e6db74">&#34;two&#34;</span>)
</span></span><span style="display:flex;"><span>mssger
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; MessageKeeper</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;  messages: 2</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   one  two</span>
</span></span><span style="display:flex;"><span>mssger<span style="color:#f92672">$</span><span style="color:#a6e22e">thrown_already</span>(<span style="color:#e6db74">&#34;one&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] TRUE</span>
</span></span><span style="display:flex;"><span>mssger<span style="color:#f92672">$</span><span style="color:#a6e22e">thrown_already</span>(<span style="color:#e6db74">&#34;bears&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] FALSE</span>
</span></span><span style="display:flex;"><span>mssger<span style="color:#f92672">$</span><span style="color:#a6e22e">not_thrown_yet</span>(<span style="color:#e6db74">&#34;bears&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] TRUE</span>
</span></span><span style="display:flex;"><span>mssger<span style="color:#f92672">$</span><span style="color:#a6e22e">purge</span>()
</span></span></code></pre></div><p><code>handle_mssgs()</code> is a function you wrap your target function in to
handle the messages</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>handle_mssgs <span style="color:#f92672">&lt;-</span> <span style="color:#66d9ef">function</span>(expr) {
</span></span><span style="display:flex;"><span>  res <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">with_mssgs</span>(expr)
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span><span style="color:#a6e22e">is.null</span>(res<span style="color:#f92672">$</span>messages)) {
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># if not thrown yet, add to bucket and throw it</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (my_mssger<span style="color:#f92672">$</span><span style="color:#a6e22e">not_thrown_yet</span>(res<span style="color:#f92672">$</span>messages[[1]]<span style="color:#f92672">$</span>message)) {
</span></span><span style="display:flex;"><span>      my_mssger<span style="color:#f92672">$</span><span style="color:#a6e22e">add</span>(res<span style="color:#f92672">$</span>messages[[1]]<span style="color:#f92672">$</span>message)
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">message</span>(res<span style="color:#f92672">$</span>messages[[1]]<span style="color:#f92672">$</span>message)
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span>(res<span style="color:#f92672">$</span>value)
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Set up the message keeper</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>my_mssger <span style="color:#f92672">&lt;-</span> MessageKeeper<span style="color:#f92672">$</span><span style="color:#a6e22e">new</span>()
</span></span></code></pre></div><p><code>squared()</code> squares a numeric value and returns it, throwing a message if
it&rsquo;s greater than 20</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>squared <span style="color:#f92672">&lt;-</span> <span style="color:#66d9ef">function</span>(x) {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">stopifnot</span>(<span style="color:#a6e22e">is.numeric</span>(x))
</span></span><span style="display:flex;"><span>  y <span style="color:#f92672">&lt;-</span> x^2
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> (y <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">20</span>) <span style="color:#a6e22e">message</span>(<span style="color:#e6db74">&#34;woops, &gt; than 20! check your numbers&#34;</span>)
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span>(y)
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p><code>foo()</code> runs any vector of numbers through <code>squared()</code> using <code>vapply()</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>foo <span style="color:#f92672">&lt;-</span> <span style="color:#66d9ef">function</span>(x) {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">vapply</span>(x, <span style="color:#66d9ef">function</span>(z) <span style="color:#a6e22e">squared</span>(z), <span style="color:#a6e22e">numeric</span>(<span style="color:#ae81ff">1</span>))
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p><code>bar()</code> does the same, but uses our MessageKeeper thingy</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>bar <span style="color:#f92672">&lt;-</span> <span style="color:#66d9ef">function</span>(x) {
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># tear down on exit</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">on.exit</span>(my_mssger<span style="color:#f92672">$</span><span style="color:#a6e22e">purge</span>())
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">vapply</span>(x, <span style="color:#66d9ef">function</span>(z) <span style="color:#a6e22e">handle_mssgs</span>(<span style="color:#a6e22e">squared</span>(z)), <span style="color:#a6e22e">numeric</span>(<span style="color:#ae81ff">1</span>))
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p><code>foo()</code> annoyingly throws a message for every instance possible</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">foo</span>(<span style="color:#ae81ff">1</span><span style="color:#f92672">:</span><span style="color:#ae81ff">20</span>)
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; woops, &gt; than 20! check your numbers</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; woops, &gt; than 20! check your numbers</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; woops, &gt; than 20! check your numbers</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; woops, &gt; than 20! check your numbers</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; woops, &gt; than 20! check your numbers</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; woops, &gt; than 20! check your numbers</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; woops, &gt; than 20! check your numbers</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; woops, &gt; than 20! check your numbers</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; woops, &gt; than 20! check your numbers</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; woops, &gt; than 20! check your numbers</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; woops, &gt; than 20! check your numbers</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; woops, &gt; than 20! check your numbers</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; woops, &gt; than 20! check your numbers</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; woops, &gt; than 20! check your numbers</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; woops, &gt; than 20! check your numbers</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; woops, &gt; than 20! check your numbers</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;  [1]   1   4   9  16  25  36  49  64  81 100 121 144 169 196 225 256 289</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [18] 324 361 400</span>
</span></span></code></pre></div><p>while <code>bar()</code> only throws the message once</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">bar</span>(<span style="color:#ae81ff">1</span><span style="color:#f92672">:</span><span style="color:#ae81ff">20</span>)
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; woops, &gt; than 20! check your numbers</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;  [1]   1   4   9  16  25  36  49  64  81 100 121 144 169 196 225 256 289</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [18] 324 361 400</span>
</span></span></code></pre></div>]]></content:encoded>
    </item>
    <item>
      <title>limiting dependencies in R package development</title>
      <link>http://localhost:1313/2018/10/limiting-dependencies/</link>
      <pubDate>Tue, 02 Oct 2018 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2018/10/limiting-dependencies/</guid>
      <description>The longer you do anything, the more preferences you may develop for that thing. One of these things is making R packages.
One preference I&amp;rsquo;ve developed is in limiting package dependencies - or at least limiting to the least painful dependencies - in the packages I maintain. Ideally, if a base R solution can be done then do it that way. Everybody has base R packages if they are using R, so you can&amp;rsquo;t fail there, at least on package installation.</description><content:encoded><![CDATA[ ]]>
               <![CDATA[<p>The longer you do anything, the more preferences you may develop for that thing. One of these things is making R packages.</p>
<p>One preference I&rsquo;ve developed is in limiting package dependencies - or at least limiting to the least painful dependencies - in the packages I maintain. Ideally, if a base R solution can be done then do it that way. Everybody has base R packages if they are using R, so you can&rsquo;t fail there, at least on package installation.</p>
<p>This is largely not about trusting individual packages (<a href="https://simplystatistics.org/posts/2015-11-06-how-i-decide-when-to-trust-an-r-package/">cf. Jeff Leek&rsquo;s post</a>), but trust does play a role in deciding which packages to use (see <em>choosing among packages that do the same thing</em> below).</p>
<h3 id="why">why?</h3>
<p>There&rsquo;s sure to be different opinions on this, but this is why I defend this hill:</p>
<ul>
<li>Why introduce more complexity if it can be avoided?</li>
<li>It&rsquo;s one more thing out of your control. sure, in a perfect world package API&rsquo;s never break, at least after a certain version (v1 or so), but we can&rsquo;t depend on that.</li>
<li>Rolling your own solution for a problem (aka function/class/etc.) means its completely under your control</li>
<li>There&rsquo;s a lot of great packages out there. However, in my opinion, many packages, including many of my own, are targeted at interactive users, not necessarily optimizing for other packages to use. So even though a package may do X really well, you can also do X on your own if it&rsquo;s simple enough.</li>
</ul>
<h3 id="base-r-solutions">base R solutions</h3>
<p>Some examples of base R solutions I like to use rather than using an off the shelf package:</p>
<ul>
<li>Remove <code>NULL</code> elements from a list. The function <code>function(l) Filter(Negate(is.null), l)</code> is stolen from <code>plyr::compact</code> originally. I include it as a utility function in many of my packages. It&rsquo;s simple base R stuff. Easy peasy.</li>
<li>Extract string form another string based on a pattern. The function <code>function(x, y) regmatches(x, regexpr(y, x))</code> is what <code>stringr::str_extract</code> used to do before it moved to wrapping <code>stringi</code> functions. I like the pattern of the input first, and your pattern second, but don&rsquo;t want to import a huge dependency (<code>stringi</code>) if I know i just need a simple string extraction.</li>
<li>Infix function <code>%||%</code>. originally saw this in <code>dplyr</code>, but now has left that package. the function: <code>function(x, y) if (is.null(x) || length(x) == 0) y else x</code>. It provides an elegant solution of a in place defined default value for when you can&rsquo;t be certain of the result. It&rsquo;s a very brief function, so no need to import a package just for this function.</li>
<li>Check that a parameter input is of the right type. R doesn&rsquo;t have type checking like some other languages. we can do it internally within the package though. There are packages to do this (check out <a href="https://github.com/ropensci/assertr">assertr</a>), but instead of importing a package, I do something like the below:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>assert <span style="color:#f92672">&lt;-</span> <span style="color:#66d9ef">function</span> (x, y) {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span><span style="color:#a6e22e">is.null</span>(x)) {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span><span style="color:#a6e22e">inherits</span>(x, y)) {
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">stop</span>(<span style="color:#a6e22e">deparse</span>(<span style="color:#a6e22e">substitute</span>(x)), <span style="color:#e6db74">&#34; must be of class &#34;</span>,
</span></span><span style="display:flex;"><span>          <span style="color:#a6e22e">paste0</span>(y, collapse <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;, &#34;</span>), call. <span style="color:#f92672">=</span> <span style="color:#66d9ef">FALSE</span>)
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>It seems simple enough that I don&rsquo;t think importing a package is warranted.</p>
<h3 id="choosing-among-packages-that-do-the-same-thing">choosing among packages that do the same thing</h3>
<ul>
<li>I often need to combine many rows/lists into a data.frame in my packages. <code>dplyr::bind_rows</code> and <code>data.table::rbindlist</code> do this (there&rsquo;s probably others too). I&rsquo;ve found that <code>data.table</code> is a slightly/somewhat easier dependency WRT installation, so I commonly use the below function for binding named lists into rows of a <code>data.frame</code>, with the optional conversion to a <code>tbl_df</code>.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#66d9ef">function</span>(x) {
</span></span><span style="display:flex;"><span>  tibble<span style="color:#f92672">::</span><span style="color:#a6e22e">as_tibble</span>((x <span style="color:#f92672">&lt;-</span> data.table<span style="color:#f92672">::</span><span style="color:#a6e22e">setDF</span>(
</span></span><span style="display:flex;"><span>    data.table<span style="color:#f92672">::</span><span style="color:#a6e22e">rbindlist</span>(x, use.names <span style="color:#f92672">=</span> <span style="color:#66d9ef">TRUE</span>, fill <span style="color:#f92672">=</span> <span style="color:#66d9ef">TRUE</span>, idcol <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;id&#34;</span>))
</span></span><span style="display:flex;"><span>  ))
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h3 id="other-bits">other bits</h3>
<ul>
<li><a href="https://github.com/jimhester">Jim Hester</a> did a presentation on the <a href="https://github.com/tidyverse/glue">glue</a> package: <a href="https://rawgit.com/jimhester/presentations/master/2018_07_13-Glue_strings_to_data_with_glue/2018_03_28-Glue_string_to_data_with_glue.html#/glue-is-for-packages">Glue Strings to Data with Glue</a> - and emphasized on one slide that <code>glue</code> is for packages because it has zero dependencies, is customizable, and fast - all things you want in a dependency in your own package.</li>
<li>As I was wrapping up this post I found a few papers:
<ul>
<li>Claes et al. <sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> found that &ldquo;occurrence of errors in CRAN packages over a period of three months &hellip; resulted mostly from updates in the packages’ dependencies &hellip;&rdquo;</li>
<li>In another paper Plakidas et al. <sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup> extend the previous finding and say &ldquo;&hellip; this potentially implies a heavy workload for package maintainers when they depend on a package that is frequently updated&rdquo;</li>
<li>These statements mirror my hesitation to depend on other packages if in fact X task can be done internally</li>
</ul>
</li>
</ul>
<ul>
<li>Contributors: if you do write your own internal functions, or borrow from elsewhere, new contributors to your package may need to understand your internal function instead of an imported function from another package - but the plus side is if the function resides in your own package you can change it easily.</li>
<li>Rapid development phase: often package development involves a rapid change phase where you want to get to a working prototype first, then refine later. During this development phase it makes sense to use off the shelf packages to get things working. Later, you may want to swap out packages or write your own R or compiled code to speed things up, or introduce different behavior, etc.</li>
</ul>
<h3 id="but">but</h3>
<p>There are of course good reasons to just import the package that&rsquo;s best at doing X or Y and leave it at that. Sometimes I do that too. I don&rsquo;t always stay on my hill.</p>
<p>And: Maybe I&rsquo;m totally wrong here? Maybe I should be at all times using other packages to do X, Y, and Z? Despite the dozens of packages I maintain, I am fully aware I could be completely wrong here.</p>
<p>thanks to <a href="https://masalmon.eu/">Maëlle Salmon</a> for helpful advice on this post!</p>
<h3 id="references">references</h3>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>Claes, M., Mens, T., &amp; Grosjean, P. (2014). On the maintainability of CRAN packages. 2014 Software Evolution Week - IEEE Conference on Software Maintenance, Reengineering, and Reverse Engineering (CSMR-WCRE). <a href="https://doi.org/10.1109/csmr-wcre.2014.6747183">https://doi.org/10.1109/csmr-wcre.2014.6747183</a>&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>Plakidas, K., Schall, D., &amp; Zdun, U. (2017). Evolution of the R software ecosystem: Metrics, relationships, and their impact on qualities. Journal of Systems and Software, 132, 119–146. <a href="https://doi.org/10.1016/j.jss.2017.06.095">https://doi.org/10.1016/j.jss.2017.06.095</a>&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
]]></content:encoded>
    </item>
    <item>
      <title>Balancing user friendliness and code fragility</title>
      <link>http://localhost:1313/2018/07/friendliness-fragility/</link>
      <pubDate>Fri, 27 Jul 2018 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2018/07/friendliness-fragility/</guid>
      <description>I occasionally think about these various topics and ping back and forth between them, thinking I&amp;rsquo;ve got to make a package more user friendly, then back to thinking oh, I really should make this package easier to maintain, but what if that makes it less user friendly?
I&amp;rsquo;ve wanted to get these thoughts written down for a while now, so here goes.
User friendliness and code fragility It&amp;rsquo;s an unassailable good to make your code more user friendly.</description><content:encoded><![CDATA[ ]]>
               <![CDATA[<p>I occasionally think about these various topics and ping back and forth between them, thinking I&rsquo;ve got to make a package more user friendly, then back to thinking oh, I really should make this package easier to maintain, but what if that makes it less user friendly?</p>
<p>I&rsquo;ve wanted to get these thoughts written down for a while now, so here goes.</p>
<h2 id="user-friendliness-and-code-fragility">User friendliness and code fragility</h2>
<p>It&rsquo;s an unassailable good to make your code more user friendly. There&rsquo;s no point of making your package harder to use unless you really don&rsquo;t want people using it.</p>
<p>Having said that, can a user friendly API come at the cost of code simplicity/maintainability?</p>
<p>An example of user friendly code vs. not user friendly code is: Let&rsquo;s say you have a function <code>foo()</code>. There&rsquo;s a lot of things you can do to make the function user friendly, e.g., the function:</p>
<ul>
<li>errors/returns as early as possible</li>
<li>has good documentation</li>
<li>has well named parameters</li>
<li>returns easy to understand output (see also good docs)</li>
<li>handles complexity sufficiently so the user doesn&rsquo;t have to</li>
</ul>
<p>This is all well and good, and most of the points above don&rsquo;t have to trade off with making code more complex/harder to maintain. However, the last point does I think.</p>
<p>That is, handling complexity for the user is a good thing, BUT it makes for more code and probably more complex code. I&rsquo;ll highlight one particular example of this that I often deal with.</p>
<h2 id="pagination">Pagination</h2>
<p>I make many packages that interact with web APIs, many of which have pagination. Pagination is just as it sounds: you don&rsquo;t get back all possible results for your query but instead you get back a certain number of results, then you have to request the next set, and so on. This helps lighten the load on the server delivering the data. And pagination is useful for users so you can get a sense of what the data looks like without have to wait for all the data, which in some cases can be quite large.</p>
<p>Here&rsquo;s the question: Do you let the user handle pagination themselves with parameters to a function <code>foo()</code>? Or do you handle pagination internally within the function <code>foo()</code> with the user just stating how many results they want? The former scenario means that if the user wants 30 results they do:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">foo</span>(limit <span style="color:#f92672">=</span> <span style="color:#ae81ff">10</span>, page <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">foo</span>(limit <span style="color:#f92672">=</span> <span style="color:#ae81ff">10</span>, page <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span>)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">foo</span>(limit <span style="color:#f92672">=</span> <span style="color:#ae81ff">10</span>, page <span style="color:#f92672">=</span> <span style="color:#ae81ff">3</span>)
</span></span><span style="display:flex;"><span><span style="color:#75715e"># ... and so on</span>
</span></span></code></pre></div><p>While the latter means:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">foo</span>(limit <span style="color:#f92672">=</span> <span style="color:#ae81ff">30</span>)
</span></span></code></pre></div><p>The second example is definitely easier for the user. There are still three HTTP requests being made, so probably the code runs no faster, but it&rsquo;s easier from a user standpoint.</p>
<p>Here&rsquo;s how <code>foo()</code> might handle the paging internally:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>myGET <span style="color:#f92672">&lt;-</span> <span style="color:#66d9ef">function</span>(x) {
</span></span><span style="display:flex;"><span>  conn <span style="color:#f92672">&lt;-</span> crul<span style="color:#f92672">::</span>HttpClient<span style="color:#f92672">$</span><span style="color:#a6e22e">new</span>(<span style="color:#e6db74">&#34;https://someurl.com&#34;</span>)
</span></span><span style="display:flex;"><span>  res <span style="color:#f92672">&lt;-</span> conn<span style="color:#f92672">$</span><span style="color:#a6e22e">get</span>()
</span></span><span style="display:flex;"><span>  txt <span style="color:#f92672">&lt;-</span> res<span style="color:#f92672">$</span><span style="color:#a6e22e">parse</span>(encoding <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;UTF-8&#34;</span>)
</span></span><span style="display:flex;"><span>  jsonlite<span style="color:#f92672">::</span><span style="color:#a6e22e">fromJSON</span>(txt)
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>foo <span style="color:#f92672">&lt;-</span> <span style="color:#66d9ef">function</span>(limit <span style="color:#f92672">=</span> <span style="color:#ae81ff">10</span>) {
</span></span><span style="display:flex;"><span>  limit <span style="color:#f92672">&lt;-</span> plyr<span style="color:#f92672">::</span><span style="color:#a6e22e">round_any</span>(limit, <span style="color:#ae81ff">10</span>)
</span></span><span style="display:flex;"><span>  out <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">list</span>()
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">for</span> (i <span style="color:#66d9ef">in</span> <span style="color:#a6e22e">seq</span>(limit <span style="color:#f92672">/</span> <span style="color:#ae81ff">10</span>)) out[[i]] <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">myGET</span>(limit, page <span style="color:#f92672">=</span> i)
</span></span><span style="display:flex;"><span>  df <span style="color:#f92672">&lt;-</span> dplyr<span style="color:#f92672">::</span><span style="color:#a6e22e">bind_rows</span>(out)
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span>(df)
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><blockquote>
<p>This is psuedocode, so you can&rsquo;t run this.</p>
</blockquote>
<p>In general I like to return data.frame&rsquo;s to users whenever possible as I think most users are most familiar with data.frame&rsquo;s.</p>
<p>In the above example we need to do a few things when dealing with pagination:</p>
<ul>
<li>sort out how many requests to make. the above doesn&rsquo;t yet check that the <code>limit</code> value is a numeric or integer, and there&rsquo;s all kinds of edge cases depending on what number is given by the user with respect to pagination</li>
<li>make each http request. I used a for loop, but anything similar can be used. one needs to decide how to handle errors if you&rsquo;re doing multiple requests. do you stop with an error if there&rsquo;s an error in one of the requests, or do you catch that and proceed? If you do catch it how do you let the user know, or do you just remove that error from results?</li>
<li>combine results into a single output (data.frame most likely/ideally). we want the user to get the same results back whether they request one page of results or many, so we need to do the work to make sure the output looks the same. This step also introduces possible pain points in that any result record can have novel things in it that cause your result combining code to error. Do you do a minimal combination approach (e.g. let <code>jsonlite::fromJSON</code> convert to list/data.frame&rsquo;s where possible; but this means that there can be nested lists in data.frame&rsquo;s, which many users do not like); or do you roll your own bespoke data munging/combination code to make sure the output data.frame is really easy to use with no nested lists, etc.?  If you do the latter that will most likely be slower, but will be better output for the user. However, maybe most users want to combine the data on their own, so perhaps you should take up as little time as possible parsing/munging data so the user has to wait less time.</li>
</ul>
<p>The overall message here is that there&rsquo;s many points throughout this process that require decisions to be made with respect to how much complexity you&rsquo;d like to take care of yourself as the developer vs. how much you&rsquo;d like to leave up to the user.</p>
<p>With complexity inside the function, there&rsquo;s more to maintain and more possible bugs, but it&rsquo;s easier for the user.</p>
<p>With complexity exposed to the user, and simpler code inside the function, each user has to sort out how to work with the output and/or do the pagination (or whatever it is) themselves. But with less complexity inside the function, there will likely be fewer bugs.</p>
<blockquote>
<p>Note: i&rsquo;ve been trying to make pagination with web APIs easier, check out the Paginator helper in the crul package <a href="https://github.com/ropensci/crul/blob/master/R/paginator.R">https://github.com/ropensci/crul/blob/master/R/paginator.R</a></p>
</blockquote>
<h2 id="so-what">So what?</h2>
<p>Perhaps others have figured this out and I&rsquo;m the only one struggling with this? I&rsquo;m sure I&rsquo;ll continue to go back and forth on this pendulum. Would love to know how others think about this.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Metrics for open source projects</title>
      <link>http://localhost:1313/2015/10/open-source-metrics/</link>
      <pubDate>Mon, 19 Oct 2015 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2015/10/open-source-metrics/</guid>
      <description>Measuring use of open source software isn&amp;rsquo;t always straightforward. The problem is especially acute for software targeted largely at academia, where usage is not measured just by software downloads, but also by citations.
Citations are a well-known pain point because the citation graph is privately held by iron doors (e.g., Scopus, Google Scholar). New ventures aim to open up citation data, but of course it&amp;rsquo;s an immense amount of work, and so does not come quickly.</description><content:encoded><![CDATA[ ]]>
               <![CDATA[<p>Measuring use of open source software isn&rsquo;t always straightforward. The problem is especially acute for software targeted largely at academia, where usage is not measured just by software downloads, but also by citations.</p>
<p>Citations are a well-known pain point because the citation graph is privately held by iron doors (e.g., <a href="https://www.scopus.com/">Scopus</a>, <a href="https://scholar.google.com/">Google Scholar</a>). New ventures aim to open up citation data, but of course it&rsquo;s an immense amount of work, and so does not come quickly.</p>
<p>The following is a laundry list of metrics on software of which I am aware, and some of which I use in our <a href="https://ropensci.github.io/biweekly/">rOpenSci twice monthly updates</a>.</p>
<p>I primarily develop software for the R language, so some of the metrics are specific to R, but many are not. In addition, we (rOpenSci) don&rsquo;t develop web apps, which may bring in an additional set of metrics not covered below.</p>
<p>I organize by source instead of type of data because some sources give multiple kinds of data - I note what kinds of data they give with <!-- raw HTML omitted -->labels<!-- raw HTML omitted -->.</p>
<h2 id="cran-downloads">CRAN downloads</h2>

<span class="label label-warning">downloads</span>

<ul>
<li>Link: <a href="https://github.com/metacran/cranlogs.app">https://github.com/metacran/cranlogs.app</a></li>
<li>This is a REST API for CRAN downloads from the RStudio CRAN CDN. Note however, that the RStudio CDN is only one of many - there are other mirrors users can insall packages from, and are not included in this count. However, a significant portion of downloads probably come from the RStudio CDN.</li>
<li>Other programming languages have similar support, e.g., <a href="https://guides.rubygems.org/rubygems-org-api/">Ruby</a> and <a href="https://github.com/npm/download-counts">Node</a>.</li>
</ul>
<h2 id="lagotto">Lagotto</h2>
<p><!-- raw HTML omitted --><!-- raw HTML omitted -->citations<!-- raw HTML omitted --> <!-- raw HTML omitted -->github<!-- raw HTML omitted --> <!-- raw HTML omitted -->social-media<!-- raw HTML omitted --><!-- raw HTML omitted --></p>
<ul>
<li>Link: <a href="https://software.lagotto.io/works">https://software.lagotto.io/works</a></li>
<li>Lagotto is a Rails application, developed by <a href="https://github.com/mfenner">Martin Fenner</a>, originally designed to collect and provide article level metrics for scientific publications at Public Library of Science. It is now used by many publishers, and there are installations of Lagotto targeting <a href="https://mdc.lagotto.io/">datasets</a> and <a href="https://software.lagotto.io/works">software</a>.</li>
<li>Discussion forum: <a href="https://discuss.lagotto.io/">https://discuss.lagotto.io/</a></li>
</ul>
<h2 id="depsy">Depsy</h2>
<p><!-- raw HTML omitted --><!-- raw HTML omitted -->citations<!-- raw HTML omitted --> <!-- raw HTML omitted -->github<!-- raw HTML omitted --><!-- raw HTML omitted --></p>
<ul>
<li>Link: <a href="https://depsy.org">https://depsy.org</a></li>
<li>This is a nascent venture by the <a href="https://impactstory.org/about">ImpactStory team</a> that seeks to uncover the impact of research software. As far as I can tell, they&rsquo;ll collect usage via software downloads and citations in the literature.</li>
</ul>
<h2 id="web-site-analytics">Web Site Analytics</h2>
<p><!-- raw HTML omitted --><!-- raw HTML omitted -->page-views<!-- raw HTML omitted --><!-- raw HTML omitted --></p>
<ul>
<li>If you happen to have a website for your project, collecting analytics is a way to gauge views of the landing page, and any help/tutorial pages you may have. A good easy way to do this is a deploy a basic site on your <code>gh-pages</code> branch of your GitHub repo, and use the easily integrated Google Analytics.</li>
<li>Whatever analytics you use, in my experience this mostly brings up links from google searches and blog posts that may mention your project</li>
<li>Google Analytics beacon (for README views): <a href="https://github.com/igrigorik/ga-beacon">https://github.com/igrigorik/ga-beacon</a>. I haven&rsquo;t tried this yet, but seems promising.</li>
</ul>
<h2 id="auomated-tracking-ssnmp">Auomated tracking: SSNMP</h2>
<p><!-- raw HTML omitted --><!-- raw HTML omitted -->citations<!-- raw HTML omitted --> <!-- raw HTML omitted -->github<!-- raw HTML omitted --><!-- raw HTML omitted --></p>
<ul>
<li>Link: <a href="https://scisoft-net-map.isri.cmu.edu">https://scisoft-net-map.isri.cmu.edu</a></li>
<li>Scientific Software Network Map Project</li>
<li>This is a cool NSF funded project by Chris Bogart that tracks software usage via GitHub and citations in literature.</li>
</ul>
<h2 id="google-scholar">Google Scholar</h2>
<p><!-- raw HTML omitted --><!-- raw HTML omitted -->citations<!-- raw HTML omitted --><!-- raw HTML omitted --></p>
<ul>
<li>Link: <a href="https://scholar.google.com/">https://scholar.google.com/</a></li>
<li>Searching Google Scholar for software citations manually is fine at a small scale, but at a larger scale scraping is best. However, you&rsquo;re not legally supposed to do this, and Google will shut you down.</li>
<li>Could try using g-scholar alerts as well, especially if new citations of your work are infrequent.</li>
<li>If you have institutional access to Scopus/Web of Science, you could search those, but I don&rsquo;t push this as an option since it&rsquo;s available to so few.</li>
</ul>
<h2 id="github">GitHub</h2>
<p><!-- raw HTML omitted --><!-- raw HTML omitted -->github<!-- raw HTML omitted --><!-- raw HTML omitted --></p>
<ul>
<li>Links: <a href="https://developer.github.com/v3/">https://developer.github.com/v3/</a></li>
<li>I keep a list of rOpenSci uses found in GitHub repos at <a href="https://discuss.ropensci.org/t/use-of-some-ropensci-packages-on-github/137">https://discuss.ropensci.org/t/use-of-some-ropensci-packages-on-github/137</a></li>
<li>GitHub does collect traffic data on each repo (clones, downloads, page views), but they are not exposed in the API. I&rsquo;ve bugged them a bit about this - hopefully we&rsquo;ll be able to get that dat in their API soon.</li>
<li>Bitbucket/Gitlab - don&rsquo;t use them, but I assume they also provide some metrics via their APIs</li>
</ul>
<h2 id="other">Other</h2>
<ul>
<li>Support forums: Whether you use UserVoice, Discourse, Google Groups, Gitter, etc., depending on your viewpoint, these interactions could be counted as metrics of software usage.</li>
<li>Emails: I personally get a lot of emails asking for help with software I maintain. I imagine this is true for most software developers. Counting these could be another metric of software usage, although I never have counted mine.</li>
<li>Social media: See Lagotto above, which tracks some social media outlets.</li>
<li>Code coverage: There are many options now for code coverage, integrated with each Travis-CI build. A good option is <a href="https://codecov.io">CodeCov</a>. CodeCov gives percentage test coverage, which one could use as one measure of code quality.</li>
<li>Reviews: There isn&rsquo;t a lot of code review going on that I&rsquo;m aware of. Even if there was, I suppose this would just be a logical TRUE/FALSE.</li>
<li>Cash money y&rsquo;all: Grants/consulting income/etc. could be counted as a metric.</li>
<li>Users: If you require users to create an account or similar before getting your software, you have a sense of number of users and perhaps their demographics.</li>
</ul>
<h2 id="promising">Promising</h2>
<p>Some software metrics things on the horizon that look interesting:</p>
<ul>
<li><a href="https://geodynamics.org/cig/projects/saga/">Software Attribution for Geoscience Applications</a> (SAGA)</li>
<li>Crossref: They have <a href="https://github.com/CrossRef/rest-api-doc/blob/master/rest_api.md">a very nice API</a>, but they don&rsquo;t yet provide citation counts - but <a href="https://github.com/CrossRef/rest-api-doc/issues/46">they may soon</a>.</li>
<li><a href="https://github.com/njsmith/sempervirens">njsmith/sempervirens</a> - a prototype for <em>gathering anonymous, opt-in usage data for open scientific software</em></li>
<li><a href="https://github.com/force11/force11-scwg">Force11 Software Citation Working Group</a> - <em>&hellip;produce a consolidated set of citation principles in order to encourage broad adoption of a consistent policy for software citation across disciplines and venues</em></li>
</ul>
<h2 id="missed">Missed?</h2>
<p>I&rsquo;m sure I missed things. Let me know.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Code display in scholarly journals</title>
      <link>http://localhost:1313/2013/10/codeinpapers/</link>
      <pubDate>Fri, 25 Oct 2013 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2013/10/codeinpapers/</guid>
      <description>Code in journals, that is, code you would type to do some programmatic operation in say R or Python, is kind of a mess to say the least. Okay, so you can SEE code in papers, but code is not formatted in a way that facilites reuse. If an author in a paper writes out some code for software they create, or an analysis they do in the paper, wouldn&amp;rsquo;t it be nice for a reader to be able to copy and paste that code directly into whatever environment that code should execute in, and actually work.</description><content:encoded><![CDATA[ ]]>
               <![CDATA[<p>Code in journals, that is, code you would type to do some programmatic operation in say R or Python, is kind of a mess to say the least. Okay, so you can <strong>SEE</strong> code in papers, but code is not formatted in a way that facilites reuse. If an author in a paper writes out some code for software they create, or an analysis they do in the paper, wouldn&rsquo;t it be nice for a reader to be able to copy and paste that code directly into whatever environment that code should execute in, and actually work. Of course there is dependencies, etc. for that software to worry about, but here I am just concerned with the code formatting in articles. Code is displayed as an image in some cases (gasp!). Additionally, there&rsquo;s this thing called the internet, and we can use color, so let&rsquo;s highlight code already. At least in one of our recent <a href="http://ropensci.org/">rOpenSci</a> papers in F1000 Research, <a href="http://f1000research.com/articles/2-191/v1">they do use syntax highlighting</a> - w00t!</p>
<p>Carl Boettiger (@cboettig) and I disccused how frustrated we are with the state of code in papers, and started a Github gist, listing publishers/journals and how they display code. It lives here: <a href="https://gist.github.com/sckott/6787278">https://gist.github.com/sckott/6787278</a>.</p>
<p>We have a start, but would like your help in filling this list out more. What are the code presentation practices for various publishers and journals? With a list of what currently happens, perhaps we can start to convince publishers to display code more appropriately, partly by pointing out that &ldquo;XYZ publisher does it really well, why can&rsquo;t you?&rdquo;. I tried to record info in a standardized way across publishers&hellip;</p>
]]></content:encoded>
    </item>
    <item>
      <title>On writing, sharing, collaborating, and hosting code for science</title>
      <link>http://localhost:1313/2013/07/code/</link>
      <pubDate>Sat, 20 Jul 2013 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2013/07/code/</guid>
      <description>I recently engaged with a number of tweeps in response to my tweet:
Rule number 1 wrt science code: DO NOT post your code on your personal website
That tweet wasn&amp;rsquo;t super clear, and it&amp;rsquo;s difficult to convey my thoughts in a tweet. What I should have said was do post your code - ideally on Github/Bitbucket/etc. Here goes with a much longer version to explain what I meant. The tweet was just about where to host code, whereas the following is about more than that, but related.</description><content:encoded><![CDATA[ ]]>
               <![CDATA[<p>I recently engaged with a number of tweeps in response to my tweet:</p>
<blockquote>
<p>Rule number 1 wrt science code: DO NOT post your code on your personal website</p>
</blockquote>
<p>That tweet wasn&rsquo;t super clear, and it&rsquo;s difficult to convey my thoughts in a tweet. What I should have said was do post your code - ideally on Github/Bitbucket/etc. Here goes with a much longer version to explain what I meant. The tweet was just about where to host code, whereas the following is about more than that, but related.</p>
<h3 id="code-writing-during-analyses-etc">Code writing during analyses, etc.</h3>
<p>When you write code to do simulations, analyses, data manipulation, visualization - whatever it is - it helps to version your code. That is, not naming files like <em>myfile_v1.r</em>, <em>myfile_v2.r</em>, etc., but with versioning using version control systems (VCS) like <a href="http://git-scm.com/">git</a>, <a href="http://subversion.apache.org/">svn</a>, <a href="http://mercurial.selenic.com/wiki/">mercurial</a>, etc. Although git will give you headaches during the learning process, it takes care of versioning your code for you, finding differences in different versions, helps you manage conflicts from different contributors, and allows you to restore that old code you accidentally deleted.</p>
<p>And you don&rsquo;t have to use git or svn on a code hosting site - you can use git or svn locally on your own machine. However, there are many benefits to putting your code up on the interwebs.</p>
<h3 id="collaborating-on-code">Collaborating on code</h3>
<p>Whenever you collaborate on code writing you have the extreme joy of dealing with conflicts. Perhaps you use Dropbox for collaborating on some code writing. Crap, now there is a line of code that messes up the analysis, and you don&rsquo;t know who put it there, and why it&rsquo;s there. Wouldn&rsquo;t it be nice to have a place to collect bugs in the code.</p>
<p>All of these things become easy if you host code on a service such as Github. If you are already versioning your code with git you are in luck - all you need to do is create an account on github/bitbucket and push your code up. If not, you should definitley learn git.</p>
<p>Hosting your code on Github (or Bitbucket, etc.) allows each collaborator to work separately on the code simultaneously, then merge their code together, while git helps you take care of merging. An awesome feature of git (and other VCS&rsquo;s) is branching. What the heck is that? Basically, you can create a complete copy of your git project, do any changes you want, then throw it away or merge it back in to your main branch. Pretty sweet.</p>
<h3 id="sharing-your-code">Sharing your code</h3>
<p>Whether sharing your code with a collaborator, or with the world, if you put code on a website created specifically for hosting code, I would argue your life would be easier. Groups like Github and Bitbucket have solved a lot of problems around versioning code, displaying it, etc., whereas your website (whether it be Google sites, Wordpress, Tumblr, etc.) can not say the same.</p>
<p>It is becoming clear to many that open science has many benefits. For the sake of transparency and contributing to the public science good, I would argue that sharing your code is the right thing to do, especially given that most of us are publicly funded. However, even if you don&rsquo;t want to share your code publicly, you can get free private hosting with an <a href="https://github.com/edu">academic discount on Github</a>, and Bitbucket gives you private hosting for free.</p>
<h3 id="contributing-to-the-software-you-use">Contributing to the software you use</h3>
<p>Much of the software you and I use in R, Python, etc. is likely hosted on a code hosting platform such as Github, Bitbucket, R-Forge, etc. Code gets better faster if its users report bugs and request features to the software authors. By creating an account on Github, for example, to host your own code, you can easily report bugs or request features where others are developing software you use. This is better than email as only those two people get the benefit of learning from the conversation - while engaging where the software is created, or on a related mailing list, helps everyone.</p>
<h3 id="on-long-term-availability-of-code">On long-term availability of code</h3>
<p>Where is the best place to host your code in the long-term. Some may trust their own website over a company - a company can go out of business, be sold to another company and then be shut down, etc. However, code on personal websites can also be lost if a person moves institutions, etc. If you use a VCS, and host your code on Bitbucket/Github/Etc., even if they shut down, you will always have the same code that was up on their site, and you can host it on the newer awesome code hosting site. In addition, even if a company shuts down and you have to move your code, you are getting all the benefits as stated above.</p>
<h3 id="anyway">Anyway&hellip;</h3>
<p>My point is this: do post your code somewhere, even if on your own site, but I think you&rsquo;ll find that you and others can get the most out of your code if you host it on Bitbucket, Github, etc. Do tell me if you think I&rsquo;m wrong and why.</p>
<h3 id="a-few-resources-if-youre-so-inclined">A few resources if you&rsquo;re so inclined</h3>
<ul>
<li><a href="http://hybridpedagogy.com/Journal/files/GitHub_for_Academics.html">Push, Pull, Fork: GitHub for Academics</a></li>
<li>Carl Boettiger has some interesting posts on <a href="http://carlboettiger.info/2012/05/06/research-workflow.html">research workflow</a> and <a href="http://carlboettiger.info/2012/12/06/github-issues-tracker:-the-perfect-research-todo-list">github issues as a research to do list</a></li>
<li>Do have a look at <a href="http://inundata.org/">Karthik Ram&rsquo;s</a> paper on how git can facilitate greater reproducibility and transparency in science <a href="http://www.scfbm.org/content/8/1/7/abstract">here</a>.</li>
<li>Github is posting a bunch of videos on Youtube that are quite helpful for learning how to use git and Github <a href="https://www.youtube.com/channel/UCP7RrmoueENv9TZts3HXXtw">here</a></li>
<li>Git GUIs make using git easier:
<ul>
<li><a href="http://www.sourcetreeapp.com/">SourceTree</a></li>
<li><a href="http://gitboxapp.com/">GitBox</a></li>
<li><a href="http://mac.github.com/">Github&rsquo;s git GUI</a></li>
</ul>
</li>
</ul>
]]></content:encoded>
    </item>
  </channel>
</rss>
