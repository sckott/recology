<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Testing on Recology</title>
    <link>http://localhost:1313/tags/testing/</link>
    <description>Recent content in Testing on Recology</description>
    <generator>Hugo -- 0.144.2</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 13 Feb 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/testing/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>webmockr v2: another day, another stub</title>
      <link>http://localhost:1313/2025/02/webmockr-v2/</link>
      <pubDate>Thu, 13 Feb 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2025/02/webmockr-v2/</guid>
      <description>&lt;p&gt;&lt;code&gt;webmockr&lt;/code&gt; v2 is here.&lt;/p&gt;
&lt;p&gt;You can find the source at &lt;a href=&#34;https://github.com/ropensci/webmockr&#34;&gt;https://github.com/ropensci/webmockr&lt;/a&gt;, and the docs at &lt;a href=&#34;https://docs.ropensci.org/webmockr&#34;&gt;https://docs.ropensci.org/webmockr&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;There&amp;rsquo;s some big changes in this version; most importantly a breaking change, thus the major version change this time.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s a run down of the important items in this release.&lt;/p&gt;
&lt;h2 id=&#34;installation&#34;&gt;Installation&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pak&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;pak&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;webmockr&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;the-breaking-change-error-handling&#34;&gt;The breaking change: error handling&lt;/h2&gt;
&lt;p&gt;Previous to v2 when stubs were constructed starting with &lt;code&gt;stub_request()&lt;/code&gt; if an error occurred in a pipe chain, or non-pipe flow, the stub created prior to the error remained. This was not correct behavior from a logical perspective - i.e., one would expect if an error occurred that the thing they were trying to do did not stick around. The new behavior as of v2 deletes the stub upon any error during its creation. Under the hood we&amp;rsquo;re using &lt;code&gt;withCallingHandlers()&lt;/code&gt; to handle different types of errors, throw warnings, etc. For example, &lt;code&gt;wi_th()&lt;/code&gt; only accepts types &lt;code&gt;list&lt;/code&gt; and &lt;code&gt;partial&lt;/code&gt;, so fails with this code:&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p><code>webmockr</code> v2 is here.</p>
<p>You can find the source at <a href="https://github.com/ropensci/webmockr">https://github.com/ropensci/webmockr</a>, and the docs at <a href="https://docs.ropensci.org/webmockr">https://docs.ropensci.org/webmockr</a>.</p>
<p>There&rsquo;s some big changes in this version; most importantly a breaking change, thus the major version change this time.</p>
<p>Here&rsquo;s a run down of the important items in this release.</p>
<h2 id="installation">Installation</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>pak<span style="color:#f92672">::</span><span style="color:#a6e22e">pak</span>(<span style="color:#e6db74">&#34;webmockr&#34;</span>)
</span></span></code></pre></div><h2 id="the-breaking-change-error-handling">The breaking change: error handling</h2>
<p>Previous to v2 when stubs were constructed starting with <code>stub_request()</code> if an error occurred in a pipe chain, or non-pipe flow, the stub created prior to the error remained. This was not correct behavior from a logical perspective - i.e., one would expect if an error occurred that the thing they were trying to do did not stick around. The new behavior as of v2 deletes the stub upon any error during its creation. Under the hood we&rsquo;re using <code>withCallingHandlers()</code> to handle different types of errors, throw warnings, etc. For example, <code>wi_th()</code> only accepts types <code>list</code> and <code>partial</code>, so fails with this code:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">library</span>(webmockr)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">stub_request</span>(<span style="color:#e6db74">&#34;get&#34;</span>, <span style="color:#e6db74">&#34;https://eu.httpbin.org&#34;</span>) <span style="color:#f92672">%&gt;%</span> <span style="color:#a6e22e">wi_th</span>(query <span style="color:#f92672">=</span> <span style="color:#ae81ff">5</span>)
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; Error in `wi_th()`:</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; ! `z$query` must be of class list or partial</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; Run `rlang::last_trace()` to see where the error occurred.</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; Warning message:</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; Encountered an error constructing stub</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; • Removed stub</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; • To see a list of stubs run stub_registry()</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">stub_registry</span>()
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; &lt;webmockr stub registry&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;  Registered Stubs</span>
</span></span></code></pre></div><p>Note how we tell you the error, that the stub was removed, and there&rsquo;s no stubs after running <code>stub_registry()</code>.</p>
<h2 id="partial-matching">Partial matching</h2>
<p>Stolen from Ruby&rsquo;s webmock, new functions are added <code>including()</code> and <code>excluding()</code> for use with <code>wi_th()</code> to say that you want a stub to match on a partial request body or query. Note that you could already do partial matching on request headers.</p>
<p>For example, let&rsquo;s say you have an http request you want to match that will have a large request body but you know you can uniquely match it and only it with just one component of that body. With partial matching it becomes easier and less code, for example, to match this http request:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">POST</span>(<span style="color:#e6db74">&#34;https://hb.opencpu.org/post&#34;</span>,
</span></span><span style="display:flex;"><span>  body <span style="color:#f92672">=</span> <span style="color:#a6e22e">list</span>(
</span></span><span style="display:flex;"><span>    fruit <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;pear&#34;</span>,
</span></span><span style="display:flex;"><span>    meat <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;chicken&#34;</span>,
</span></span><span style="display:flex;"><span>    bread <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;wheat&#34;</span>,
</span></span><span style="display:flex;"><span>    cereal <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;cheerios&#34;</span>,
</span></span><span style="display:flex;"><span>    pizza <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;veggie&#34;</span>,
</span></span><span style="display:flex;"><span>    apple <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;pink-lady&#34;</span>,
</span></span><span style="display:flex;"><span>    juice <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;mango&#34;</span>,
</span></span><span style="display:flex;"><span>    poptart <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;raspberry&#34;</span>
</span></span><span style="display:flex;"><span>  )
</span></span><span style="display:flex;"><span>)
</span></span></code></pre></div><p>We&rsquo;d only need this stub</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">stub_request</span>(<span style="color:#e6db74">&#34;post&#34;</span>, <span style="color:#e6db74">&#34;https://hb.opencpu.org/post&#34;</span>) <span style="color:#f92672">%&gt;%</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">wi_th</span>(body <span style="color:#f92672">=</span> <span style="color:#a6e22e">including</span>(<span style="color:#a6e22e">list</span>(fruit <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;pear&#34;</span>)))
</span></span></code></pre></div><p>rather than having to specify every part of the request body.</p>
<h2 id="body-diffing">Body diffing</h2>
<p>Inspired by Ruby&rsquo;s <a href="https://github.com/bblimke/webmock">webmock</a> that has an option to show request body diffs when there&rsquo;s no stub that matches an http request - <code>webmockr</code> wanted some of that magic.</p>
<p>We&rsquo;ve added some new features for supporting request body diffs. There are two ways to use request body diffing.</p>
<p>First, you can toggle it on/off globally like</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">webmockr_configure</span>(show_body_diff <span style="color:#f92672">=</span> <span style="color:#66d9ef">TRUE</span>)
</span></span><span style="display:flex;"><span><span style="color:#75715e"># or</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">webmockr_configure</span>(show_body_diff <span style="color:#f92672">=</span> <span style="color:#66d9ef">FALSE</span>)
</span></span></code></pre></div><p>Second, a new function <code>stub_body_diff()</code> is a standalone function that compares by default the last stub created and the last http request made - but you can pass in any stub and http request. Note that body diffing functionality requires the suggested package <a href="https://github.com/brodieG/diffobj">diffobj</a>.</p>
<p><code>stub_body_diff()</code> uses by default the last stub and request made via the new functions <code>last_request()</code> and <code>last_stub()</code> - which get the last http request made and the last webmockr stub created, respectively. You can use these <code>last_*()</code> functions standalone as well to get the last stub or request as we keep track of those for you.</p>
<p>Here&rsquo;s an example:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">library</span>(webmockr)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">library</span>(crul)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">stub_request</span>(<span style="color:#e6db74">&#34;post&#34;</span>, <span style="color:#e6db74">&#34;https://hb.opencpu.org/post&#34;</span>) <span style="color:#f92672">%&gt;%</span>
</span></span><span style="display:flex;"><span>     <span style="color:#a6e22e">wi_th</span>(body <span style="color:#f92672">=</span> <span style="color:#a6e22e">list</span>(apple <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;green&#34;</span>))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">enable</span>()
</span></span><span style="display:flex;"><span>HttpClient<span style="color:#f92672">$</span><span style="color:#a6e22e">new</span>(<span style="color:#e6db74">&#34;https://hb.opencpu.org&#34;</span>)<span style="color:#f92672">$</span><span style="color:#a6e22e">post</span>(
</span></span><span style="display:flex;"><span>     path <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;post&#34;</span>, body <span style="color:#f92672">=</span> <span style="color:#a6e22e">list</span>(apple <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;red&#34;</span>)
</span></span><span style="display:flex;"><span>   )
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; Error in `adap$handle_request()`:</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; ! Real HTTP connections are disabled.</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; ! Unregistered request:</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; ℹ POST:  https://hb.opencpu.org/post  with body {apple: red}  with headers {Accept-Encoding: gzip, deflate, Accept: application/json, text/xml, application/xml, */*}</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; You can stub this request with the following snippet:</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;  stub_request(&#39;post&#39;, uri = &#39;https://hb.opencpu.org/post&#39;) %&gt;%</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;      wi_th(</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;        headers = list(&#39;Accept-Encoding&#39; = &#39;gzip, deflate&#39;, &#39;Accept&#39; = &#39;application/json, text/xml, application/xml, */*&#39;),</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;        body = list(apple=&#34;red&#34;)</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;      )</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; registered request stubs:</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;  POST: https://hb.opencpu.org/post   with body {&#34;apple&#34;:&#34;green&#34;}</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; ============================================================</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; Run `rlang::last_trace()` to see where the error occurred.</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">stub_body_diff</span>()
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; &lt; stub$body    &gt; request$b..</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; @@ 1,3 @@      @@ 1,3 @@</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   $apple         $apple</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; &lt; [1] &#34;green&#34;  &gt; [1] &#34;red&#34;</span>
</span></span></code></pre></div><p>In the console, <code>diffobj</code> provides colorized output that doesn&rsquo;t show up in the example above.</p>
<h2 id="give-it-a-spin">Give it a spin</h2>
<p>What do you think? I think this version provides greater flexibility in matching requests, better error behavior, and greater ability to debug issues. Check out the <a href="https://github.com/ropensci/webmockr">repo</a>, the <a href="https://docs.ropensci.org/webmockr">docs</a>, and report any <a href="https://github.com/ropensci/webmockr/issues">issues</a>.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Refactoring notes</title>
      <link>http://localhost:1313/2024/03/refactoring-notes/</link>
      <pubDate>Wed, 20 Mar 2024 15:24:38 -0700</pubDate>
      <guid>http://localhost:1313/2024/03/refactoring-notes/</guid>
      <description>&lt;p&gt;I worked on a refactor of an R package at work the other day. Here&amp;rsquo;s some notes about that after doing the work. This IS NOT a best practices post - it&amp;rsquo;s just a collection of thoughts.&lt;/p&gt;
&lt;p&gt;For context, the package is an API client.&lt;/p&gt;
&lt;p&gt;It made sense to break the work for any given exported function into the following components, as applicable depending on the endpoint being handled (some endpoints needed just a few lines of code, so those funtions were left unchanged):&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>I worked on a refactor of an R package at work the other day. Here&rsquo;s some notes about that after doing the work. This IS NOT a best practices post - it&rsquo;s just a collection of thoughts.</p>
<p>For context, the package is an API client.</p>
<p>It made sense to break the work for any given exported function into the following components, as applicable depending on the endpoint being handled (some endpoints needed just a few lines of code, so those funtions were left unchanged):</p>
<ul>
<li>query building</li>
<li>http request (including error handling)</li>
<li>http response handling</li>
</ul>
<p>Before this separation each exported function did all three of the above items. For example, before the change the single function with all the code is called <code>fetch_items</code>. After the separation we still have the exported function <code>fetch_items</code>, but within <code>fetch_items</code> are up to three functions (as applicable) that have distinct duties:</p>
<ul>
<li><code>fetch_items_query</code>: prepare the http request components</li>
<li><code>fetch_items_http</code>: the http request handling, includes http status code checking/handling</li>
<li><code>fetch_items_process</code>: process the http response</li>
</ul>
<p>So code would be:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>fetch_items <span style="color:#f92672">&lt;-</span> <span style="color:#66d9ef">function</span>(a, b, token) {
</span></span><span style="display:flex;"><span>  request <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">fetch_items_query</span>(a, b)
</span></span><span style="display:flex;"><span>  response <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">fetch_items_http</span>(request, token)
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">fetch_items_process</span>(response)
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>You may still need to do additional refactoring for the functions used inside of <code>fetch_items</code>. In fact, the functions that do processing of the http response (i.e., <code>fetch_items_process</code>) are sometimes pretty massive and need refactoring - BUT! are waiting on examples that will touch all the code paths - womp womp womp&hellip;</p>
<p>This separation of concerns and code improves the package because:</p>
<ul>
<li><em>You can iterate on tests faster for code that&rsquo;s not doing http requests</em>. For example, the response handling function can rapidly run through a lot of tests since it doesn&rsquo;t have to wait on http requests - assuming you have responses cached in the package to run through it, which is easy enough
<ul>
<li>You can still run fast tests on tests that do http requests if you use fixtures so you&rsquo;re not doing real http request other than to record the fixtures, e.g. using package <a href="https://github.com/ropensci/vcr">vcr</a></li>
</ul>
</li>
<li><em>Separating concerns makes the code easier to reason about</em>. That is - assuming you have well named functions whose intent is clear - it&rsquo;s easier to understand code flow, etc.</li>
<li><em>Smaller functions are easier to understand</em>. This is pretty straightforward, and not specific to any particular type of code. If there&rsquo;s less going on in any one function it&rsquo;s easier to make changes to a package.</li>
<li><em>Breaking code down may reveal redundant code blocks that could be reused</em>. For example, after pulling out code from different functions you might notice that you&rsquo;re doing very similar tasks and can make a function that can be used across the exported functions rather than having repeated code.</li>
</ul>
<h3 id="dont-forget-about-failing-early">don&rsquo;t forget about failing early</h3>
<p>I had to go back and make sure fail early code wasn&rsquo;t lost in breaking up code into chunks. For example, if you are checking if a parameter is of an acceptable type, or some other critical piece is not correct/available, those things should be done first thing so the function fails early.</p>
]]></content:encoded>
    </item>
    <item>
      <title>finding truffles</title>
      <link>http://localhost:1313/2020/01/test-truffles/</link>
      <pubDate>Thu, 30 Jan 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2020/01/test-truffles/</guid>
      <description>&lt;p&gt;The bad thing about making software is that you can sometimes make it easier
for someone to shoot themselves in the foot. The good thing about software
is that you can make more software to help them not shoot a foot off.&lt;/p&gt;
&lt;p&gt;The R package &lt;a href=&#34;https://github.com/ropensci/vcr&#34;&gt;vcr&lt;/a&gt;, an R port of the &lt;a href=&#34;https://github.com/vcr/vcr&#34;&gt;Ruby library&lt;/a&gt; of the same name,
records and plays back HTTP requests. Some HTTP requests can have secrets (e.g.,
passwords, API keys, etc.) in their requests and/or responses. These secrets
can then accidentally end up on the Internet, where bad people may find them.
These secrets are sometimes called &amp;ldquo;truffles&amp;rdquo;.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>The bad thing about making software is that you can sometimes make it easier
for someone to shoot themselves in the foot. The good thing about software
is that you can make more software to help them not shoot a foot off.</p>
<p>The R package <a href="https://github.com/ropensci/vcr">vcr</a>, an R port of the <a href="https://github.com/vcr/vcr">Ruby library</a> of the same name,
records and plays back HTTP requests. Some HTTP requests can have secrets (e.g.,
passwords, API keys, etc.) in their requests and/or responses. These secrets
can then accidentally end up on the Internet, where bad people may find them.
These secrets are sometimes called &ldquo;truffles&rdquo;.</p>
<p>There&rsquo;s a suite of tools out there for finding these truffles (e.g.,
<a href="https://github.com/dxa4481/truffleHog">truffleHog</a>, <a href="https://github.com/awslabs/git-secrets">gitsecrets</a>) that use tools like regex and entropy.</p>
<p>Despite there being existing tools, users tend to use things that are
built in the language(s) they know; that are easy to incorporate into
their existing workflows. Towards this end, I&rsquo;ve been working on a new
R package <a href="https://github.com/ropenscilabs/trufflesniffer">trufflesniffer</a>.</p>
<p>trufflesniffer doesn&rsquo;t do any fancy entropy stuff, and doesn&rsquo;t try to
find secrets without any informed knowledge. Rather, the user supplies
the secrets that they want to look for and trufflesniffer looks for
them. In the future I&rsquo;d look to see if it can be used without
any user inputs.</p>
<p>terminology:</p>
<ul>
<li>sniff: search for a secret</li>
</ul>
<p>links:</p>
<ul>
<li>src: <a href="https://github.com/ropenscilabs/trufflesniffer">https://github.com/ropenscilabs/trufflesniffer</a></li>
<li>docs: <a href="https://docs.ropensci.org/trufflesniffer">https://docs.ropensci.org/trufflesniffer</a></li>
</ul>
<h2 id="install">Install</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>remotes<span style="color:#f92672">::</span><span style="color:#a6e22e">install_github</span>(<span style="color:#e6db74">&#34;ropenscilabs/trufflesniffer&#34;</span>)
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">library</span>(trufflesniffer)
</span></span></code></pre></div><h2 id="directory">directory</h2>
<p>You can &ldquo;sniff&rdquo; a file directory or a package: <code>sniff_one()</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#75715e"># crete a directory</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">Sys.setenv</span>(A_KEY <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;a8d#d%d7g7g4012a4s2&#34;</span>)
</span></span><span style="display:flex;"><span>path <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">file.path</span>(<span style="color:#a6e22e">tempdir</span>(), <span style="color:#e6db74">&#34;foobar&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">dir.create</span>(path)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># no matches</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">sniff_one</span>(path, <span style="color:#a6e22e">Sys.getenv</span>(<span style="color:#e6db74">&#34;A_KEY&#34;</span>))
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; named list()</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># add files with the secret</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">cat</span>(<span style="color:#a6e22e">paste0</span>(<span style="color:#e6db74">&#34;foo\nbar\nhello\nworld\n&#34;</span>, 
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">Sys.getenv</span>(<span style="color:#e6db74">&#34;A_KEY&#34;</span>), <span style="color:#e6db74">&#34;\n&#34;</span>), file <span style="color:#f92672">=</span> <span style="color:#a6e22e">file.path</span>(path, <span style="color:#e6db74">&#34;stuff.R&#34;</span>))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># matches! prints the line number where the key was found</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">sniff_one</span>(path, <span style="color:#a6e22e">Sys.getenv</span>(<span style="color:#e6db74">&#34;A_KEY&#34;</span>))
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $stuff.R</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] 5</span>
</span></span></code></pre></div><h2 id="package">package</h2>
<p>sniff through a whole package</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>foo <span style="color:#f92672">&lt;-</span> <span style="color:#66d9ef">function</span>(key <span style="color:#f92672">=</span> <span style="color:#66d9ef">NULL</span>) {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">is.null</span>(key)) key <span style="color:#f92672">&lt;-</span> <span style="color:#e6db74">&#34;mysecretkey&#34;</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">package.skeleton</span>(name <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;mypkg&#34;</span>, list <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;foo&#34;</span>, path <span style="color:#f92672">=</span> <span style="color:#a6e22e">tempdir</span>())
</span></span><span style="display:flex;"><span>pkgpath <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">file.path</span>(<span style="color:#a6e22e">tempdir</span>(), <span style="color:#e6db74">&#34;mypkg&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">list.files</span>(pkgpath, recursive<span style="color:#f92672">=</span><span style="color:#66d9ef">TRUE</span>)
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;DESCRIPTION&#34;          &#34;man/foo.Rd&#34;           &#34;man/mypkg-package.Rd&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [4] &#34;NAMESPACE&#34;            &#34;R/foo.R&#34;              &#34;Read-and-delete-me&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># check the package</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">sniff_secrets_pkg</span>(dir <span style="color:#f92672">=</span> pkgpath, secrets <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(<span style="color:#e6db74">&#34;mysecretkey&#34;</span>))
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $mysecretkey</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $mysecretkey$foo.R</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] 3</span>
</span></span></code></pre></div><h2 id="fixtures">fixtures</h2>
<p>sniff specifically in a package&rsquo;s test fixtures.</p>
<p>Create a package</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>foo <span style="color:#f92672">&lt;-</span> <span style="color:#66d9ef">function</span>(key <span style="color:#f92672">=</span> <span style="color:#66d9ef">NULL</span>) {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">is.null</span>(key)) key <span style="color:#f92672">&lt;-</span> <span style="color:#e6db74">&#34;a2s323223asd423adsf4&#34;</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">package.skeleton</span>(<span style="color:#e6db74">&#34;herpkg&#34;</span>, list <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;foo&#34;</span>, path <span style="color:#f92672">=</span> <span style="color:#a6e22e">tempdir</span>())
</span></span><span style="display:flex;"><span>pkgpath <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">file.path</span>(<span style="color:#a6e22e">tempdir</span>(), <span style="color:#e6db74">&#34;herpkg&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">dir.create</span>(<span style="color:#a6e22e">file.path</span>(pkgpath, <span style="color:#e6db74">&#34;tests/testthat&#34;</span>), recursive <span style="color:#f92672">=</span> <span style="color:#66d9ef">TRUE</span>)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">dir.create</span>(<span style="color:#a6e22e">file.path</span>(pkgpath, <span style="color:#e6db74">&#34;tests/fixtures&#34;</span>), recursive <span style="color:#f92672">=</span> <span style="color:#66d9ef">TRUE</span>)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">cat</span>(<span style="color:#e6db74">&#34;library(vcr)
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">vcr::vcr_configure(&#39;../fixtures&#39;, 
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">  filter_sensitive_data = list(&#39;&lt;&lt;mytoken&gt;&gt;&#39; = Sys.getenv(&#39;MY_KEY&#39;))
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">)\n&#34;</span>, file <span style="color:#f92672">=</span> <span style="color:#a6e22e">file.path</span>(pkgpath, <span style="color:#e6db74">&#34;tests/testthat/helper-herpkg.R&#34;</span>))
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">cat</span>(<span style="color:#e6db74">&#34;a2s323223asd423adsf4\n&#34;</span>, 
</span></span><span style="display:flex;"><span>  file <span style="color:#f92672">=</span> <span style="color:#a6e22e">file.path</span>(pkgpath, <span style="color:#e6db74">&#34;tests/fixtures/foo.yml&#34;</span>))
</span></span><span style="display:flex;"><span><span style="color:#75715e"># check that you have a pkg at herpkg</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">list.files</span>(pkgpath)
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;DESCRIPTION&#34;        &#34;man&#34;                &#34;NAMESPACE&#34;         </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [4] &#34;R&#34;                  &#34;Read-and-delete-me&#34; &#34;tests&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">list.files</span>(<span style="color:#a6e22e">file.path</span>(pkgpath, <span style="color:#e6db74">&#34;tests/testthat&#34;</span>))
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;helper-herpkg.R&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">cat</span>(<span style="color:#a6e22e">readLines</span>(<span style="color:#a6e22e">file.path</span>(pkgpath, <span style="color:#e6db74">&#34;tests/testthat/helper-herpkg.R&#34;</span>)),
</span></span><span style="display:flex;"><span>  sep <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;\n&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; library(vcr)</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; vcr::vcr_configure(&#39;../fixtures&#39;, </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   filter_sensitive_data = list(&#39;&lt;&lt;mytoken&gt;&gt;&#39; = Sys.getenv(&#39;MY_KEY&#39;))</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; )</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">list.files</span>(<span style="color:#a6e22e">file.path</span>(pkgpath, <span style="color:#e6db74">&#34;tests/fixtures&#34;</span>))
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;foo.yml&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">readLines</span>(<span style="color:#a6e22e">file.path</span>(pkgpath, <span style="color:#e6db74">&#34;tests/fixtures/foo.yml&#34;</span>))
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;a2s323223asd423adsf4&#34;</span>
</span></span></code></pre></div><p>Check the package</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">Sys.setenv</span>(<span style="color:#e6db74">&#39;MY_KEY&#39;</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;a2s323223asd423adsf4&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">sniff_secrets_fixtures</span>(pkgpath)
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $MY_KEY</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $MY_KEY$foo.yml</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] 1</span>
</span></span></code></pre></div><h2 id="sniffer">sniffer</h2>
<p>The function <code>sniffer()</code> wraps the function <code>sniff_secrets_fixtures()</code> and
pretty prints to optimize non-interactive use. Run from within R or from the
command line non-interactively.</p>
<p>Example where a secret is found:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">sniffer</span>(pkgpath)
</span></span></code></pre></div><p><img alt="found" loading="lazy" src="/2020-01-30-test-truffles/found.png"></p>
<p>Example where a secret is not found:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">Sys.unsetenv</span>(<span style="color:#e6db74">&#39;MY_KEY&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">sniffer</span>(pkgpath)
</span></span></code></pre></div><p><img alt="found" loading="lazy" src="/2020-01-30-test-truffles/notfound.png"></p>
<h2 id="to-do">To do</h2>
<p>There&rsquo;s more to do. trufflesniffer hasn&rsquo;t been tested thoroughly yet; I&rsquo;ll do
more testing to make the experience better. In addition, it&rsquo;d probably be
best to integrate this into the R vcr package so that the user doesn&rsquo;t have to
take an extra step to make sure they aren&rsquo;t going to put any secrets on
the web.</p>
<hr>
<!-- raw HTML omitted -->
<p>ack: trufflesniffer uses R packages <a href="https://github.com/r-lib/cli">cli</a> and <a href="https://github.com/r-lib/crayon">crayon</a></p>
]]></content:encoded>
    </item>
  </channel>
</rss>
