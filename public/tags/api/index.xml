<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>API on Recology</title>
    <link>http://localhost:1313/tags/api/</link>
    <description>Recent content in API on Recology</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 27 Nov 2021 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/api/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Mocking HTTP redirects</title>
      <link>http://localhost:1313/2021/11/mocking-redirects/</link>
      <pubDate>Sat, 27 Nov 2021 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2021/11/mocking-redirects/</guid>
      <description>You&amp;rsquo;ve experienced an HTTP redirect (or URL redirect, or URL forwarding) even if you haven&amp;rsquo;t noticed. We all use browsers (I assume, since you are reading this), either on a phone or laptop/desktop computer. Browsers don&amp;rsquo;t show all the HTTP requests going on in the background, some of which are redirects. Redirection is used for various reasons, including to prevent broken links when web pages are moved, for privacy protection, to allow multiple domains to refer to a single web page, and more.</description><content:encoded><![CDATA[ ]]>
               <![CDATA[<p>You&rsquo;ve experienced an <a href="https://en.wikipedia.org/wiki/URL_redirection">HTTP redirect</a> (or URL redirect, or URL forwarding) even if you haven&rsquo;t noticed. We all use browsers (I assume, since you are reading this), either on a phone or laptop/desktop computer. Browsers don&rsquo;t show all the HTTP requests going on in the background, some of which are redirects. Redirection is used for various reasons, including to prevent broken links when web pages are moved, for privacy protection, to allow multiple domains to refer to a single web page, and more.</p>
<p>The easiest way to know if you hit a redirect is to look at the <a href="https://en.wikipedia.org/wiki/List_of_HTTP_status_codes">HTTP status code</a>. Status codes in the 3xx series are mostly about URL redirection. The most common you will see are 301 (moved permanently), 302 (moved temporarily), and 303 (see other URI; usually in a &ldquo;Location&rdquo; response header).</p>
<p>When making HTTP requests in R, redirects are generally handled automatically by the three HTTP clients (<a href="https://jeroen.cran.dev/curl/">curl</a>, <a href="https://github.com/ropensci/crul">crul</a>, <a href="https://github.com/r-lib/httr">httr</a>). That is, if a 300 series code is detected, all three clients will go to the next URI and so on until there are no more redirects. Automatically following redirects may not be default behavior elsewhere (e.g., <code>crul</code> command line tool doesn&rsquo;t follow redirects by default), so beware.</p>
<p>HTTP redirects become more tricky when we have to mock them in unit tests or other similar situations. I&rsquo;ll cover the various tools for doing this in R.</p>
<h2 id="redirects">Redirects</h2>
<p>First, I&rsquo;ll show how redirects work with three major HTTP clients:</p>
<p><a href="https://jeroen.cran.dev/curl/">curl</a></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">library</span>(curl)
</span></span><span style="display:flex;"><span>h <span style="color:#f92672">&lt;-</span> curl<span style="color:#f92672">::</span><span style="color:#a6e22e">new_handle</span>()
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">handle_setopt</span>(h, followlocation<span style="color:#f92672">=</span><span style="color:#ae81ff">0L</span>)
</span></span><span style="display:flex;"><span>out <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">curl_fetch_memory</span>(<span style="color:#e6db74">&#34;https://hb.opencpu.org/redirect/3&#34;</span>, handle <span style="color:#f92672">=</span> h)
</span></span><span style="display:flex;"><span>curl<span style="color:#f92672">::</span><span style="color:#a6e22e">parse_headers</span>(out<span style="color:#f92672">$</span>headers, multiple <span style="color:#f92672">=</span> <span style="color:#66d9ef">TRUE</span>)
</span></span></code></pre></div><p><a href="https://github.com/ropensci/crul">crul</a></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">library</span>(crul)
</span></span><span style="display:flex;"><span>con <span style="color:#f92672">&lt;-</span> HttpClient<span style="color:#f92672">$</span><span style="color:#a6e22e">new</span>(<span style="color:#e6db74">&#34;https://hb.opencpu.org/redirect/3&#34;</span>)
</span></span><span style="display:flex;"><span>res <span style="color:#f92672">&lt;-</span> con<span style="color:#f92672">$</span><span style="color:#a6e22e">get</span>()
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">length</span>(res<span style="color:#f92672">$</span>response_headers_all)
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] 4</span>
</span></span></code></pre></div><p><a href="https://github.com/r-lib/httr">httr</a></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">library</span>(httr)
</span></span><span style="display:flex;"><span>z <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">GET</span>(<span style="color:#e6db74">&#34;https://hb.opencpu.org/redirect/3&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">length</span>(z<span style="color:#f92672">$</span>all_headers)
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] 4</span>
</span></span></code></pre></div><h2 id="mocking-redirects">Mocking redirects</h2>
<p>If you want to mock HTTP redirects, you can do so with the <a href="https://github.com/ropensci/webmockr">webmockr</a> package. Why would you want to mock redirects?</p>
<p>Here&rsquo;s one use case: Say you have a library/package interacting with a web resource that you interact with. You want to add some unit tests for a route that responds with one or more redirects. You&rsquo;d prefer not to perform real HTTP requests against the remote service for one reason or another (e.g., extreme rate limiting); and some would say it&rsquo;s best not to test with real HTTP requests b/c you want to test the functionality of the package, NOT the remote server with which it interacts.</p>
<p>In the following, we re-create what happens in real HTTP requests - but just status codes and the <code>location</code> response header.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">library</span>(webmockr)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">library</span>(crul)
</span></span><span style="display:flex;"><span>webmockr<span style="color:#f92672">::</span><span style="color:#a6e22e">enable</span>()
</span></span></code></pre></div><p>Make a single stub with each redirect response with <code>to_return()</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">stub_request</span>(<span style="color:#e6db74">&#34;get&#34;</span>, <span style="color:#e6db74">&#34;https://hb.opencpu.org/redirect/3&#34;</span>) <span style="color:#f92672">%&gt;%</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">to_return</span>(status <span style="color:#f92672">=</span> <span style="color:#ae81ff">302</span>, headers <span style="color:#f92672">=</span> <span style="color:#a6e22e">list</span>(location <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;/relative-redirect/2&#34;</span>)) <span style="color:#f92672">%&gt;%</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">to_return</span>(status <span style="color:#f92672">=</span> <span style="color:#ae81ff">302</span>, headers <span style="color:#f92672">=</span> <span style="color:#a6e22e">list</span>(location <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;/relative-redirect/1&#34;</span>)) <span style="color:#f92672">%&gt;%</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">to_return</span>(status <span style="color:#f92672">=</span> <span style="color:#ae81ff">302</span>, headers <span style="color:#f92672">=</span> <span style="color:#a6e22e">list</span>(location <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;/get&#34;</span>)) <span style="color:#f92672">%&gt;%</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">to_return</span>(status <span style="color:#f92672">=</span> <span style="color:#ae81ff">200</span>, headers <span style="color:#f92672">=</span> <span style="color:#a6e22e">list</span>(location <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;hooray, all done!&#34;</span>))
</span></span></code></pre></div><p>Then make four different requests to <code>https://hb.opencpu.org/redirect/3</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>con <span style="color:#f92672">&lt;-</span> crul<span style="color:#f92672">::</span>HttpClient<span style="color:#f92672">$</span><span style="color:#a6e22e">new</span>(url <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;https://hb.opencpu.org&#34;</span>)
</span></span><span style="display:flex;"><span>con<span style="color:#f92672">$</span><span style="color:#a6e22e">get</span>(<span style="color:#e6db74">&#34;redirect/3&#34;</span>)<span style="color:#f92672">$</span>response_headers
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $location</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;/relative-redirect/2&#34;</span>
</span></span><span style="display:flex;"><span>con<span style="color:#f92672">$</span><span style="color:#a6e22e">get</span>(<span style="color:#e6db74">&#34;redirect/3&#34;</span>)<span style="color:#f92672">$</span>response_headers
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $location</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;/relative-redirect/1&#34;</span>
</span></span><span style="display:flex;"><span>con<span style="color:#f92672">$</span><span style="color:#a6e22e">get</span>(<span style="color:#e6db74">&#34;redirect/3&#34;</span>)<span style="color:#f92672">$</span>response_headers
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $location</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;/get&#34;</span>
</span></span><span style="display:flex;"><span>con<span style="color:#f92672">$</span><span style="color:#a6e22e">get</span>(<span style="color:#e6db74">&#34;redirect/3&#34;</span>)<span style="color:#f92672">$</span>response_headers
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $location</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;hooray, all done!&#34;</span>
</span></span></code></pre></div><p>This isn&rsquo;t ideal because it doesn&rsquo;t reflect how the real HTTP request equivalent happens.</p>
<p>Alernatively, you could set it up like this, with four separate stubs:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">stub_request</span>(<span style="color:#e6db74">&#34;get&#34;</span>, <span style="color:#e6db74">&#34;https://hb.opencpu.org/redirect/3&#34;</span>) <span style="color:#f92672">%&gt;%</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">to_return</span>(status <span style="color:#f92672">=</span> <span style="color:#ae81ff">302</span>, headers <span style="color:#f92672">=</span> <span style="color:#a6e22e">list</span>(location <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;/relative-redirect/2&#34;</span>))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">stub_request</span>(<span style="color:#e6db74">&#34;get&#34;</span>, <span style="color:#e6db74">&#34;https://hb.opencpu.org/relative-redirect/2&#34;</span>) <span style="color:#f92672">%&gt;%</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">to_return</span>(status <span style="color:#f92672">=</span> <span style="color:#ae81ff">302</span>, headers <span style="color:#f92672">=</span> <span style="color:#a6e22e">list</span>(location <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;/relative-redirect/1&#34;</span>))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">stub_request</span>(<span style="color:#e6db74">&#34;get&#34;</span>, <span style="color:#e6db74">&#34;https://hb.opencpu.org/relative-redirect/1&#34;</span>) <span style="color:#f92672">%&gt;%</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">to_return</span>(status <span style="color:#f92672">=</span> <span style="color:#ae81ff">302</span>, headers <span style="color:#f92672">=</span> <span style="color:#a6e22e">list</span>(location <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;/get&#34;</span>))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">stub_request</span>(<span style="color:#e6db74">&#34;get&#34;</span>, <span style="color:#e6db74">&#34;https://hb.opencpu.org/get&#34;</span>) <span style="color:#f92672">%&gt;%</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">to_return</span>(status <span style="color:#f92672">=</span> <span style="color:#ae81ff">200</span>, headers <span style="color:#f92672">=</span> <span style="color:#a6e22e">list</span>(location <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;hooray, all done!&#34;</span>))
</span></span></code></pre></div><p>Then make each request in turn to each successive URL:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>con <span style="color:#f92672">&lt;-</span> crul<span style="color:#f92672">::</span>HttpClient<span style="color:#f92672">$</span><span style="color:#a6e22e">new</span>(url <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;https://hb.opencpu.org&#34;</span>)
</span></span><span style="display:flex;"><span>con<span style="color:#f92672">$</span><span style="color:#a6e22e">get</span>(<span style="color:#e6db74">&#34;redirect/3&#34;</span>)<span style="color:#f92672">$</span>response_headers
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $location</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;/relative-redirect/2&#34;</span>
</span></span><span style="display:flex;"><span>con<span style="color:#f92672">$</span><span style="color:#a6e22e">get</span>(<span style="color:#e6db74">&#34;relative-redirect/2&#34;</span>)<span style="color:#f92672">$</span>response_headers
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $location</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;/relative-redirect/1&#34;</span>
</span></span><span style="display:flex;"><span>con<span style="color:#f92672">$</span><span style="color:#a6e22e">get</span>(<span style="color:#e6db74">&#34;relative-redirect/1&#34;</span>)<span style="color:#f92672">$</span>response_headers
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $location</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;/get&#34;</span>
</span></span><span style="display:flex;"><span>con<span style="color:#f92672">$</span><span style="color:#a6e22e">get</span>(<span style="color:#e6db74">&#34;get&#34;</span>)<span style="color:#f92672">$</span>response_headers
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $location</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;hooray, all done!&#34;</span>
</span></span></code></pre></div><h2 id="faking-real-redirects">Faking real redirects</h2>
<p><a href="https://github.com/ropensci/vcr">vcr</a> is built on top of webmockr, but instead of returning stubbed responses and not allowing real HTTP requests, vcr stores real HTTP request/response and uses them on all subsequent matching HTTP requests.</p>
<p>I wrote this back in March 2021 - and was waiting to figure out how to deal with redirects in <a href="https://github.com/ropensci/vcr">vcr</a> before finishing this post - see <a href="https://github.com/ropensci/vcr/issues/220">vcr issue #220</a>. I still have and may never get to that issue. If you are interested, please do stop by vcr and make a pull request to get it fixed. The major issue is that vcr stores only the first HTTP response in a redirect chain, rather than the last HTTP response - as I would expect.</p>
]]></content:encoded>
    </item>
    <item>
      <title>text mining, apis, and parsing api logs</title>
      <link>http://localhost:1313/2019/03/apis-text-mining-logs/</link>
      <pubDate>Thu, 21 Mar 2019 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2019/03/apis-text-mining-logs/</guid>
      <description>Acquiring full text articles fulltext is an R package I maintain to obtain full text versions of research articles for text mining.
It&amp;rsquo;s a hard problem, with a spaghetti web of code. One of the hard problems is figuring out what the URL is for the full text version of an article. Publishers do not have consistent URL patterns through time, and so you can not set rules once and never revisit them.</description><content:encoded><![CDATA[ ]]>
               <![CDATA[<h2 id="acquiring-full-text-articles">Acquiring full text articles</h2>
<p><a href="https://github.com/ropensci/fulltext/">fulltext</a> is an R package I maintain to obtain full text versions of research articles
for text mining.</p>
<p>It&rsquo;s a hard problem, with a spaghetti web of code. One of the hard problems is
figuring out what the URL is for the full text version of an article. Publishers
do not have consistent URL patterns through time, and so you can not set rules once
and never revisit them.</p>
<p>The <a href="https://github.com/CrossRef/rest-api-doc">Crossref API</a> has links available to
full text versions for publishers that choose to share them. However, even if
publishers choose to share their full text links, they may be out of date or completely
wrong (not actually lead to the full text).</p>
<p>There&rsquo;s a variety of other APIs out there for getting links to articles, but none
really hit the spot, which lead to the creation of the <a href="https://ftdoi.org/">ftdoi API</a>.</p>
<h2 id="the-ftdoi-api">the ftdoi API</h2>
<p>The <a href="https://ftdoi.org/">ftdoi API</a> is a web API, with it&rsquo;s main goal for getting a best guess at
the URL for the full text version of an article from its DOI (this is done via the
<code>/api/doi/{doi}/</code> route). The API gives back URLs for all those possible, including
pdf, xml, and html. Most publishers only give full text as PDF, but when XML is
available we give those URLs as well.</p>
<p>The API uses the rules maintained in the <a href="https://github.com/ropenscilabs/pubpatterns/tree/master/src">pubpatterns</a>
repo. The rules are only rough guidelines though and often require at least one
step of making a web request to the publishers site or another site, that&rsquo;s NOT
specified in the pubpatterns rules. For example, the <a href="https://github.com/ropenscilabs/pubpatterns/blob/master/src/biorxiv.json">Biorxiv file</a>
has notes about how to get the parts necessary for the full URL, but the actual logic
to do so in in the API code base <a href="https://github.com/ropenscilabs/pubpatternsapi/blob/master/utils.rb#L590-L601">here</a>.</p>
<p>The ftdoi API caches responses for requests for 24 hrs, so even if a request takes 5 seconds
or so to process, at least for the next 24 hrs it will be nearly instantaneous. We don&rsquo;t
want to cache indefinitely because URLs may be changed at any time by the publishers.</p>
<p>The <code>fulltext</code> package uses the ftdoi API internally, mostly hidden from users, to
get a full text URL.</p>
<h2 id="but-why-an-api">But why an API?</h2>
<p>Why not just have a set of rules in the <code>fulltext</code> R package, and go from there?
An API was relatively easy for me to stand up, and i think it has many benefits:
can be used by anything/anyone, not just R users; updates to publisher specific
rules for generating URLs can evolve independently of <code>fulltext</code>; the logs
can be used as a tool to improve the API.</p>
<h2 id="what-do-people-actually-want">what do people actually want?</h2>
<p>The ftdoi API has been running for a while now, maybe a year or so, and I&rsquo;ve been
collecting logs. Seems smart to look at the logs to determine what publishers
users are requesting articles from that the ftdoi API does not currently support,
so that the API can hopefully add those publishers. For obvious reasons, I can&rsquo;t share
the log data.</p>
<p>Load packages and define file path.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">library</span>(rcrossref)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">library</span>(dplyr)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">library</span>(rex)
</span></span><span style="display:flex;"><span>logs <span style="color:#f92672">&lt;-</span> <span style="color:#e6db74">&#34;~/pubpatterns_api_calls.log&#34;</span>
</span></span></code></pre></div><p>The logs look like (IP addresses removed, some user agents shortened):</p>
<pre tabindex="0"><code>[28/Nov/2018:20:09:49 +0000] GET /api/members/  HTTP/2.0 200 4844 Mozilla/5.0 ...
[28/Nov/2018:20:23:15 +0000] GET /api/members/317/  HTTP/2.0 200 228 Mozilla/5.0 ...
[29/Nov/2018:01:52:58 +0000] GET /api/members/19/  HTTP/1.1 400 65 fulltext/1.1.0
[29/Nov/2018:01:52:58 +0000] GET /api/members/2308/  HTTP/1.1 400 65 fulltext/1.1.0
[29/Nov/2018:01:52:59 +0000] GET /api/members/239/  HTTP/1.1 400 65 fulltext/1.1.0
[29/Nov/2018:01:53:00 +0000] GET /api/members/2581/  HTTP/1.1 400 65 fulltext/1.1.0
[29/Nov/2018:01:53:00 +0000] GET /api/members/27/  HTTP/1.1 400 65 fulltext/1.1.0
[29/Nov/2018:01:53:01 +0000] GET /api/members/297/  HTTP/1.1 200 336 fulltext/1.1.0
[29/Nov/2018:01:53:01 +0000] GET /api/members/7995/  HTTP/1.1 400 65 fulltext/1.1.0
[29/Nov/2018:10:46:53 +0000] GET /api/members/unknown/  HTTP/1.1 400 65 fulltext/1.1.0.9130
</code></pre><p>Use the awesome <a href="https://github.com/kevinushey/rex/">rex</a> package from Kevin Ushey et al. to parse the logs, pulling out
just the Crossref member ID in the API request, as well as the HTTP status code. There
are of course other API requests in the logs, but we&rsquo;re only interested here in the ones
to the <code>/api/doi/{doi}/</code> route.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>df <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">tbl_df</span>(<span style="color:#a6e22e">scan</span>(logs, what <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;character&#34;</span>, sep <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;\n&#34;</span>) <span style="color:#f92672">%&gt;%</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">re_matches</span>(
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">rex</span>(
</span></span><span style="display:flex;"><span>      <span style="color:#e6db74">&#34;/api/members/&#34;</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">capture</span>(name <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;route&#34;</span>,
</span></span><span style="display:flex;"><span>          <span style="color:#a6e22e">one_or_more</span>(numbers)
</span></span><span style="display:flex;"><span>        ),
</span></span><span style="display:flex;"><span>      <span style="color:#e6db74">&#34;/&#34;</span>,
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      space, space, <span style="color:#e6db74">&#34;HTTP/&#34;</span>, numbers, <span style="color:#e6db74">&#34;.&#34;</span>, numbers, space,
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">capture</span>(name <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;status_code&#34;</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">one_or_more</span>(numbers)
</span></span><span style="display:flex;"><span>      )
</span></span><span style="display:flex;"><span>    )
</span></span><span style="display:flex;"><span>  ))
</span></span><span style="display:flex;"><span>df<span style="color:#f92672">$</span>route <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">as.numeric</span>(df<span style="color:#f92672">$</span>route)
</span></span><span style="display:flex;"><span>df
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; # A tibble: 896,035 x 2</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;    route status_code</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;    &lt;dbl&gt; &lt;chr&gt;      </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;  1    NA &lt;NA&gt;       </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;  2   317 200        </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;  3    19 400        </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;  4  2308 400        </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;  5   239 400        </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;  6  2581 400        </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;  7    27 400        </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;  8   297 200        </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;  9  7995 400        </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 10    NA &lt;NA&gt;       </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; # … with 896,025 more rows</span>
</span></span></code></pre></div><p>Filter to those requests that resulted in a 400 HTTP status code, that is, they
resulted in no returned data, indicating that we likely do not have a mapping for that
Crossref member.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>res <span style="color:#f92672">&lt;-</span> df <span style="color:#f92672">%&gt;%</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">filter</span>(status_code <span style="color:#f92672">==</span> <span style="color:#ae81ff">400</span>) <span style="color:#f92672">%&gt;%</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">select</span>(route) <span style="color:#f92672">%&gt;%</span> 
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">group_by</span>(route) <span style="color:#f92672">%&gt;%</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">summarize</span>(count <span style="color:#f92672">=</span> <span style="color:#a6e22e">n</span>()) <span style="color:#f92672">%&gt;%</span> 
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">arrange</span>(<span style="color:#a6e22e">desc</span>(count))
</span></span><span style="display:flex;"><span>res
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; # A tibble: 530 x 2</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;    route  count</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;    &lt;dbl&gt;  &lt;int&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;  1    10 345045</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;  2   530   7165</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;  3   286   3062</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;  4   276   2975</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;  5   239   2493</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;  6  8611   1085</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;  7    56    853</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;  8   235    722</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;  9   382    706</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 10   175    590</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; # … with 520 more rows</span>
</span></span></code></pre></div><p>Add crossref metadata</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>(members <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">cr_members</span>(res<span style="color:#f92672">$</span>route))
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $meta</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; NULL</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $data</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; # A tibble: 530 x 56</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;       id primary_name location last_status_che… total.dois current.dois</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;    &lt;int&gt; &lt;chr&gt;        &lt;chr&gt;    &lt;date&gt;           &lt;chr&gt;      &lt;chr&gt;       </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;  1    10 American Me… 330 N. … 2019-03-20       600092     14714       </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;  2   530 FapUNIFESP … FAP-UNI… 2019-03-20       353338     38339       </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;  3   286 Oxford Univ… Academi… 2019-03-20       3696643    289338      </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;  4   276 Ovid Techno… 100 Riv… 2019-03-20       2059352    167272      </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;  5   239 BMJ          BMA Hou… 2019-03-20       891239     61267       </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;  6  8611 AME Publish… c/o NAN… 2019-03-20       20067      15666       </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;  7    56 Cambridge U… The Edi… 2019-03-20       1529029    84018       </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;  8   235 American So… 1752 N … 2019-03-20       178890     13984       </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;  9   382 Joule Inc.   1031 Ba… 2019-03-20       12666      1868        </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 10   175 The Royal S… 6 Carlt… 2019-03-20       89219      7262        </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; # … with 520 more rows, and 50 more variables: backfile.dois &lt;chr&gt;,</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; #   prefixes &lt;chr&gt;, coverge.affiliations.current &lt;chr&gt;,</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; #   coverge.similarity.checking.current &lt;chr&gt;,</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; #   coverge.funders.backfile &lt;chr&gt;, coverge.licenses.backfile &lt;chr&gt;,</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; #   coverge.funders.current &lt;chr&gt;, coverge.affiliations.backfile &lt;chr&gt;,</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; #   coverge.resource.links.backfile &lt;chr&gt;, coverge.orcids.backfile &lt;chr&gt;,</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; #   coverge.update.policies.current &lt;chr&gt;,</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; #   coverge.open.references.backfile &lt;chr&gt;, coverge.orcids.current &lt;chr&gt;,</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; #   coverge.similarity.checking.backfile &lt;chr&gt;,</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; #   coverge.references.backfile &lt;chr&gt;,</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; #   coverge.award.numbers.backfile &lt;chr&gt;,</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; #   coverge.update.policies.backfile &lt;chr&gt;,</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; #   coverge.licenses.current &lt;chr&gt;, coverge.award.numbers.current &lt;chr&gt;,</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; #   coverge.abstracts.backfile &lt;chr&gt;,</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; #   coverge.resource.links.current &lt;chr&gt;, coverge.abstracts.current &lt;chr&gt;,</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; #   coverge.open.references.current &lt;chr&gt;,</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; #   coverge.references.current &lt;chr&gt;,</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; #   flags.deposits.abstracts.current &lt;chr&gt;,</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; #   flags.deposits.orcids.current &lt;chr&gt;, flags.deposits &lt;chr&gt;,</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; #   flags.deposits.affiliations.backfile &lt;chr&gt;,</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; #   flags.deposits.update.policies.backfile &lt;chr&gt;,</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; #   flags.deposits.similarity.checking.backfile &lt;chr&gt;,</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; #   flags.deposits.award.numbers.current &lt;chr&gt;,</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; #   flags.deposits.resource.links.current &lt;chr&gt;,</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; #   flags.deposits.articles &lt;chr&gt;,</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; #   flags.deposits.affiliations.current &lt;chr&gt;,</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; #   flags.deposits.funders.current &lt;chr&gt;,</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; #   flags.deposits.references.backfile &lt;chr&gt;,</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; #   flags.deposits.abstracts.backfile &lt;chr&gt;,</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; #   flags.deposits.licenses.backfile &lt;chr&gt;,</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; #   flags.deposits.award.numbers.backfile &lt;chr&gt;,</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; #   flags.deposits.open.references.backfile &lt;chr&gt;,</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; #   flags.deposits.open.references.current &lt;chr&gt;,</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; #   flags.deposits.references.current &lt;chr&gt;,</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; #   flags.deposits.resource.links.backfile &lt;chr&gt;,</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; #   flags.deposits.orcids.backfile &lt;chr&gt;,</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; #   flags.deposits.funders.backfile &lt;chr&gt;,</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; #   flags.deposits.update.policies.current &lt;chr&gt;,</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; #   flags.deposits.similarity.checking.current &lt;chr&gt;,</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; #   flags.deposits.licenses.current &lt;chr&gt;, names &lt;chr&gt;, tokens &lt;chr&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $facets</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; NULL</span>
</span></span></code></pre></div><p>Add Crossref member names to the log data.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>alldat <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">left_join</span>(res, <span style="color:#a6e22e">select</span>(members<span style="color:#f92672">$</span>data, id, primary_name),
</span></span><span style="display:flex;"><span>  by <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(<span style="color:#e6db74">&#34;route&#34;</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;id&#34;</span>))
</span></span><span style="display:flex;"><span>alldat
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; # A tibble: 530 x 3</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;    route  count primary_name                             </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;    &lt;dbl&gt;  &lt;int&gt; &lt;chr&gt;                                    </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;  1    10 345045 American Medical Association (AMA)       </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;  2   530   7165 FapUNIFESP (SciELO)                      </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;  3   286   3062 Oxford University Press (OUP)            </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;  4   276   2975 Ovid Technologies (Wolters Kluwer Health)</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;  5   239   2493 BMJ                                      </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;  6  8611   1085 AME Publishing Company                   </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;  7    56    853 Cambridge University Press (CUP)         </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;  8   235    722 American Society for Microbiology        </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;  9   382    706 Joule Inc.                               </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 10   175    590 The Royal Society                        </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; # … with 520 more rows</span>
</span></span></code></pre></div><p>Theres <strong>A LOT</strong> of requests to the American Medical Association. Coming in
a distant second is FapUNIFESP (SciELO), then the Oxford University Press,
Ovid Technologies (Wolters Kluwer Health), BMJ, and AME Publishing Company,
all with greater than 1000 requests.</p>
<p>These are some clear leads for publishers to work into the ftdoi API, working
my way down the data.frame to less frequently requested publishers.</p>
<h2 id="more-work-to-do">more work to do</h2>
<p>I&rsquo;ve got a good list of publishers which I know users want URLs for, so
I can get started implementing rules/etc. for those publishers. And I can
repeat this process from time to time to add more publishers in high demand.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Exceptions in control flow in R</title>
      <link>http://localhost:1313/2019/03/control-flow-exceptions/</link>
      <pubDate>Mon, 04 Mar 2019 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2019/03/control-flow-exceptions/</guid>
      <description>I was listening to a Bike Shed podcast episode 189, &amp;ldquo;It&amp;rsquo;s Gonna Work, Definitely, No Problems Whatsoever&amp;rdquo;, and starting at 27:44 there was a conversation about exception handling. Specifically it was about exception handling in control flow when doing web API requests. This topic piqued my interest straight away as I do a lot of API stuff (making and wrapping).
The part of the conversation that I want to address is their conclusion that exceptions in control flow are an anti-pattern.</description><content:encoded><![CDATA[ ]]>
               <![CDATA[<p>I was listening to a Bike Shed podcast <a href="http://bikeshed.fm/189">episode 189, &ldquo;It&rsquo;s Gonna Work, Definitely, No Problems Whatsoever&rdquo;</a>, and starting at 27:44 there was a conversation about exception handling. Specifically it was about exception handling in control flow when doing web API requests. This topic piqued my interest straight away as I do a lot of API stuff (making and wrapping).</p>
<p>The part of the conversation that I want to address is their conclusion that exceptions in control flow are an anti-pattern. Seems this is a general pattern in programming languages, e.g., this <a href="https://softwareengineering.stackexchange.com/a/189225/329940">SO thread</a>. But on the contrary there are some languages in which exceptions in control flow are considered normal behavior; e.g., Python (<a href="https://softwareengineering.stackexchange.com/a/318542/329940">this</a>, <a href="https://softwareengineering.stackexchange.com/a/351121/329940">this</a>).</p>
<p>My first reaction to this was one of vehement disagreement because in my experience wrapping web APIs raising exceptions on HTTP status codes of 400 and 500 series is the norm, in at least R and Ruby. They argued that there are better ways of handling these cases. After a whg with my gut reaction.</p>
<p>Let&rsquo;s take a step back first and look at some concepts before diving further into this.
ile I thought maybe the topic is worth thinking harder about rather than goin</p>
<h2 id="control-flow">control flow</h2>
<p><a href="https://en.wikipedia.org/wiki/Control_flow">Control flow</a> in programming is</p>
<blockquote>
<p>the order in which individual statements &hellip; are executed or evaluated &hellip; a control flow statement is a statement, the execution of which results in a choice being made as to which of two or more paths to follow.</p>
</blockquote>
<p><a href="https://stat.ethz.ch/R-manual/R-devel/library/base/html/Control.html">Control flow in R</a> has an overview of control flow in R. Control flow constructs in R include <code>if/else</code>, <code>for</code>, <code>while</code>, <code>repeat</code>, <code>break</code>, <code>next</code>.</p>
<h2 id="exceptions">exceptions</h2>
<p>Exceptions are</p>
<blockquote>
<p>anomalous or exceptional conditions requiring special processing - often changing the normal flow of program execution (source: <a href="https://en.wikipedia.org/wiki/Exception_handling">wikiex</a>)</p>
</blockquote>
<p>In R, exception handling can be done with <code>try</code>, <code>tryCatch</code>, <code>withCallingHandlers</code> and others. Often <code>warning()</code> is used to signal to the user what happened, but does not stop execution, and can be suppressed with <code>suppressWarnings()</code>. To stop execution, <code>stop()</code> is used.</p>
<!-- raw HTML omitted -->
<h2 id="back-to-web-api-exceptions-and-control-flow-in-r">back to web API exceptions and control flow in R</h2>
<p>Note the word <strong>exceptional</strong> above in our definition of exceptions. The BikeShed pod hosts were surprised to see exceptions raised with bad API requests because they didn&rsquo;t think a bad API request was <strong>exceptional</strong>, but rather an expected result given certain conditions (e.g., an HTTP 400 series client error means the client did something wrong and perhaps the server gave back a useful error message to help fix the request).</p>
<p>They observed that most Ruby API wrappers did have the behavior of raising an exception on a 400/500 series API status, but they disagreed with this approach.</p>
<p>In R world, most API wrappers in my experience also follow the pattern of raising an exception stopping the code flow on a 400/500 series HTTP error.</p>
<!-- raw HTML omitted -->
<p>What would it look like to not stop code execution flow when 400/500 series errors are returned from web API requests? What would need to change from the current setup? How would users be affected?</p>
<p>A typical R function that makes a web API request looks like the following:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>foo <span style="color:#f92672">=</span> <span style="color:#66d9ef">function</span>(path, query <span style="color:#f92672">=</span> <span style="color:#a6e22e">list</span>()) {
</span></span><span style="display:flex;"><span>  conn <span style="color:#f92672">=</span> crul<span style="color:#f92672">::</span>HttpClient<span style="color:#f92672">$</span><span style="color:#a6e22e">new</span>(<span style="color:#e6db74">&#34;https://httpbin.org&#34;</span>)
</span></span><span style="display:flex;"><span>  res <span style="color:#f92672">=</span> conn<span style="color:#f92672">$</span><span style="color:#a6e22e">get</span>(path <span style="color:#f92672">=</span> path, query <span style="color:#f92672">=</span> query)
</span></span><span style="display:flex;"><span>  res<span style="color:#f92672">$</span><span style="color:#a6e22e">raise_for_status</span>()
</span></span><span style="display:flex;"><span>  res<span style="color:#f92672">$</span><span style="color:#a6e22e">parse</span>(<span style="color:#e6db74">&#34;UTF-8&#34;</span>)
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>On a successful request all is good and we get back the JSON payload</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">foo</span>(path <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;get&#34;</span>, query <span style="color:#f92672">=</span> <span style="color:#a6e22e">list</span>(apple <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;pink lady&#34;</span>))
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;{\n  \&#34;args\&#34;: {\n    \&#34;\&#34;: \&#34;pink lady\&#34;\n  }, ...</span>
</span></span></code></pre></div><p>When there is a 400/500 series code the line <code>res$raise_for_status()</code> throws an error, stopping execution</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">foo</span>(path <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;status/400&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; Error: Bad Request (HTTP 400)</span>
</span></span></code></pre></div><p>Instead of raising an error we could throw a warning and proceed to the next step</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>bar <span style="color:#f92672">=</span> <span style="color:#66d9ef">function</span>(path, query <span style="color:#f92672">=</span> <span style="color:#a6e22e">list</span>()) {
</span></span><span style="display:flex;"><span>  conn <span style="color:#f92672">=</span> crul<span style="color:#f92672">::</span>HttpClient<span style="color:#f92672">$</span><span style="color:#a6e22e">new</span>(<span style="color:#e6db74">&#34;https://httpbin.org&#34;</span>)
</span></span><span style="display:flex;"><span>  res <span style="color:#f92672">=</span> conn<span style="color:#f92672">$</span><span style="color:#a6e22e">get</span>(path <span style="color:#f92672">=</span> path, query <span style="color:#f92672">=</span> query)
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> (res<span style="color:#f92672">$</span>status_code <span style="color:#f92672">&gt;=</span> <span style="color:#ae81ff">400</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">warning</span>(<span style="color:#a6e22e">sprintf</span>(<span style="color:#e6db74">&#34;HTTP %s %s&#34;</span>, res<span style="color:#f92672">$</span>status_code, res<span style="color:#f92672">$</span><span style="color:#a6e22e">status_http</span>()<span style="color:#f92672">$</span>explanation))
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  res<span style="color:#f92672">$</span><span style="color:#a6e22e">parse</span>(<span style="color:#e6db74">&#34;UTF-8&#34;</span>)
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">bar</span>(path <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;status/400&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; Warning message:</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; In bar(path = &#34;status/400&#34;) :</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;  HTTP 400 Bad request syntax or unsupported method</span>
</span></span></code></pre></div><p>This is fine, but there&rsquo;s a few scenarios in which this will be problematic:</p>
<ol>
<li>Many APIs <strong>DO NOT</strong> return the same content-type on a 400 series error, and even more common on 500 series errors. In fact, often JSON APIs return an HTML error page, which may or may not contain a meaningul message, instead of the same content type as a successful response (e.g., JSON).</li>
<li>Rather then simply parsing the response <code>res$parse(&quot;UTF-8&quot;)</code>, the downstream code may be more complex (e.g., selecting particular fields/keys), and may fail out (and in R, this often means useless error messages for the user).</li>
</ol>
<p>If we take their advice and don&rsquo;t fail out on 400/500 series codes, what would that look like? One could do something like:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>hello_world <span style="color:#f92672">&lt;-</span> <span style="color:#66d9ef">function</span>(path, query <span style="color:#f92672">=</span> <span style="color:#a6e22e">list</span>()) {
</span></span><span style="display:flex;"><span>  conn <span style="color:#f92672">=</span> crul<span style="color:#f92672">::</span>HttpClient<span style="color:#f92672">$</span><span style="color:#a6e22e">new</span>(<span style="color:#e6db74">&#34;https://httpbin.org&#34;</span>)
</span></span><span style="display:flex;"><span>  res <span style="color:#f92672">=</span> conn<span style="color:#f92672">$</span><span style="color:#a6e22e">get</span>(path <span style="color:#f92672">=</span> path, query <span style="color:#f92672">=</span> query)
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> (res<span style="color:#f92672">$</span>status_code <span style="color:#f92672">&gt;=</span> <span style="color:#ae81ff">400</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">warning</span>(<span style="color:#a6e22e">sprintf</span>(<span style="color:#e6db74">&#34;HTTP %s %s&#34;</span>, res<span style="color:#f92672">$</span>status_code, res<span style="color:#f92672">$</span><span style="color:#a6e22e">status_http</span>()<span style="color:#f92672">$</span>explanation))
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  res
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>We still get the warning on an error</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">hello_world</span>(path <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;status/400&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; Warning message:</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; In hello_world(path = &#34;status/400&#34;) :</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   HTTP 400 Bad request syntax or unsupported method</span>
</span></span></code></pre></div><p>But also we return the response object (<code>HttpResponse</code> from the <code>crul</code> package in this case):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#75715e">#&gt; &lt;crul response&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   url: https://httpbin.org/status/400</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   request_headers:</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;     User-Agent: libcurl/7.54.0 r-curl/3.3 crul/0.7.0</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;     Accept-Encoding: gzip, deflate</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;     Accept: application/json, text/xml, application/xml, */*</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   response_headers:</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;     status: HTTP/1.1 400 BAD REQUEST</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;     access-control-allow-credentials: true</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;     access-control-allow-origin: *</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;     content-type: text/html; charset=utf-8</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;     date: Mon, 04 Mar 2019 17:49:39 GMT</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;     server: nginx</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;     content-length: 0</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;     connection: keep-alive</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   status: 400</span>
</span></span></code></pre></div><p>Now the user can explore the response body, response headers, etc. and decide on their own what to do instead of the function failing out and returning nothing.</p>
<p>This approach is fine if your users are more advanced, but most packages/libraries are probably trying to give back a data object that users are familiar with. In R, that is clearly the data.frame. When there is a 400/500 series error, one option is to return an empty data.frame and throw a warning about the error, hopefully with enough information for the user to fix the request. This is probably best for naive users, but any package has some more advanced users that would benefit from more information; and more information will help a naive user + the maintainer debug a problem easier.</p>
<p>The next more complicated option would be a list that can have the same format regardless of errors or not:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>func <span style="color:#f92672">&lt;-</span> <span style="color:#66d9ef">function</span>() {
</span></span><span style="display:flex;"><span>  res <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">hello_world</span>(path <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;status/400&#34;</span>)
</span></span><span style="display:flex;"><span>  mssg <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">sprintf</span>(<span style="color:#e6db74">&#34;HTTP %s %s&#34;</span>, res<span style="color:#f92672">$</span>status_code, res<span style="color:#f92672">$</span><span style="color:#a6e22e">status_http</span>()<span style="color:#f92672">$</span>explanation)
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">list</span>(data <span style="color:#f92672">=</span> res<span style="color:#f92672">$</span><span style="color:#a6e22e">parse</span>(<span style="color:#e6db74">&#34;UTF-8&#34;</span>), error <span style="color:#f92672">=</span> mssg)
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>gives</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">func</span>()
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $data</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $error</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;HTTP 400 Bad request syntax or unsupported method&#34;</span>
</span></span></code></pre></div><p>Or possibly something more complex where you can build in accessors to make it easy to get data the user expects, but also dig into the HTTP response object itself if needed:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>Response <span style="color:#f92672">&lt;-</span> R6<span style="color:#f92672">::</span><span style="color:#a6e22e">R6Class</span>(<span style="color:#e6db74">&#34;Response&#34;</span>,
</span></span><span style="display:flex;"><span>  public <span style="color:#f92672">=</span> <span style="color:#a6e22e">list</span>(
</span></span><span style="display:flex;"><span>    x <span style="color:#f92672">=</span> <span style="color:#66d9ef">NULL</span>,
</span></span><span style="display:flex;"><span>    initialize <span style="color:#f92672">=</span> <span style="color:#66d9ef">function</span>(resp) self<span style="color:#f92672">$</span>x <span style="color:#f92672">&lt;-</span> resp,
</span></span><span style="display:flex;"><span>    data <span style="color:#f92672">=</span> <span style="color:#66d9ef">function</span>() self<span style="color:#f92672">$</span>x<span style="color:#f92672">$</span><span style="color:#a6e22e">parse</span>(<span style="color:#e6db74">&#34;UTF-8&#34;</span>),
</span></span><span style="display:flex;"><span>    error <span style="color:#f92672">=</span> <span style="color:#66d9ef">function</span>() {
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">sprintf</span>(<span style="color:#e6db74">&#34;HTTP %s %s&#34;</span>, self<span style="color:#f92672">$</span>x<span style="color:#f92672">$</span>status_code, self<span style="color:#f92672">$</span>x<span style="color:#f92672">$</span><span style="color:#a6e22e">status_http</span>()<span style="color:#f92672">$</span>explanation)
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>  )
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span>myfunc <span style="color:#f92672">&lt;-</span> <span style="color:#66d9ef">function</span>() {
</span></span><span style="display:flex;"><span>  res <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">hello_world</span>(path <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;status/400&#34;</span>)
</span></span><span style="display:flex;"><span>  Response<span style="color:#f92672">$</span><span style="color:#a6e22e">new</span>(res)
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Which gives:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>out <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">myfunc</span>()
</span></span><span style="display:flex;"><span><span style="color:#75715e"># the HTTP message</span>
</span></span><span style="display:flex;"><span>out<span style="color:#f92672">$</span><span style="color:#a6e22e">error</span>()
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;HTTP 400 Bad request syntax or unsupported method&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># the response body, parsed</span>
</span></span><span style="display:flex;"><span>out<span style="color:#f92672">$</span><span style="color:#a6e22e">data</span>()
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># the full HTTP response object</span>
</span></span><span style="display:flex;"><span>out<span style="color:#f92672">$</span>x
</span></span></code></pre></div><h2 id="what-about-users-handling-exceptions-on-their-side">what about users handling exceptions on their side?</h2>
<p>If one sticks swith erroring out of excecution flow with 400/500 series errors, the user can still handle it on their end. For example, if they are using a function in a loop/appply type call, they can use <code>tryCatch</code> or similar and check for an error and proceed one of two or more ways depending on the error or successful request. Of course this assumes that the user knows how to do this.</p>
<p>Additionally, this means that each user will handle errors in different ways, possibly making mistakes in the process - arguing for the developer of the package to handle exceptions instead.</p>
<h2 id="its-too-complex-just-fail-out">it&rsquo;s too complex, just fail out</h2>
<p>One reason I like to fail out on 400/500 series errors in my packages is that there is often significant data munging of the response. Failing out makes my life easier as I don&rsquo;t have to worry about what to do with HTTP responses that fail. In the world I run in of smallish APIs for science/research, API failure behavior often is not very good; it&rsquo;s typically unpredictable, changes from time to time, and failure response bodies are often just their HTML failure page, leading to brittle code for parsing that HTML as that HTML can change often. It&rsquo;d be great if every API was as good as Github&rsquo;s for example, but we&rsquo;ll never be in that place.</p>
<h2 id="performance-considerations">performance considerations</h2>
<p>In reading about exceptions in control flow, there&rsquo;s a common thread about performance (e.g., <a href="https://stackoverflow.com/questions/13835817/are-exceptions-in-c-really-slow">c++</a>, <a href="https://simonecarletti.com/blog/2010/01/how-slow-are-ruby-exceptions/">Ruby 1</a>, <a href="https://www.honeybadger.io/blog/benchmarking-exceptions-in-ruby-yep-theyre-slow/">Ruby 2</a>). That is, if throwing exceptions is a slow procedure, that&rsquo;s one reason to avoid them. But if exceptions aren&rsquo;t slow then that&rsquo;s not a great argument for avoiding them.</p>
<p>I haven&rsquo;t seen anything on performance an exceptions in R, though I&rsquo;m sure there&rsquo;s something out there.</p>
<p>Even if exceptions are a slowish procedure, there is an argument to be made that failing early also saves time; that is, if you get a 400/500 series error you aren&rsquo;t then spending time with downstream processing of the response. However, then the user has less information. Trade-offs all the way down.</p>
<h2 id="conclusion">conclusion</h2>
<p>I&rsquo;m not sure if I&rsquo;ll change anything in packages I maintain or not. I&rsquo;ll keep thinking about this and ask around to gauge others opinions on this. Part of me wants to follow the avoid exceptions path, but I worry about two things. First, the complexity increases for me as the developer. If I don&rsquo;t fail out, then I have to deal with parsing somehow every response. It&rsquo;s not as simple as giving back the HTTP response; I ideally want to give users a data structure they are familiar with, i.e., a data.frame. Second, for the user, if I give back a list or an <code>R6</code> object, that increases complexity on their side. Is the benefit of more information worth the cost of more complexity for the user? I&rsquo;ve no idea.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Web APIs with Sinatra, Mongo, Docker, and Caddy</title>
      <link>http://localhost:1313/2017/11/sinatra-mongo-docker-caddy/</link>
      <pubDate>Tue, 14 Nov 2017 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2017/11/sinatra-mongo-docker-caddy/</guid>
      <description>The problem The R community has a package distribution thing called CRAN just like Ruby has Rubygems, and Python has Pypi, etc. On all packages on CRAN, the CRAN maintainers run checks on each package on multiple versions of R and on many operating systems. They report those results on a page associated with the package, like this one.
You might be thinking: okay, but we have Travis-CI and friends, so who cares about that?</description><content:encoded><![CDATA[ ]]>
               <![CDATA[<h2 id="the-problem">The problem</h2>
<p>The R community has a package distribution thing called <a href="https://cran.rstudio.com/web/packages/">CRAN</a> just like Ruby has <a href="https://rubygems.org/">Rubygems</a>, and Python has <a href="https://pypi.python.org/pypi">Pypi</a>, etc. On all packages on CRAN, the CRAN maintainers run checks on each package on multiple versions of R and on many operating systems. They report those results on a page associated with the package, like <a href="https://cran.rstudio.com/web/checks/check_results_crul.html">this one</a>.</p>
<p>You might be thinking: okay, but we have Travis-CI and friends, so who cares about that?  Well, it&rsquo;s these checks that CRAN runs that will determine if your package on CRAN leads to emails to you asking for changes, and possibly the package being taken down if e.g., they email and you don&rsquo;t respond for a period of time.</p>
<p>So CRAN provides these package checks. Now what?  Ideally, these would be available through an API so that the data is machine readable, which then makes many other things possible (see <a href="#whats-next">What&rsquo;s Next</a> below).</p>
<p>So how to build the API?</p>
<h2 id="building-the-cran-checks-api">Building the CRAN checks API</h2>
<p>On GitHub: <a href="https://github.com/ropensci/cchecksapi">https://github.com/ropensci/cchecksapi</a></p>
<p>My main goal learning goals with this API tech wise were two fold:</p>
<ul>
<li>learn how to dockerize the application</li>
<li>learn how to use MongoDB</li>
</ul>
<p>I hadn&rsquo;t Dockerized a web API myself before, so that was an important goal - and I had actually never used MongoDB, but wanted to give it a shot to get familiar with it.</p>
<p>The whole stack is:</p>
<ul>
<li>language: Ruby</li>
<li>web API framework: Sinatra</li>
<li>http Ruby gem: faraday</li>
<li>database: mongodb</li>
<li>server: caddy</li>
<li>container: all wrapped up in docker (docker-compose)</li>
<li>hosting: Amazon EC2</li>
<li>scheduling: crontab</li>
</ul>
<p>At a high level, the system is as so:</p>
<ul>
<li>Once a day a few Ruby scripts (<a href="https://github.com/ropensci/cchecksapi/blob/master/scrape.rb">for packages</a>, <a href="https://github.com/ropensci/cchecksapi/blob/master/scrape_maintainer.rb">for maintainers</a>):
<ul>
<li>collects the names of packages on CRAN from Gábor Csárdi&rsquo;s <a href="https://crandb.r-pkg.org">https://crandb.r-pkg.org</a> API and maintainer emails from CRAN itself, then</li>
<li>goes out to the CRAN website and collects check results for each package, then</li>
<li>insert data into a MongoDB database</li>
</ul>
</li>
<li>The API provides routes for getting data on specific packages by name, or all packages, and data on all packages for any given maintainers email adddress, or all maintainers
<ul>
<li>API calls make a query into the MongoDB database matching on the package name or maintainer email address</li>
<li>data is given back as JSON</li>
</ul>
</li>
</ul>
<p>The API doesn&rsquo;t currently use caching, but may add if it seems needed.</p>
<h2 id="ruby-and-sinatra">Ruby and Sinatra</h2>
<p>I really like Ruby. It&rsquo;s a language that is fun to use, the community is great, and there&rsquo;s tons of packages.  Ruby is great for making web stuff, including web APIs. When doing web stuff, for me that means web APIs. For web APIs in Ruby, Rails is too heavy for all the stuff I do - that&rsquo;s where <a href="https://www.sinatrarb.com/">Sinatra</a> comes in.</p>
<p>Sinatra is a lightweight framework for making web apps/APIs. I make all my web APIs with Sinatra, and have had few complaints. Some may say &ldquo;you should use X or Y because faster&rdquo;, or whatever, but Sinatra is plenty fast for my use cases. Not every use case is &ldquo;we&rsquo;re Facebook&rdquo;, or &ldquo;we&rsquo;re Google&rdquo;.</p>
<p>Until recently I&rsquo;ve been very much manually managing my Sinatra web APIs on servers - that is, installing/updating everything on the server itself, without using containers or any configuration management. This blog post is the blog post I would have wanted to read when I was figuring out how to dockerize my web APIs.</p>
<h2 id="the-api">The API</h2>
<p>The main meat of the API is definitions of routes. In addition, I&rsquo;ve included a number of rules about what HTTP verbs are allowed to be used, what headers to send in each response, how to respond to client and server failures, etc.</p>
<p>This is what one of the route definitions looks like:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ruby" data-lang="ruby"><span style="display:flex;"><span>get <span style="color:#e6db74">&#39;/pkgs/?&#39;</span> <span style="color:#66d9ef">do</span>
</span></span><span style="display:flex;"><span>  headers_get
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">begin</span>
</span></span><span style="display:flex;"><span>    lim <span style="color:#f92672">=</span> (params<span style="color:#f92672">[</span><span style="color:#e6db74">:limit</span><span style="color:#f92672">]</span> <span style="color:#f92672">||</span> <span style="color:#ae81ff">10</span>)<span style="color:#f92672">.</span>to_i
</span></span><span style="display:flex;"><span>    off <span style="color:#f92672">=</span> (params<span style="color:#f92672">[</span><span style="color:#e6db74">:offset</span><span style="color:#f92672">]</span> <span style="color:#f92672">||</span> <span style="color:#ae81ff">0</span>)<span style="color:#f92672">.</span>to_i
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">raise</span> <span style="color:#66d9ef">Exception</span><span style="color:#f92672">.</span>new(<span style="color:#e6db74">&#39;limit too large (max 1000)&#39;</span>) <span style="color:#66d9ef">unless</span> lim <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">1000</span>
</span></span><span style="display:flex;"><span>    d <span style="color:#f92672">=</span> $cks<span style="color:#f92672">.</span>find({}, {<span style="color:#e6db74">&#34;limit&#34;</span> <span style="color:#f92672">=&gt;</span> lim, <span style="color:#e6db74">&#34;skip&#34;</span> <span style="color:#f92672">=&gt;</span> off})
</span></span><span style="display:flex;"><span>    dat <span style="color:#f92672">=</span> d<span style="color:#f92672">.</span>to_a
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">raise</span> <span style="color:#66d9ef">Exception</span><span style="color:#f92672">.</span>new(<span style="color:#e6db74">&#39;no results found&#39;</span>) <span style="color:#66d9ef">if</span> d<span style="color:#f92672">.</span>nil?
</span></span><span style="display:flex;"><span>    { <span style="color:#e6db74">found</span>: d<span style="color:#f92672">.</span>count, <span style="color:#e6db74">count</span>: dat<span style="color:#f92672">.</span>length, <span style="color:#e6db74">offset</span>: <span style="color:#66d9ef">nil</span>, <span style="color:#e6db74">error</span>: <span style="color:#66d9ef">nil</span>,
</span></span><span style="display:flex;"><span>      <span style="color:#e6db74">data</span>: dat }<span style="color:#f92672">.</span>to_json
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">rescue</span> <span style="color:#66d9ef">Exception</span> <span style="color:#f92672">=&gt;</span> e
</span></span><span style="display:flex;"><span>    halt <span style="color:#ae81ff">400</span>, { <span style="color:#e6db74">count</span>: <span style="color:#ae81ff">0</span>, <span style="color:#e6db74">error</span>: { <span style="color:#e6db74">message</span>: e<span style="color:#f92672">.</span>message }, <span style="color:#e6db74">data</span>: <span style="color:#66d9ef">nil</span> }<span style="color:#f92672">.</span>to_json
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">end</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">end</span>
</span></span></code></pre></div><p>This code chunk is for the <code>/pkgs</code> route on the API (check it out at <a href="https://cranchecks.info/pkgs">https://cranchecks.info/pkgs</a>). The <code>headers_get</code> bit sends a pre-defined set of headers in the response. The <code>begin ... rescue ... end</code> bit is a &ldquo;try catch&rdquo; thing - leading to a JSON failure response in case there is a failure - and a JSON response on success.</p>
<h2 id="collecting-data-and-mongodb">Collecting data and MongoDB</h2>
<p>As stated above, data is updated once a day. The code for scraping data on the package level and maintainer level is pretty similar. For both, the steps are the following: a) collect all names (for <code>/pkgs</code> that&rsquo;s package names from <a href="https://crandb.r-pkg.org">https://crandb.r-pkg.org</a>; for <code>/maintainers</code> that&rsquo;s maintainer email addresses from <a href="https://cran.rstudio.com/web/checks/check_summary_by_maintainer.html">https://cran.rstudio.com/web/checks/check_summary_by_maintainer.html</a>), b) for each package name or maintainer email scrape CRAN check results, c) with all data collected drop data in MongoDB and then load all new data (maybe this could be an update step?). You can see the gory details on GitHub for <a href="https://github.com/ropensci/cchecksapi/blob/master/scrape.rb">packages</a> and <a href="https://github.com/ropensci/cchecksapi/blob/master/scrape_maintainer.rb">maintainers</a>.</p>
<p>Those steps above in code for packages is like the following:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ruby" data-lang="ruby"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">scrape_all</span>
</span></span><span style="display:flex;"><span>  pkgs <span style="color:#f92672">=</span> cran_packages; <span style="color:#75715e"># get all pkg names</span>
</span></span><span style="display:flex;"><span>  out <span style="color:#f92672">=</span> <span style="color:#f92672">[]</span> <span style="color:#75715e"># make an array</span>
</span></span><span style="display:flex;"><span>  pkgs<span style="color:#f92672">.</span>each <span style="color:#66d9ef">do</span> <span style="color:#f92672">|</span>x<span style="color:#f92672">|</span> <span style="color:#75715e"># for each pkg, scrape check results</span>
</span></span><span style="display:flex;"><span>    out <span style="color:#f92672">&lt;&lt;</span> scrape_pkg(x)
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">end</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> $cks<span style="color:#f92672">.</span>count <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>    $cks<span style="color:#f92672">.</span>drop <span style="color:#75715e"># drop data in Mongo</span>
</span></span><span style="display:flex;"><span>    $cks <span style="color:#f92672">=</span> $mongo<span style="color:#f92672">[</span><span style="color:#e6db74">:checks</span><span style="color:#f92672">]</span> <span style="color:#75715e"># recreate database in Mongo</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">end</span>
</span></span><span style="display:flex;"><span>  $cks<span style="color:#f92672">.</span>insert_many(out<span style="color:#f92672">.</span>map { <span style="color:#f92672">|</span>e<span style="color:#f92672">|</span> prep_mongo(e) }) <span style="color:#75715e"># load new data into Mongo</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">end</span>
</span></span></code></pre></div><p><code>$cks</code> is the MongoDB database connection.</p>
<h2 id="docker">Docker</h2>
<p>For containerizing the API, I used Docker. A colleague had used <a href="https://docs.docker.com/compose/">Docker Compose</a>, and it was a really easy experience spinning up and taking down the application we were working on. So I wanted to learn how to do that myself. After trial and error, finally got to a solution for this API. Here is my <code>docker-compose.yml</code> file:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Dockerfile" data-lang="Dockerfile"><span style="display:flex;"><span>mongo:<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>  image: mongo<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>  volumes:<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>    - $HOME/data/mongodb:/data/db <span style="color:#75715e"># persists data to disk outside container</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>  restart: always<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>  ports:<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>    - <span style="color:#e6db74">&#34;27017:27017&#34;</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>api:<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>  build: .<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>  ports:<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>    - <span style="color:#e6db74">&#34;8834:8834&#34;</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>  links:<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span>    - mongo<span style="color:#960050;background-color:#1e0010">
</span></span></span></code></pre></div><p>This specifies the container for MongoDB and for the API, and specifies in the API container to link to the mongo container.</p>
<p>To build and run do</p>
<pre tabindex="0"><code>docker-compose build &amp;&amp; docker-compose up -d
</code></pre><p>The <code>-d</code> flag is for daemonize, i.e., run in the background. To kill them run</p>
<pre tabindex="0"><code>docker-compose stop &amp;&amp; docker-compose rm
</code></pre><h2 id="caddy-server">Caddy server</h2>
<p>Caddy is great server. I never really used Nginx, so I can&rsquo;t compare the two really - I just know that Caddy is super easy. To install, check out the installation page <a href="https://caddyserver.com/download">https://caddyserver.com/download</a>, and it&rsquo;s easy as something like <code>curl https://getcaddy.com | bash -s personal</code> (depends on configuration options on that page and license choice).</p>
<p>I know there&rsquo;s an option to run a separate container with Caddy, but I run Caddy outside containers.</p>
<p>My <code>Caddyfile</code> has something similar to the following:</p>
<pre tabindex="0"><code>cranchecks.info {
  gzip
  tls email@foobar.com

  log / logfile.log &#34;{remote} - [{when}] {method} {uri} {query} {proto} {status} {size} {&gt;User-Agent}&#34; {
     rotate_size 3
  }

  proxy / localhost:8834 {
    transparent
  }
}
</code></pre><ul>
<li><code>gzip</code> tells Caddy to serve gzipp&rsquo;ed content (see <a href="https://caddyserver.com/docs/gzip">https://caddyserver.com/docs/gzip</a>)</li>
<li><code>tls</code> says use the given email for registering with <a href="https://letsencrypt.org/">Letsencrypt</a> (see <a href="https://caddyserver.com/docs/tls">https://caddyserver.com/docs/tls</a>)</li>
<li><code>log</code> line specifies how to log requests (and <code>rotate_size</code> says start a new file when the current one reaches 3 MB) (see <a href="https://caddyserver.com/docs/log">https://caddyserver.com/docs/log</a>)</li>
<li><code>proxy</code> is for specifying reverse proxy (see <a href="https://caddyserver.com/docs/proxy">https://caddyserver.com/docs/proxy</a>)</li>
</ul>
<h2 id="whats-next">What&rsquo;s Next</h2>
<p>There&rsquo;s still more work to do.</p>
<ul>
<li>Better <code>/maintainers</code> results
<ul>
<li>right now, we have two arrays of results, one from the html table on the CRAN results page and the other from the text below it. This duplication isn&rsquo;t ideal.</li>
<li>it would be helpful to have a summary across all packages for any given maintainer</li>
</ul>
</li>
<li>Better <code>/pkgs</code> results
<ul>
<li>it would be helpful to have a summary across all R versions and platforms for any given package</li>
</ul>
</li>
<li>Include actual CRAN check results - CRAN check results can include output of the failures (whether they&rsquo;re in examples or the test suite, or an installation error). The API doesn&rsquo;t currently include that output, but thinking about how it could.</li>
<li>Possibly update data more often. Right now we update once per day. Seems like results do roll in at different times though, perhaps as builds are done for each pkg?</li>
<li>Notification service:  package maintainers can opt-in to notifications when their checks are failing so they can be on top of fixes quickly.  This could be managed through the API itself, with no GUI, but to make it palatable to all types may want to make a super simple web page to sign up.</li>
</ul>
<p>Check out the <a href="https://github.com/ropensci/cchecksapi/issues">issue tracker</a> to follow progress or file a feature request or bug.</p>
<!-- raw HTML omitted -->
<hr>
<h2 id="thanks">Thanks</h2>
<p>Thanks to <a href="https://github.com/gaborcsardi">Gábor Csárdi</a> for the idea to make a <code>/maintainers</code> route.</p>
<h2 id="further-reading">Further reading</h2>
<p>In a <a href="https://blog.cloud66.com/deploying-rest-apis-to-docker-using-ruby-and-sinatra/">similar post</a> Cloud66 folks talked about deploying an API with the same stack essentially: Sinatra, MongoDB, and Docker.</p>
<h2 id="ps">p.s.</h2>
<p>I mostly write about R software, so some readers may use R: if you want to make a web API but only know R, try learning Ruby!  It can&rsquo;t hurt to learn Ruby, and you&rsquo;ll be happy you did.</p>
]]></content:encoded>
    </item>
    <item>
      <title>cranchecks: an API for CRAN check results</title>
      <link>http://localhost:1313/2017/09/cranchecks-api/</link>
      <pubDate>Wed, 27 Sep 2017 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2017/09/cranchecks-api/</guid>
      <description>If you maintain an R package, or even use R packages, you may have looked at CRAN check results. These are essentially the results of running R CMD CHECK on a package. They do these for each package for each of a few different operating systems (debian, fedora, solaris, windows, osx) and different R versions (devel, release and patched).
src: https://github.com/ropensci/cchecksapi base api url: https://cranchecks.info CRAN maintainers look at these, and eventually will email maintainers if checks are bad enough.</description><content:encoded><![CDATA[ ]]>
               <![CDATA[<p>If you maintain an R package, or even use R packages, you may have looked at CRAN check results. These are essentially the results of running <code>R CMD CHECK</code> on a package. They do these for each package for each of a few different operating systems (debian, fedora, solaris, windows, osx) and different R versions (devel, release and patched).</p>
<ul>
<li>src: <a href="https://github.com/ropensci/cchecksapi">https://github.com/ropensci/cchecksapi</a></li>
<li>base api url: <a href="https://cranchecks.info">https://cranchecks.info</a></li>
</ul>
<p>CRAN maintainers look at these, and eventually will email maintainers if checks are bad enough.</p>
<p>Which brings us to the motivation for the API: it&rsquo;d be nice to have a modern way (read: an API) to check CRAN check results.</p>
<p>The tech looks like so:</p>
<ul>
<li>language: Ruby</li>
<li>rest framework: Sinatra</li>
<li>http requests for scraping: faraday</li>
<li>database (storage): mongodb</li>
<li>server: caddy</li>
<li>scheduled scraping: cron (outside of docker)</li>
<li>container: docker-compose</li>
</ul>
<p>The API originally just had rOpenSci pkgs, which is a small 150ish. But it was easy enough to scale it, so the API has all CRAN packages now.</p>
<p>The scraping step takes about 40 minutes and happens once a day. To clarify, results are up to date, so you can just use this API and not have to look up results on a cran mirror itself.</p>
<h2 id="api-routes">API routes</h2>
<p>Here&rsquo;s the breakdown</p>
<ul>
<li><code>/</code></li>
<li><code>/heartbeat</code></li>
<li><code>/docs</code></li>
<li><code>/pkgs</code></li>
<li><code>/pkgs/:pkg_name:</code></li>
</ul>
<h2 id="docs">/docs</h2>
<p>Brings you to the docs at <a href="https://github.com/ropensci/cchecksapi/blob/master/docs/api_docs.md">https://github.com/ropensci/cchecksapi/blob/master/docs/api_docs.md</a></p>
<h2 id="pkgs">/pkgs</h2>
<p>Get all packages, paginated 10 at a time by default.</p>
<p>for example:</p>
<pre tabindex="0"><code>curl https://cranchecks.info/pkgs | jq .
</code></pre><p>Params:</p>
<ul>
<li><code>limit</code> - number of records to return, default 10, max 1000</li>
<li><code>offset</code> - record to start at, deafult 0</li>
</ul>
<h2 id="pkgspkg_name">/pkgs/:pkg_name</h2>
<p>Get a package by name.</p>
<p>for example:</p>
<pre tabindex="0"><code>curl https://cranchecks.info/pkgs/crul | jq .
</code></pre><p>Output looks like:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-json" data-lang="json"><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;error&#34;</span>: <span style="color:#66d9ef">null</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;data&#34;</span>: {
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;_id&#34;</span>: <span style="color:#e6db74">&#34;sofa&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;package&#34;</span>: <span style="color:#e6db74">&#34;sofa&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;checks&#34;</span>: [
</span></span><span style="display:flex;"><span>      {
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&#34;Flavor&#34;</span>: <span style="color:#e6db74">&#34;r-devel-linux-x86_64-debian-clang &#34;</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&#34;Version&#34;</span>: <span style="color:#e6db74">&#34;0.2.0 &#34;</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&#34;Tinstall&#34;</span>: <span style="color:#e6db74">&#34;1.01 &#34;</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&#34;Tcheck&#34;</span>: <span style="color:#e6db74">&#34;18.27 &#34;</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&#34;Ttotal&#34;</span>: <span style="color:#e6db74">&#34;19.28 &#34;</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&#34;Status&#34;</span>: <span style="color:#e6db74">&#34;OK&#34;</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&#34;check_url&#34;</span>: <span style="color:#e6db74">&#34;https://www.R-project.org/nosvn/R.check/r-devel-linux-x86_64-debian-clang/sofa-00check.html&#34;</span>
</span></span><span style="display:flex;"><span>      },
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">...</span>
</span></span></code></pre></div><p>The full URL is given for the check results, so you can go to it and check results, e.g., the top of the one above:</p>
<pre tabindex="0"><code>using R Under development (unstable) (2017-09-21 r73332)
using platform: x86_64-pc-linux-gnu (64-bit)
using session charset: UTF-8
checking for file ‘sofa/DESCRIPTION’ ... OK
this is package ‘sofa’ version ‘0.2.0’
checking package namespace information ... OK
checking package dependencies ... OK
checking if this is a source package ... OK
checking if there is a namespace ... OK
checking for executable files ... OK
checking for hidden files and directories ... OK
checking for portable file names ... OK
checking for sufficient/correct file permissions ... OK
checking whether package ‘sofa’ can be installed ... OK

...
</code></pre><h2 id="to-do">TO DO</h2>
<ul>
<li>maybe caching for <code>/pkgs</code> route</li>
<li>lowercase all keys just cause</li>
<li>clean up api results: numerics should be actual numerics, make empty strings to <code>null</code>, maybe change a status of <code>OK</code> to <code>true</code> so its more JSONish</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>USDA plants database API in R</title>
      <link>http://localhost:1313/2016/10/usda-plants-database-r/</link>
      <pubDate>Wed, 19 Oct 2016 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2016/10/usda-plants-database-r/</guid>
      <description>The USDA maintains a database of plant information, some of it trait data, some of it life history. Check it out at https://plants.usda.gov/java/
They&amp;rsquo;ve been talking about releasing an API for a long time, but have not done so.
Thus, since at least some version of their data is in the public web, I&amp;rsquo;ve created a RESTful API for the data:
source code: https://github.com/sckott/usdaplantsapi/ base URL: https://plantsdb.xyz Check out the API, and open issues for bugs/feature requests in the github repo.</description><content:encoded><![CDATA[ ]]>
               <![CDATA[<p>The USDA maintains a database of plant information, some of it trait data, some
of it life history. Check it out at <a href="https://plants.usda.gov/java/">https://plants.usda.gov/java/</a></p>
<p>They&rsquo;ve been talking about releasing an API for a long time, but have not done so.</p>
<p>Thus, since at least some version of their data is in the public web,
I&rsquo;ve created a RESTful API for the data:</p>
<ul>
<li>source code: <a href="https://github.com/sckott/usdaplantsapi/">https://github.com/sckott/usdaplantsapi/</a></li>
<li>base URL: <a href="https://plantsdb.xyz">https://plantsdb.xyz</a></li>
</ul>
<p>Check out the API, and open issues for bugs/feature requests in the github repo.</p>
<p>The following is an example using it from R, but you can use it from anywhere,
the command line, Ruby, Python, a browser, whatevs.</p>
<p>Here, we&rsquo;ll use <a href="https://github.com/sckott/request">request</a>, a higher level
http client for R that I&rsquo;ve been working on. A small quirk with <code>request</code> is that
when piping, you have to assign the output of the request to an object before you
can do any further manipulation. But that&rsquo;s probably good for avoiding too long
pipe chains.</p>
<blockquote>
<p>note, that I&rsquo;ve set <code>tibble.max_extra_cols = 15</code> to not print the many
columns that are returned, for blog post brevity. When you run below
you&rsquo;ll get more columns.</p>
</blockquote>
<p>Install from CRAN</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">install.packages</span>(<span style="color:#e6db74">&#34;request&#34;</span>)
</span></span></code></pre></div><p>There is a small improvement in the dev version of <code>request</code> to make any data.frame&rsquo;s
tibble&rsquo;s (which the below examples uses). To get that install from GitHub:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>devtools<span style="color:#f92672">::</span><span style="color:#a6e22e">install_github</span>(<span style="color:#e6db74">&#34;sckott/request&#34;</span>)
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">library</span>(<span style="color:#e6db74">&#39;request&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">library</span>(<span style="color:#e6db74">&#39;tibble&#39;</span>)
</span></span></code></pre></div><h3 id="heartbeat">Heartbeat</h3>
<p>The simplest call to the API is to a route <code>/heartbeat</code>,
which just lists the available routes.</p>
<p>Set the base url we&rsquo;ll use throughout the work below</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>root <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">api</span>(<span style="color:#e6db74">&#34;https://plantsdb.xyz&#34;</span>)
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>root <span style="color:#f92672">%&gt;%</span> <span style="color:#a6e22e">api_path</span>(heartbeat)
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $routes</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;/search (HEAD, GET)&#34; &#34;/heartbeat&#34;</span>
</span></span></code></pre></div><p>Okay, so there are just two routes, <code>/search</code> and <code>/heartbeat</code>.</p>
<h2 id="search">Search</h2>
<p>The search route suppports the following parameters:</p>
<ul>
<li><code>fields</code>, e.g., <code>fields='Genus,Species'</code> (default: all fields returned)</li>
<li><code>limit</code>, e.g., <code>limit=10</code> (default: 10)</li>
<li><code>offset</code>, e.g., <code>offset=1</code> (default: 0)</li>
<li>search on any fields in the output, e.g, <code>Genus=Pinus</code> or <code>Species=annua</code></li>
</ul>
<h3 id="basic-search">basic search</h3>
<p>Let&rsquo;s first not pass any params</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>root <span style="color:#f92672">%&gt;%</span> <span style="color:#a6e22e">api_path</span>(search)
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $count</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] 92171</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $returned</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] 10</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $citation</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;USDA, NRCS. 2016. The PLANTS Database (https://plants.usda.gov, 12 July 2016). National Plant Data Team, Greensboro, NC 27401-4901 USA.&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $terms</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;Our plant information, including the distribution maps, lists, and text, is not copyrighted and is free for any use.&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $data</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; # A tibble: 10 × 134</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;       id Symbol Accepted_Symbol_x Synonym_Symbol_x</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; *  &lt;int&gt;  &lt;chr&gt;             &lt;chr&gt;            &lt;chr&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 1      1   ABAB              ABAB</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 2      2  ABAB2             ABPR3            ABAB2</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 3      3  ABAB3              ABTH            ABAB3</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 4      4 ABAB70            ABAB70</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 5      5   ABAC             ABUMB             ABAC</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 6      6   ABAL              ABAL</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 7      7  ABAL2             ABUMU            ABAL2</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 8      8  ABAL3             ABAL3</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 9      9   ABAM              ABAM</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 10    10  ABAM2             ABAM2</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; # ... with 130 more variables: Scientific_Name_x &lt;chr&gt;,</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; #   Hybrid_Genus_Indicator &lt;chr&gt;, Hybrid_Species_Indicator &lt;chr&gt;,</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; #   Species &lt;chr&gt;, Subspecies_Prefix &lt;chr&gt;,</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; #   Hybrid_Subspecies_Indicator &lt;chr&gt;, Subspecies &lt;chr&gt;,</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; #   Variety_Prefix &lt;chr&gt;, Hybrid_Variety_Indicator &lt;chr&gt;, Variety &lt;chr&gt;,</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; #   Subvariety_Prefix &lt;chr&gt;, Subvariety &lt;chr&gt;, Forma_Prefix &lt;chr&gt;,</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; #   Forma &lt;chr&gt;, Genera_Binomial_Author &lt;chr&gt;, ...</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $error</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; NULL</span>
</span></span></code></pre></div><p>You get slots:</p>
<ul>
<li><code>count</code>: number of results found</li>
<li><code>returned</code>: numbef of results returned</li>
<li><code>citation</code>: suggested citation, from USDA</li>
<li><code>terms</code>: terms of use, from USDA</li>
<li><code>data</code>: the results</li>
<li><code>error</code>: if an error occurred, you&rsquo;ll see the message here</li>
</ul>
<p>Note that if any data.frame&rsquo;s are found, we make them into tibble&rsquo;s, nicely
formatted data.frame&rsquo;s that make it easy to deal with large data.</p>
<h3 id="pagination">Pagination</h3>
<p>limit number of results</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>root <span style="color:#f92672">%&gt;%</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">api_path</span>(search) <span style="color:#f92672">%&gt;%</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">api_query</span>(limit <span style="color:#f92672">=</span> <span style="color:#ae81ff">5</span>)
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $count</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] 92171</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $returned</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] 5</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $citation</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;USDA, NRCS. 2016. The PLANTS Database (https://plants.usda.gov, 12 July 2016). National Plant Data Team, Greensboro, NC 27401-4901 USA.&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $terms</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;Our plant information, including the distribution maps, lists, and text, is not copyrighted and is free for any use.&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $data</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; # A tibble: 5 × 134</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;      id Symbol Accepted_Symbol_x Synonym_Symbol_x</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; * &lt;int&gt;  &lt;chr&gt;             &lt;chr&gt;            &lt;chr&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 1     1   ABAB              ABAB</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 2     2  ABAB2             ABPR3            ABAB2</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 3     3  ABAB3              ABTH            ABAB3</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 4     4 ABAB70            ABAB70</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 5     5   ABAC             ABUMB             ABAC</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; # ... with 130 more variables: Scientific_Name_x &lt;chr&gt;,</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; #   Hybrid_Genus_Indicator &lt;chr&gt;, Hybrid_Species_Indicator &lt;chr&gt;,</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; #   Species &lt;chr&gt;, Subspecies_Prefix &lt;chr&gt;,</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; #   Hybrid_Subspecies_Indicator &lt;chr&gt;, Subspecies &lt;chr&gt;,</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; #   Variety_Prefix &lt;chr&gt;, Hybrid_Variety_Indicator &lt;chr&gt;, Variety &lt;chr&gt;,</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; #   Subvariety_Prefix &lt;chr&gt;, Subvariety &lt;chr&gt;, Forma_Prefix &lt;chr&gt;,</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; #   Forma &lt;chr&gt;, Genera_Binomial_Author &lt;chr&gt;, ...</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $error</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; NULL</span>
</span></span></code></pre></div><p>change record to start at</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>root <span style="color:#f92672">%&gt;%</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">api_path</span>(search) <span style="color:#f92672">%&gt;%</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">api_query</span>(limit <span style="color:#f92672">=</span> <span style="color:#ae81ff">5</span>, offset <span style="color:#f92672">=</span> <span style="color:#ae81ff">10</span>)
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $count</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] 92161</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $returned</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] 5</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $citation</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;USDA, NRCS. 2016. The PLANTS Database (https://plants.usda.gov, 12 July 2016). National Plant Data Team, Greensboro, NC 27401-4901 USA.&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $terms</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;Our plant information, including the distribution maps, lists, and text, is not copyrighted and is free for any use.&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $data</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; # A tibble: 5 × 134</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;      id Symbol Accepted_Symbol_x Synonym_Symbol_x</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; * &lt;int&gt;  &lt;chr&gt;             &lt;chr&gt;            &lt;chr&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 1    11  ABAM3             ABAM3</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 2    12  ABAM4              NAAM            ABAM4</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 3    13  ABAM5              ABAB            ABAM5</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 4    14   ABAN              ABAN</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 5    15  ABANA              ABAN            ABANA</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; # ... with 130 more variables: Scientific_Name_x &lt;chr&gt;,</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; #   Hybrid_Genus_Indicator &lt;chr&gt;, Hybrid_Species_Indicator &lt;chr&gt;,</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; #   Species &lt;chr&gt;, Subspecies_Prefix &lt;chr&gt;,</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; #   Hybrid_Subspecies_Indicator &lt;chr&gt;, Subspecies &lt;chr&gt;,</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; #   Variety_Prefix &lt;chr&gt;, Hybrid_Variety_Indicator &lt;chr&gt;, Variety &lt;chr&gt;,</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; #   Subvariety_Prefix &lt;chr&gt;, Subvariety &lt;chr&gt;, Forma_Prefix &lt;chr&gt;,</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; #   Forma &lt;chr&gt;, Genera_Binomial_Author &lt;chr&gt;, ...</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $error</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; NULL</span>
</span></span></code></pre></div><h3 id="return-fields">Return fields</h3>
<p>You can say what fields you want returned, useful when you just want a
subset of fields</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>root <span style="color:#f92672">%&gt;%</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">api_path</span>(search) <span style="color:#f92672">%&gt;%</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">api_query</span>(fields <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;Genus,Species,Symbol&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $count</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] 92171</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $returned</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] 10</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $citation</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;USDA, NRCS. 2016. The PLANTS Database (https://plants.usda.gov, 12 July 2016). National Plant Data Team, Greensboro, NC 27401-4901 USA.&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $terms</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;Our plant information, including the distribution maps, lists, and text, is not copyrighted and is free for any use.&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $data</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; # A tibble: 10 × 3</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;    Symbol     Species       Genus</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; *   &lt;chr&gt;       &lt;chr&gt;       &lt;chr&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 1    ABAB abutiloides    Abutilon</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 2   ABAB2       abrus       Abrus</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 3   ABAB3    abutilon    Abutilon</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 4  ABAB70    abietina Abietinella</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 5    ABAC   acutalata     Abronia</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 6    ABAL      alpina     Abronia</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 7   ABAL2        alba     Abronia</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 8   ABAL3        alba       Abies</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 9    ABAM    amabilis       Abies</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 10  ABAM2     ameliae     Abronia</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $error</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; NULL</span>
</span></span></code></pre></div><h3 id="query">Query</h3>
<p>You can query on individual fields</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>root <span style="color:#f92672">%&gt;%</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">api_path</span>(search) <span style="color:#f92672">%&gt;%</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">api_query</span>(Genus <span style="color:#f92672">=</span> Pinus, fields <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Genus,Species&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $count</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] 185</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $returned</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] 10</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $citation</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;USDA, NRCS. 2016. The PLANTS Database (https://plants.usda.gov, 12 July 2016). National Plant Data Team, Greensboro, NC 27401-4901 USA.&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $terms</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;Our plant information, including the distribution maps, lists, and text, is not copyrighted and is free for any use.&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $data</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; # A tibble: 10 × 2</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;       Species Genus</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; *       &lt;chr&gt; &lt;chr&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 1  albicaulis Pinus</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 2    apacheca Pinus</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 3    aristata Pinus</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 4   arizonica Pinus</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 5    armandii Pinus</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 6   arizonica Pinus</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 7    aristata Pinus</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 8   arizonica Pinus</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 9   arizonica Pinus</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 10  attenuata Pinus</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $error</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; NULL</span>
</span></span></code></pre></div><p>Another query example</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>root <span style="color:#f92672">%&gt;%</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">api_path</span>(search) <span style="color:#f92672">%&gt;%</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">api_query</span>(Species <span style="color:#f92672">=</span> annua, fields <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Genus,Species&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $count</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] 30</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $returned</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] 10</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $citation</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;USDA, NRCS. 2016. The PLANTS Database (https://plants.usda.gov, 12 July 2016). National Plant Data Team, Greensboro, NC 27401-4901 USA.&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $terms</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;Our plant information, including the distribution maps, lists, and text, is not copyrighted and is free for any use.&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $data</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; # A tibble: 10 × 2</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;    Species         Genus</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; *    &lt;chr&gt;         &lt;chr&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 1    annua        Adonis</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 2    annua     Artemisia</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 3    annua   Bulbostylis</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 4    annua    Castilleja</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 5    annua   Craniolaria</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 6    annua Dimorphotheca</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 7    annua       Drosera</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 8    annua    Eleocharis</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 9    annua  Fimbristylis</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 10   annua    Heliomeris</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $error</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; NULL</span>
</span></span></code></pre></div><p>And one more example, here we&rsquo;re interested in finding taxa that are perennials</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>root <span style="color:#f92672">%&gt;%</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">api_path</span>(search) <span style="color:#f92672">%&gt;%</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">api_query</span>(Duration <span style="color:#f92672">=</span> Perennial, fields <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Genus,Species,Symbol,Duration&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $count</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] 25296</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $returned</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] 10</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $citation</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;USDA, NRCS. 2016. The PLANTS Database (https://plants.usda.gov, 12 July 2016). National Plant Data Team, Greensboro, NC 27401-4901 USA.&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $terms</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;Our plant information, including the distribution maps, lists, and text, is not copyrighted and is free for any use.&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $data</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; # A tibble: 10 × 4</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;    Symbol     Species  Duration    Genus</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; *   &lt;chr&gt;       &lt;chr&gt;     &lt;chr&gt;    &lt;chr&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 1    ABAB abutiloides Perennial Abutilon</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 2    ABAL      alpina Perennial  Abronia</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 3   ABAL3        alba Perennial    Abies</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 4    ABAM    amabilis Perennial    Abies</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 5   ABAM2     ameliae Perennial  Abronia</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 6   ABAM3   ammophila Perennial  Abronia</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 7    ABAR   argillosa Perennial  Abronia</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 8    ABAU     auritum Perennial Abutilon</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 9    ABBA    balsamea Perennial    Abies</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 10  ABBAB    balsamea Perennial    Abies</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $error</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; NULL</span>
</span></span></code></pre></div>]]></content:encoded>
    </item>
    <item>
      <title>gbids - GenBank IDs API is back up!</title>
      <link>http://localhost:1313/2016/09/gbids-is-back/</link>
      <pubDate>Thu, 01 Sep 2016 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2016/09/gbids-is-back/</guid>
      <description>GBIDS API is back Back in March this year I wrote a post about a new API for working with GenBank IDs.
I had to take the API down because it was too expensive to keep up. Expensive because the dump of data is very large (3.8 GB compressed), and I need disk space on the server to uncompress that to I think about 18 GB, then load into MySQL, which is another maybe 30 GB or so.</description><content:encoded><![CDATA[ ]]>
               <![CDATA[<h2 id="gbids-api-is-back">GBIDS API is back</h2>
<p>Back in March this year I wrote <a href="https://recology.info/2016/03/genbank-ids/">a post about a new API for working with GenBank IDs</a>.</p>
<p>I had to take the API down because it was too expensive to keep up. Expensive because the dump of data is very large (3.8 GB compressed), and I need disk space on the server to uncompress that to I think about 18 GB, then load into MySQL, which is another maybe 30 GB or so. Anyway, it&rsquo;s not expensive because of high traffic - although I wish that was the case - but because of needing lots of disk space.</p>
<p>I was fortuntate to recently receive some <a href="https://aws.amazon.com/research-credits/">Amazon Cloud Credits for Research</a>. The credits expire in 1 year. With these credits, I&rsquo;ve put the GBIDS API back up. In the next year I&rsquo;m hoping to gain user traction suggesting that&rsquo;s is useful to enough people to keep maintaining - in which case I&rsquo;ll seek ways to fund it.</p>
<p>But that means I need people to use it!  So please to give it a try. Let me know what could be better; what could be faster; what API routes/features/etc. you&rsquo;d like to see.</p>
<h2 id="plans">Plans</h2>
<p>Plans for the future of the GBIDS API:</p>
<ul>
<li>Auto-update the Genbank data. This is quite complicated since the dump is so large. I can either keep an EC2 attached disc large enough to do the dump download/expansion/load/etc, or spin up a new instance each Sunday when they do their data release, do the SQL load, make a dump, then shuttle the SQL dump to the instance running, then load in the new data from the dump. I haven&rsquo;t got this bit running yet, so data is from Aug 7. 2016.</li>
<li>Add taxonomic IDs. Genbank also dumps their taxonomic IDs. I think it should be possible to get taxonomic IDs into the API, so that users can do accession number to taxon IDs and vice versa.</li>
<li>Performance: as anyone would want, I want to continually improve performance. I&rsquo;ll watch out for things I can do, but also let me know what seems too slow.</li>
</ul>
<h2 id="links">Links</h2>
<ul>
<li>API base url: <a href="https://gbids.xyz">https://gbids.xyz</a></li>
<li>API docs: <a href="https://recology.info/gbidsdocs">https://recology.info/gbidsdocs</a> - Let me know if these could be improved</li>
<li>API status page: <a href="https://recology.info/gbidsstatus">https://recology.info/gbidsstatus</a> - I update this page whenever there&rsquo;s some down time, then when it&rsquo;s back up, etc.</li>
<li>API source code: <a href="https://github.com/sckott/gbids">https://github.com/sckott/gbids</a> - You can file issues here about the API</li>
</ul>
<h2 id="try-it">Try it</h2>
<p>Get 5 accession numbers</p>
<pre tabindex="0"><code>curl &#39;https://gbids.xyz/acc?limit=5&#39; | jq .
#&gt; {
#&gt;   &#34;matched&#34;: 692006925,
#&gt;   &#34;returned&#34;: 5,
#&gt;   &#34;data&#34;: [
#&gt;     &#34;A00002&#34;,
#&gt;     &#34;A00003&#34;,
#&gt;     &#34;X17276&#34;,
#&gt;     &#34;X60065&#34;,
#&gt;     &#34;CAA42669&#34;
#&gt;   ],
#&gt;   &#34;error&#34;: null
#&gt; }
</code></pre><p>Request to match accession identifiers, some exist, while some do not</p>
<pre tabindex="0"><code>curl &#39;https://gbids.xyz/acc/AACY024124486,AACY024124483,asdfd,asdf,AACY024124476&#39; | jq .
#&gt; {
#&gt;   &#34;matched&#34;: 3,
#&gt;   &#34;returned&#34;: 5,
#&gt;   &#34;data&#34;: {
#&gt;     &#34;AACY024124486&#34;: true,
#&gt;     &#34;AACY024124483&#34;: true,
#&gt;     &#34;asdfd&#34;: false,
#&gt;     &#34;asdf&#34;: false,
#&gt;     &#34;AACY024124476&#34;: true
#&gt;   },
#&gt;   &#34;error&#34;: null
#&gt; }
</code></pre><p>There&rsquo;s many more examples in the <a href="https://recology.info/gbidsdocs">API docs</a></p>
]]></content:encoded>
    </item>
    <item>
      <title>GenBank IDs API - get, match, swap id types</title>
      <link>http://localhost:1313/2016/03/genbank-ids/</link>
      <pubDate>Tue, 29 Mar 2016 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2016/03/genbank-ids/</guid>
      <description>GenBank IDs, accession numbers and GI identifiers, are the two types of identifiers for entries in GenBank. (see this page for why there are two types of identifiers). Actually, recent news from NCBI is that GI identifiers will be phased out by September this year, which affects what I&amp;rsquo;ll talk about below.
There are a lot of sequences in GenBank. Sometimes you have identifiers and you want to check if they exist in GenBank, or want to get one type from another (accession from GI, or vice versa; although GI phase out will make this use case no longer needed), or just get a bunch of identifiers for software testing purposes perhaps.</description><content:encoded><![CDATA[ ]]>
               <![CDATA[<p>GenBank IDs, accession numbers and GI identifiers, are the two types of identifiers for entries in GenBank. (see <a href="https://www.ncbi.nlm.nih.gov/Sitemap/sequenceIDs.html">this page</a> for why there are two types of identifiers). Actually, <a href="https://www.ncbi.nlm.nih.gov/news/03-02-2016-phase-out-of-GI-numbers/">recent news</a> from NCBI is that GI identifiers will be phased out by September this year, which affects what I&rsquo;ll talk about below.</p>
<p>There are a lot of sequences in GenBank. Sometimes you have identifiers and you want to check if they exist in GenBank, or want to get one type from another (accession from GI, or vice versa; although GI phase out will make this use case no longer needed), or just get a bunch of identifiers for software testing purposes perhaps.</p>
<p>Currently, the ENTREZ web services aren&rsquo;t super performant or easy to use for the above use cases. Thus, I&rsquo;ve built out a RESTful API for these use cases, called <a href="https://github.com/sckott/gbids">gbids</a>.</p>
<p><code>gbids</code> on GitHub: <a href="https://github.com/sckott/gbids">sckott/gbids</a></p>
<p>Here&rsquo;s the tech stack:</p>
<ul>
<li>API: Ruby/Sinatra</li>
<li>Storage: MySQL</li>
<li>Caching: Redis
<ul>
<li>each key cached for 3 hours</li>
</ul>
</li>
<li>Server: Caddy
<ul>
<li>https</li>
</ul>
</li>
<li>Authentication: none</li>
</ul>
<p>Will soon have a cron job update when new dump is available every Sunday, but for now we&rsquo;re about a month behind the current dump of identifiers. If usage of the API picks up, I&rsquo;ll know it&rsquo;s worth maintaining and make sure data is up to date.</p>
<p>The base url is <a href="https://gbids.xyz">https://gbids.xyz</a></p>
<p>Here&rsquo;s a rundown of the API routes:</p>
<ul>
<li><code>/</code> re-routes to <code>/heartbeat</code></li>
<li><code>/heartbeat</code> - list routes</li>
<li><code>/acc</code> - <code>GET</code> - list accession ids</li>
<li><code>/acc/:id,:id,...</code> - <code>GET</code> - submit many accession numbers, get back boolean (match or no match)</li>
<li><code>/acc</code> - <code>POST</code></li>
<li><code>/gi</code> - <code>GET</code> - list gi numbers</li>
<li><code>/gi/:id,:id,...</code> - <code>GET</code> - submit many gi numbers, get back boolean (match or no match)</li>
<li><code>/gi</code> - <code>POST</code></li>
<li><code>/acc2gi/:id,:id,...</code> - <code>GET</code> - get gi numbers from accession numbers</li>
<li><code>/acc2gi</code> - <code>POST</code></li>
<li><code>/gi2acc/:id,:id,...</code> - <code>GET</code> - get accession numbers from gi numbers</li>
<li><code>/gi2acc</code> - <code>POST</code></li>
</ul>
<p>Of course after GI identifiers are phased out, all <code>gi</code> routes will be removed.</p>
<p>The API docs are at <a href="https://recology.info/gbidsdocs">recology.info/gbidsdocs</a> - let me know if you have any feedback on those.</p>
<p>I also have a status page up at <a href="https://recology.info/gbidsstatus/">recology.info/gbidsstatus</a> - it&rsquo;s not automated, I have to update the status manually, but I do update that page whenever I&rsquo;m doing maintenance and the API will be down, or if it goes down due to any other reason.</p>
<h2 id="examples">examples</h2>
<p>Request to list accession identifiers, limit to 5</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>curl <span style="color:#e6db74">&#39;https://gbids.xyz/acc?limit=5&#39;</span> | jq .
</span></span><span style="display:flex;"><span><span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;matched&#34;</span>: 692006925,
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;returned&#34;</span>: 5,
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;data&#34;</span>: <span style="color:#f92672">[</span>
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;A00002&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;A00003&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;X17276&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;X60065&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;CAA42669&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">]</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;error&#34;</span>: null
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><p>Request to match accession identifiers, some exist, while some do not</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>curl <span style="color:#e6db74">&#39;https://gbids.xyz/acc/AACY024124486,AACY024124483,asdfd,asdf,AACY024124476&#39;</span> | jq .
</span></span><span style="display:flex;"><span><span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;matched&#34;</span>: 3,
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;returned&#34;</span>: 5,
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;data&#34;</span>: <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;AACY024124486&#34;</span>: true,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;AACY024124483&#34;</span>: true,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;asdfd&#34;</span>: false,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;asdf&#34;</span>: false,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;AACY024124476&#34;</span>: true
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">}</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;error&#34;</span>: null
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><h2 id="to-do">to do</h2>
<p>I think it&rsquo;d probably be worth adding routes for getting accession from taxonomy id and vice versa since that&rsquo;s something that is currently not very easy. We could use the dumped accession2taxid data from <a href="ftp://ftp.ncbi.nih.gov/pub/taxonomy/accession2taxid/">ftp://ftp.ncbi.nih.gov/pub/taxonomy/accession2taxid/</a></p>
<h2 id="feedback">feedback!</h2>
<p>If you think this could be potentially useful, do try it out and send any feedback. I watch logs from the API, so I&rsquo;m hoping for an increase in usage so I know people find it useful.</p>
<p>Since servers aren&rsquo;t free, costs add up, and if I don&rsquo;t see usage pick up I&rsquo;ll discontinue the service at some point. So do use it!</p>
<p>And if anyone can offer free servers, I&rsquo;d gladly take advantage of that. I&rsquo;ve applied for AWS research grant, but won&rsquo;t hear back for a few months.</p>
]]></content:encoded>
    </item>
    <item>
      <title>request - a high level HTTP client for R</title>
      <link>http://localhost:1313/2016/01/request-hello-world/</link>
      <pubDate>Tue, 05 Jan 2016 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2016/01/request-hello-world/</guid>
      <description>request is DSL for http requests for R, and is inspired by the CLI tool httpie. It&amp;rsquo;s built on httr.
The following were driving principles for this package:
The web is increasingly a JSON world, so we assume applications/json by default, but give back other types if not The workflow follows logically, or at least should, from, hey, I got this url, to i need to add some options, to execute request - and functions support piping so that you can execute functions in this order Whenever possible, we transform output to data.</description><content:encoded><![CDATA[ ]]>
               <![CDATA[<p><code>request</code> is DSL for http requests for R, and is inspired by the CLI tool <a href="https://github.com/jakubroztocil/httpie">httpie</a>. It&rsquo;s built on <code>httr</code>.</p>
<p>The following were driving principles for this package:</p>
<ul>
<li>The web is increasingly a JSON world, so we assume <code>applications/json</code> by default, but give back other types if not</li>
<li>The workflow follows logically, or at least should, from, <em>hey, I got this url</em>, to <em>i need to add some options</em>, to <em>execute request</em> - and functions support piping so that you can execute functions in this order</li>
<li>Whenever possible, we transform output to data.frame&rsquo;s - facilitating downstream manipulation via <code>dplyr</code>, etc.</li>
<li>We do <code>GET</code> requests by default. Specify a different type if you don&rsquo;t want <code>GET</code>. Given <code>GET</code> by default, this client is optimized for consumption of data, rather than creating new things on servers</li>
<li>You can use non-standard evaluation to easily pass in query parameters without worrying about <code>&amp;</code>&rsquo;s, URL escaping, etc. (see <code>api_query()</code>)</li>
<li>Same for body params (see <code>api_body()</code>)</li>
</ul>
<p>The following is a brief demo of some of the package functionality:</p>
<h2 id="install">Install</h2>
<p>From CRAN</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">install.packages</span>(<span style="color:#e6db74">&#34;request&#34;</span>)
</span></span></code></pre></div><p>Or from GitHub</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>devtools<span style="color:#f92672">::</span><span style="color:#a6e22e">install_github</span>(<span style="color:#e6db74">&#34;sckott/request&#34;</span>)
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">library</span>(<span style="color:#e6db74">&#34;request&#34;</span>)
</span></span></code></pre></div><h2 id="execute-on-last-pipe">Execute on last pipe</h2>
<p>When using pipes (<code>%&gt;%</code>) in <code>request</code>, we autodetect last piped command, and execute <code>http()</code> if it&rsquo;s the last. If not the last, the output gets passed to the next command, and so on. This feature (and <code>magrittr</code>) were done by Stefan Milton Bache.</p>
<p>This feature is really nice because a) it&rsquo;s one less thing you need to do, and b) you only need to care about the request itself.</p>
<p>You can escape auto-execution if you use the function <code>peep()</code>, which prints out a summary of the request you&rsquo;ve created, but does not execute an HTTP request.</p>
<h2 id="http-requests">HTTP Requests</h2>
<p>A high level function <code>http()</code> wraps a lower level <code>R6</code> object <code>RequestIterator</code>, which holds a series of variables and functions to execute <code>GET</code> and <code>POST</code> requests, and will hold other HTTP verbs as well. In addition, it can hold state, which will allow us to do paging internally for you (see below). You have direct access to the <code>R6</code> object if you call <code>http_client()</code> instead of <code>http()</code>.</p>
<h2 id="nse-and-se">NSE and SE</h2>
<p>Most if not all functions in <code>request</code> support non-standard evaluation (NSE) as well as standard evaluation (SE). If a function supports both, there&rsquo;s a version without an underscore for NSE, while a version with an underscore is for SE. For example, here, we make a HTTP request by passing a base URL, then a series of paths that get combined together. First the NSE version</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">api</span>(<span style="color:#e6db74">&#39;https://api.github.com/&#39;</span>) <span style="color:#f92672">%&gt;%</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">api_path</span>(repos, ropensci, rgbif, issues)
</span></span></code></pre></div><p>Then the SE version</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">api</span>(<span style="color:#e6db74">&#39;https://api.github.com/&#39;</span>) <span style="color:#f92672">%&gt;%</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">api_path_</span>(<span style="color:#e6db74">&#39;repos&#39;</span>, <span style="color:#e6db74">&#39;ropensci&#39;</span>, <span style="color:#e6db74">&#39;rgbif&#39;</span>, <span style="color:#e6db74">&#39;issues&#39;</span>)
</span></span></code></pre></div><h2 id="building-api-routes">Building API routes</h2>
<p>The first thing you&rsquo;ll want to do is lay out the base URL for your request. The function <code>api()</code> is your friend.</p>
<p><code>api()</code> works with full or partial URLs:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">api</span>(<span style="color:#e6db74">&#39;https://api.github.com/&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; URL: https://api.github.com/</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">api</span>(<span style="color:#e6db74">&#39;https://api.gbif.org/v1&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; URL: https://api.gbif.org/v1</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">api</span>(<span style="color:#e6db74">&#39;api.gbif.org/v1&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; URL: api.gbif.org/v1</span>
</span></span></code></pre></div><p>And works with ports, full or partial</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">api</span>(<span style="color:#e6db74">&#39;http://localhost:9200&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; URL: http://localhost:9200</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">api</span>(<span style="color:#e6db74">&#39;localhost:9200&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; URL: http://localhost:9200</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">api</span>(<span style="color:#e6db74">&#39;:9200&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; URL: http://localhost:9200</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">api</span>(<span style="color:#e6db74">&#39;9200&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; URL: http://localhost:9200</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">api</span>(<span style="color:#e6db74">&#39;9200/stuff&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; URL: http://localhost:9200/stuff</span>
</span></span></code></pre></div><h2 id="make-http-requests">Make HTTP requests</h2>
<p>The above examples with <code>api()</code> are not passed through a pipe, so only define a URL, but don&rsquo;t do an HTTP request. To make an HTTP request, you can either pipe a url or partial url to e.g., <code>api()</code>, or call <code>http()</code> at the end of a string of function calls:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#e6db74">&#39;https://api.github.com/&#39;</span> <span style="color:#f92672">%&gt;%</span> <span style="color:#a6e22e">api</span>()
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $current_user_url</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;https://api.github.com/user&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $current_user_authorizations_html_url</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;https://github.com/settings/connections/applications{/client_id}&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $authorizations_url</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;https://api.github.com/authorizations&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $code_search_url</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">...</span>
</span></span></code></pre></div><p>Or</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">api</span>(<span style="color:#e6db74">&#39;https://api.github.com/&#39;</span>) <span style="color:#f92672">%&gt;%</span> <span style="color:#a6e22e">http</span>()
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $current_user_url</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;https://api.github.com/user&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $current_user_authorizations_html_url</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;https://github.com/settings/connections/applications{/client_id}&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $authorizations_url</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;https://api.github.com/authorizations&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $code_search_url</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">...</span>
</span></span></code></pre></div><p><code>http()</code> is called at the end of a chain of piped commands, so no need to invoke it. However, you can if you like.</p>
<h2 id="templating">Templating</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>repo_info <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">list</span>(username <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;craigcitro&#39;</span>, repo <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;r-travis&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">api</span>(<span style="color:#e6db74">&#39;https://api.github.com/&#39;</span>) <span style="color:#f92672">%&gt;%</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">api_template</span>(template <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;repos/{{username}}/{{repo}}/issues&#39;</span>, data <span style="color:#f92672">=</span> repo_info)
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [[1]]</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [[1]]$url</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;https://api.github.com/repos/craigcitro/r-travis/issues/164&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [[1]]$labels_url</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;https://api.github.com/repos/craigcitro/r-travis/issues/164/labels{/name}&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [[1]]$comments_url</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;https://api.github.com/repos/craigcitro/r-travis/issues/164/comments&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; ...</span>
</span></span></code></pre></div><h2 id="set-paths">Set paths</h2>
<p><code>api_path()</code> adds paths to the base URL</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">api</span>(<span style="color:#e6db74">&#39;https://api.github.com/&#39;</span>) <span style="color:#f92672">%&gt;%</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">api_path</span>(repos, ropensci, rgbif, issues) <span style="color:#f92672">%&gt;%</span>
</span></span><span style="display:flex;"><span>  peep
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; &lt;http request&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   url: https://api.github.com/</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   paths: repos/ropensci/rgbif/issues</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   query:</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   body:</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   paging:</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   headers:</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   rate limit:</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   retry (n/delay (s)): /</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   error handler:</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   config:</span>
</span></span></code></pre></div><h2 id="query">Query</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">api</span>(<span style="color:#e6db74">&#34;https://api.plos.org/search&#34;</span>) <span style="color:#f92672">%&gt;%</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">api_query</span>(q <span style="color:#f92672">=</span> ecology, wt <span style="color:#f92672">=</span> json, fl <span style="color:#f92672">=</span> journal) <span style="color:#f92672">%&gt;%</span>
</span></span><span style="display:flex;"><span>  peep
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; &lt;http request&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   url: https://api.plos.org/search</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   paths:</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   query: q=ecology, wt=json, fl=journal</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   body:</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   paging:</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   headers:</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   rate limit:</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   retry (n/delay (s)): /</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   error handler:</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   config:</span>
</span></span></code></pre></div><h2 id="headers">Headers</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">api</span>(<span style="color:#e6db74">&#39;https://httpbin.org/headers&#39;</span>) <span style="color:#f92672">%&gt;%</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">api_headers</span>(`X-FARGO-SEASON` <span style="color:#f92672">=</span> <span style="color:#ae81ff">3</span>, `X-NARCOS-SEASON` <span style="color:#f92672">=</span> <span style="color:#ae81ff">5</span>) <span style="color:#f92672">%&gt;%</span>
</span></span><span style="display:flex;"><span>  peep
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; &lt;http request&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   url: https://httpbin.org/headers</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   paths:</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   query:</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   body:</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   paging:</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   headers:</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;     X-FARGO-SEASON: 3</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;     X-NARCOS-SEASON: 5</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   rate limit:</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   retry (n/delay (s)): /</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   error handler:</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   config:</span>
</span></span></code></pre></div><h2 id="curl-configuration">curl configuration</h2>
<p><code>httr</code> is exported in <code>request</code>, so you can use <code>httr</code> functions like <code>verbose()</code> to get verbose curl output</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">api</span>(<span style="color:#e6db74">&#39;https://httpbin.org/headers&#39;</span>) <span style="color:#f92672">%&gt;%</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">api_config</span>(<span style="color:#a6e22e">verbose</span>())
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; -&gt; GET /headers HTTP/1.1</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; -&gt; Host: httpbin.org</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; -&gt; User-Agent: curl/7.43.0 curl/0.9.4 httr/1.0.0 request/0.1.0</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; -&gt; Accept-Encoding: gzip, deflate</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; -&gt; Accept: application/json, text/xml, application/xml, */*</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; -&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; &lt;- HTTP/1.1 200 OK</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; &lt;- Server: nginx</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; &lt;- Date: Sun, 03 Jan 2016 16:56:29 GMT</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; &lt;- Content-Type: application/json</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; &lt;- Content-Length: 227</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; &lt;- Connection: keep-alive</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; &lt;- Access-Control-Allow-Origin: *</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; &lt;- Access-Control-Allow-Credentials: true</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; &lt;-</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $headers</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; $headers$Accept</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; [1] &#34;application/json, text/xml, application/xml, */*&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; ...</span>
</span></span></code></pre></div><h2 id="coming-soon">Coming soon</h2>
<p>There&rsquo;s a number of interesting features that should be coming soon to <code>request</code>.</p>
<ul>
<li>Paging - a paging helper will make it easy to do paing, and will attempt to handle any parameters used for paging. Some user input will be required, like what parameter names are, and how many records you want returned  <a href="https://github.com/sckott/request/issues/2">sckott/request#2</a></li>
<li>Retry - a retry helper will make it easy to retry http requests on any failure, and execute a user defined function on failure <a href="https://github.com/sckott/request/issues/6">sckott/request#6</a></li>
<li>Rate limit - a rate limit helper will add info to a set of many requests - still in early design stages <a href="https://github.com/sckott/request/issues/5">sckott/request#5</a></li>
<li>Caching - a caching helper - may use in the background the in development <a href="https://github.com/ropensci/vcr">vcr R client</a> when on CRAN or perhaps <a href="https://github.com/richfitz/storr">storr</a>  <a href="https://github.com/sckott/request/issues/4">sckott/request#4</a></li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>noaa - Integrated Surface Database data</title>
      <link>http://localhost:1313/2015/10/noaa-isd/</link>
      <pubDate>Wed, 21 Oct 2015 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2015/10/noaa-isd/</guid>
      <description>I&amp;rsquo;ve recently made some improvements to the functions that work with ISD (Integrated Surface Database) data.
isd data
The isd() function now caches more intelligently. We now cache using .rds files via saveRDS/readRDS, whereas we used to use .csv files, which take up much more disk space, and we have to worry about not changing data formats on reading data back into an R session. This has the downside that you can&amp;rsquo;t just go directly to open up a cached file in your favorite spreadsheet viewer, but you can do that manually after reading in to R.</description><content:encoded><![CDATA[ ]]>
               <![CDATA[<p>I&rsquo;ve recently made some improvements to the functions that work with ISD
(Integrated Surface Database) data.</p>
<p><strong>isd data</strong></p>
<ul>
<li>The <code>isd()</code> function now caches more intelligently. We now cache using
<code>.rds</code> files via <code>saveRDS</code>/<code>readRDS</code>, whereas we used to use <code>.csv</code> files,
which take up much more disk space, and we have to worry about not changing
data formats on reading data back into an R session. This has the downside
that you can&rsquo;t just go directly to open up a cached file in your favorite
spreadsheet viewer, but you can do that manually after reading in to R.</li>
<li>In addition, <code>isd()</code> now has a function <code>cleanup</code>, if <code>TRUE</code> after
downloading the data file from NOAA&rsquo;s ftp server and processing, we delete
the file. That&rsquo;s fine since we have the cached processed file. But you
can choose not to cleanup the original data files.</li>
<li>Data processing in <code>isd()</code> is improved as well. We convert key variables
to appropriate classes to be more useful.</li>
</ul>
<p><strong>isd stations</strong></p>
<ul>
<li>In <code>isd_stations()</code>, there&rsquo;s now a cached version of the station data in
the package, or you can get optionally get fresh station data from NOAA&rsquo;s
FTP server.</li>
<li>There&rsquo;s a new function <code>isd_stations_search()</code> that uses the station data
to allow you to search for stations via either:
<ul>
<li>A bounding box</li>
<li>Radius froma point</li>
</ul>
</li>
</ul>
<h2 id="install">Install</h2>
<p>For examples below, you&rsquo;ll need the development version:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>devtools<span style="color:#f92672">::</span><span style="color:#a6e22e">install_github</span>(<span style="color:#e6db74">&#34;ropensci/rnoaa&#34;</span>)
</span></span></code></pre></div><p>Load <code>rnoaa</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">library</span>(<span style="color:#e6db74">&#34;rnoaa&#34;</span>)
</span></span></code></pre></div><h2 id="isd-stations">ISD stations</h2>
<h3 id="get-stations">Get stations</h3>
<p>There&rsquo;s a cached version of the station data in the package, or you can get fresh
station data from NOAA&rsquo;s FTP server.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>stations <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">isd_stations</span>()
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">head</span>(stations)
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   usaf  wban station_name ctry state icao lat lon elev_m    begin      end</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 1 7005 99999   CWOS 07005                  NA  NA     NA 20120127 20120127</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 2 7011 99999   CWOS 07011                  NA  NA     NA 20111025 20121129</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 3 7018 99999   WXPOD 7018                   0   0   7018 20110309 20130730</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 4 7025 99999   CWOS 07025                  NA  NA     NA 20120127 20120127</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 5 7026 99999   WXPOD 7026   AF              0   0   7026 20120713 20141120</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 6 7034 99999   CWOS 07034                  NA  NA     NA 20121024 20121106</span>
</span></span></code></pre></div><h3 id="filter-and-visualize-stations">Filter and visualize stations</h3>
<p>In addition to getting the entire station data.frame, you can also search for stations,
either with a bounding box or within a radius from a point. First, the bounding box</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>bbox <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">c</span>(<span style="color:#ae81ff">-125.0</span>, <span style="color:#ae81ff">38.4</span>, <span style="color:#ae81ff">-121.8</span>, <span style="color:#ae81ff">40.9</span>)
</span></span><span style="display:flex;"><span>out <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">isd_stations_search</span>(bbox <span style="color:#f92672">=</span> bbox)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">head</span>(out)
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;     usaf  wban                          station_name ctry state icao</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 1 720193 99999 LONNIE POOL FLD / WEAVERVILLE AIRPORT   US    CA KO54</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 2 724834 99999                        POINT CABRILLO   US    CA     </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 3 724953 99999                              RIO NIDO   US    CA     </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 4 724957 23213                 SONOMA COUNTY AIRPORT   US    CA KSTS</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 5 724957 99999                  C M SCHULZ SONOMA CO   US    CA KSTS</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 6 724970 99999                  CHICO CALIFORNIA MAP   US    CA  CIC</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;   elev_m    begin      end      lon    lat</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 1  716.0 20101030 20150831 -122.922 40.747</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 2   20.0 19810906 19871007 -123.820 39.350</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 3 -999.0 19891111 19900303 -122.917 38.517</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 4   34.8 20000101 20150831 -122.810 38.504</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 5   38.0 19430404 19991231 -122.817 38.517</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 6   69.0 19420506 19760305 -121.850 39.783</span>
</span></span></code></pre></div><p>Where is the bounding box? (you&rsquo;ll need <a href="https://cran.rstudio.com/web/packages/lawn/">lawn</a>, or you can vizualize some other way)</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">library</span>(<span style="color:#e6db74">&#34;lawn&#34;</span>)
</span></span><span style="display:flex;"><span>lawn<span style="color:#f92672">::</span><span style="color:#a6e22e">lawn_bbox_polygon</span>(bbox) <span style="color:#f92672">%&gt;%</span> view
</span></span></code></pre></div><p><img loading="lazy" src="/2015-10-21-noaa-isd/bbox_area.png" alt="plot1"  />
</p>
<p>Vizualize station subset - yep, looks right</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">library</span>(<span style="color:#e6db74">&#34;leaflet&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">leaflet</span>(data <span style="color:#f92672">=</span> out) <span style="color:#f92672">%&gt;%</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">addTiles</span>() <span style="color:#f92672">%&gt;%</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">addCircles</span>()
</span></span></code></pre></div><p><img loading="lazy" src="/2015-10-21-noaa-isd/bbox_result.png" alt="plot1"  />
</p>
<p>Next, search with a lat/lon coordinate, with a radius. That is, we search for stations
within X km from the coordinate.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>out <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">isd_stations_search</span>(lat <span style="color:#f92672">=</span> <span style="color:#ae81ff">38.4</span>, lon <span style="color:#f92672">=</span> <span style="color:#ae81ff">-123</span>, radius <span style="color:#f92672">=</span> <span style="color:#ae81ff">250</span>)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">head</span>(out)
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;     usaf  wban             station_name ctry state icao elev_m    begin</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 1 690070 93217            FRITZSCHE AAF   US    CA KOAR   43.0 19600404</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 2 720267 23224 AUBURN MUNICIPAL AIRPORT   US    CA KAUN  466.7 20060101</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 3 720267 99999         AUBURN MUNICIPAL   US    CA KAUN  468.0 20040525</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 4 720406 99999      GNOSS FIELD AIRPORT   US    CA KDVO    0.6 20071114</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 5 720576   174       UNIVERSITY AIRPORT   US    CA KEDU   21.0 20130101</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 6 720576 99999                    DAVIS   US    CA KEDU   21.0 20080721</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt;        end      lon    lat</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 1 19930831 -121.767 36.683</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 2 20150831 -121.082 38.955</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 3 20051231 -121.082 38.955</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 4 20150831 -122.550 38.150</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 5 20150831 -121.783 38.533</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#&gt; 6 20121231 -121.783 38.533</span>
</span></span></code></pre></div><p>Again, compare search area to stations found</p>
<p><em>search area</em></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>pt <span style="color:#f92672">&lt;-</span> lawn<span style="color:#f92672">::</span><span style="color:#a6e22e">lawn_point</span>(<span style="color:#a6e22e">c</span>(<span style="color:#ae81ff">-123</span>, <span style="color:#ae81ff">38.4</span>))
</span></span><span style="display:flex;"><span>lawn<span style="color:#f92672">::</span><span style="color:#a6e22e">lawn_buffer</span>(pt, dist <span style="color:#f92672">=</span> <span style="color:#ae81ff">250</span>) <span style="color:#f92672">%&gt;%</span> view
</span></span></code></pre></div><p><img loading="lazy" src="/2015-10-21-noaa-isd/circle_radius.png" alt="plot1"  />
</p>
<p><em>stations found</em></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">leaflet</span>(data <span style="color:#f92672">=</span> out) <span style="color:#f92672">%&gt;%</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">addTiles</span>() <span style="color:#f92672">%&gt;%</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">addCircles</span>()
</span></span></code></pre></div><p><img loading="lazy" src="/2015-10-21-noaa-isd/lastplot.png" alt="plot1"  />
</p>
<h2 id="isd-data">ISD data</h2>
<h3 id="get-isd-data">Get ISD data</h3>
<p>Here, I get data for four stations.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>res1 <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">isd</span>(usaf<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;011690&#34;</span>, wban<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;99999&#34;</span>, year<span style="color:#f92672">=</span><span style="color:#ae81ff">1993</span>)
</span></span><span style="display:flex;"><span>res2 <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">isd</span>(usaf<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;172007&#34;</span>, wban<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;99999&#34;</span>, year<span style="color:#f92672">=</span><span style="color:#ae81ff">2015</span>)
</span></span><span style="display:flex;"><span>res3 <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">isd</span>(usaf<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;702700&#34;</span>, wban<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;00489&#34;</span>, year<span style="color:#f92672">=</span><span style="color:#ae81ff">2015</span>)
</span></span><span style="display:flex;"><span>res4 <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">isd</span>(usaf<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;109711&#34;</span>, wban<span style="color:#f92672">=</span><span style="color:#ae81ff">99999</span>, year<span style="color:#f92672">=</span><span style="color:#ae81ff">1970</span>)
</span></span></code></pre></div><p>Then, combine data, with <code>rnoaa:::rbind.isd()</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>res_all <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">rbind</span>(res1, res2, res3, res4)
</span></span></code></pre></div><p>Add date time</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">library</span>(<span style="color:#e6db74">&#34;lubridate&#34;</span>)
</span></span><span style="display:flex;"><span>res_all<span style="color:#f92672">$</span>date_time <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">ymd_hm</span>(
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">sprintf</span>(<span style="color:#e6db74">&#34;%s %s&#34;</span>, <span style="color:#a6e22e">as.character</span>(res_all<span style="color:#f92672">$</span>date), res_all<span style="color:#f92672">$</span>time)
</span></span><span style="display:flex;"><span>)
</span></span></code></pre></div><p>Remove 999&rsquo;s (NOAA&rsquo;s way to indicate missing/no data)</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">library</span>(<span style="color:#e6db74">&#34;dplyr&#34;</span>)
</span></span><span style="display:flex;"><span>res_all <span style="color:#f92672">&lt;-</span> res_all <span style="color:#f92672">%&gt;%</span> <span style="color:#a6e22e">filter</span>(temperature <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">900</span>)
</span></span></code></pre></div><h3 id="visualize-isd-data">Visualize ISD data</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">library</span>(<span style="color:#e6db74">&#34;ggplot2&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">ggplot</span>(res_all, <span style="color:#a6e22e">aes</span>(date_time, temperature)) <span style="color:#f92672">+</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">geom_line</span>() <span style="color:#f92672">+</span> 
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">facet_wrap</span>(<span style="color:#f92672">~</span>usaf_station, scales <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;free_x&#34;</span>)
</span></span></code></pre></div><p><img loading="lazy" src="/2015-10-21-noaa-isd/unnamed-chunk-12-1.png" alt="img"  />
</p>
]]></content:encoded>
    </item>
  </channel>
</rss>
