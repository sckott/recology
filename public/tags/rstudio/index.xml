<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>RStudio on Recology</title>
    <link>http://localhost:1313/tags/rstudio/</link>
    <description>Recent content in RStudio on Recology</description>
    <generator>Hugo -- 0.139.3</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 10 Dec 2012 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/rstudio/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Shiny apps are awesome</title>
      <link>http://localhost:1313/2012/12/shiny-r/</link>
      <pubDate>Mon, 10 Dec 2012 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2012/12/shiny-r/</guid>
      <description>&lt;p&gt;RStudio has a new product called &lt;code&gt;Shiny&lt;/code&gt; that, quoting from their website, &amp;ldquo;makes it super simple for R users like you to turn analyses into interactive web applications that anyone can use&amp;rdquo;. &lt;a href=&#34;http://www.rstudio.com/shiny/&#34;&gt;See here&lt;/a&gt; for more information.&lt;/p&gt;
&lt;p&gt;A &lt;code&gt;Shiny&lt;/code&gt; basically consists of two files: a &lt;code&gt;ui.r&lt;/code&gt; file and a &lt;code&gt;server.r&lt;/code&gt; file.  The &lt;code&gt;ui.r&lt;/code&gt; file, as it says, provides the user interface, and the &lt;code&gt;server.r&lt;/code&gt; file provides the the server logic.&lt;/p&gt;
&lt;p&gt;Below is what it looks like in the wild (on a browser).&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>RStudio has a new product called <code>Shiny</code> that, quoting from their website, &ldquo;makes it super simple for R users like you to turn analyses into interactive web applications that anyone can use&rdquo;. <a href="http://www.rstudio.com/shiny/">See here</a> for more information.</p>
<p>A <code>Shiny</code> basically consists of two files: a <code>ui.r</code> file and a <code>server.r</code> file.  The <code>ui.r</code> file, as it says, provides the user interface, and the <code>server.r</code> file provides the the server logic.</p>
<p>Below is what it looks like in the wild (on a browser).</p>
<p><img alt="center" loading="lazy" src="http://sckott.github.io/public/img/shiny_ss.png"></p>
<p>It was pretty easy (for <a href="http://emhart.github.com/">Ted Hart of rOpenSci</a>) to build this app to demonstrate output from the <a href="http://cran.r-project.org/web/packages/rgbif/index.html"><code>ropensci rgbif</code> package</a>.</p>
<h3 id="you-may-need-to-install-packages-first">You may need to install packages first.</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">install.packages</span>(<span style="color:#a6e22e">c</span>(<span style="color:#e6db74">&#34;shiny&#34;</span>, <span style="color:#e6db74">&#34;ggplot2&#34;</span>, <span style="color:#e6db74">&#34;plyr&#34;</span>, <span style="color:#e6db74">&#34;rgbif&#34;</span>))
</span></span></code></pre></div><h3 id="we-tried-to-build-in-making-real-time-api-calls-to-gbifs-servers-but-the-calls-took-too-long-for-web-speed--so-we-prepare-the-data-first-and-then-serve-it-up-from-saved-data-in-a-rda-file-lets-first-prepare-the-data---well-this-is-what-we-do-on-the-app-itself-but-see-the-next-code-block-for">We tried to build in making real time API calls to GBIF&rsquo;s servers, but the calls took too long for web speed.  So we prepare the data first, and then serve it up from saved data in a <code>.rda</code> file. Let&rsquo;s first prepare the data. &ndash;Well, this is what we do on the app itself, but see the next code block for</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">library</span>(rgbif)
</span></span><span style="display:flex;"><span>splist <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">c</span>(<span style="color:#e6db74">&#34;Accipiter erythronemius&#34;</span>, <span style="color:#e6db74">&#34;Junco hyemalis&#34;</span>, <span style="color:#e6db74">&#34;Aix sponsa&#34;</span>, <span style="color:#e6db74">&#34;Haliaeetus leucocephalus&#34;</span>, 
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;Corvus corone&#34;</span>, <span style="color:#e6db74">&#34;Threskiornis molucca&#34;</span>, <span style="color:#e6db74">&#34;Merops malimbicus&#34;</span>)
</span></span><span style="display:flex;"><span>out <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">llply</span>(splist, <span style="color:#66d9ef">function</span>(x) <span style="color:#a6e22e">occurrencelist</span>(x, coordinatestatus <span style="color:#f92672">=</span> T, maxresults <span style="color:#f92672">=</span> <span style="color:#ae81ff">100</span>))
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">names</span>(out) <span style="color:#f92672">&lt;-</span> splist  <span style="color:#75715e"># name each data.frame with the species names</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">setwd</span>(<span style="color:#e6db74">&#34;~/ShinyApps/rgbif2&#34;</span>)  <span style="color:#75715e"># set directory</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">save</span>(out, file <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;speciesdata.rda&#34;</span>)  <span style="color:#75715e"># save the list of data.frames into an .rda file to serve up</span>
</span></span></code></pre></div><h3 id="heres-the-server-logic">Here&rsquo;s the server logic</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">library</span>(shiny)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">library</span>(plyr)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">library</span>(ggplot2)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">library</span>(rgbif)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">## Set up server output</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">shinyServer</span>(<span style="color:#66d9ef">function</span>(input, output) {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">load</span>(<span style="color:#e6db74">&#34;speciesdata.rda&#34;</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># define function for server plot output</span>
</span></span><span style="display:flex;"><span>    output<span style="color:#f92672">$</span>gbifplot <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">reactivePlot</span>(<span style="color:#66d9ef">function</span>() {
</span></span><span style="display:flex;"><span>        species <span style="color:#f92672">&lt;-</span> input<span style="color:#f92672">$</span>spec
</span></span><span style="display:flex;"><span>        df <span style="color:#f92672">&lt;-</span> out<span style="color:#a6e22e">[names</span>(out) <span style="color:#f92672">%in%</span> species]
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">print</span>(<span style="color:#a6e22e">gbifmap</span>(df))
</span></span><span style="display:flex;"><span>    })
</span></span><span style="display:flex;"><span>    output<span style="color:#f92672">$</span>cbt <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">reactiveText</span>(<span style="color:#66d9ef">function</span>() {
</span></span><span style="display:flex;"><span>    })
</span></span><span style="display:flex;"><span>})
</span></span></code></pre></div><h3 id="the-user-interface">The user interface</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">library</span>(shiny)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Define UI for application that plots random distributions</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">shinyUI</span>(<span style="color:#a6e22e">pageWithSidebar</span>(<span style="color:#a6e22e">headerPanel</span>(<span style="color:#e6db74">&#34;rgbif example&#34;</span>), <span style="color:#a6e22e">sidebarPanel</span>(<span style="color:#a6e22e">checkboxGroupInput</span>(<span style="color:#e6db74">&#34;spec&#34;</span>, 
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;Species to map:&#34;</span>, <span style="color:#a6e22e">c</span>(`Sharp shinned hawk (Accipiter erythronemius)` <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Accipiter erythronemius&#34;</span>, 
</span></span><span style="display:flex;"><span>        `Dark eyed junco (Junco hyemalis)` <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Junco hyemalis&#34;</span>, `Wood duck (Aix sponsa)` <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Aix sponsa&#34;</span>, 
</span></span><span style="display:flex;"><span>        `Bald eagle (Haliaeetus leucocephalus)` <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Haliaeetus leucocephalus&#34;</span>, 
</span></span><span style="display:flex;"><span>        `Carrion crow (Corvus corone)` <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Corvus corone&#34;</span>, `Australian White Ibis (Threskiornis molucca)` <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Threskiornis molucca&#34;</span>, 
</span></span><span style="display:flex;"><span>        `Rosy Bee-eater (Merops malimbicus)` <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Merops malimbicus&#34;</span>), selected <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>(<span style="color:#e6db74">&#34;Bald eagle (Haliaeetus leucocephalus)&#34;</span>))), 
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">mainPanel</span>(<span style="color:#a6e22e">h5</span>(<span style="color:#e6db74">&#34;A map of your selected species: Please note that GBIF is queried for every selection so loading times vary&#34;</span>), 
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">plotOutput</span>(<span style="color:#e6db74">&#34;gbifplot&#34;</span>))))
</span></span></code></pre></div><p>This should be all you need. To actually serve up the app in the web, request to be part of their beta-test of Shiny server on the web <a href="https://rstudio.wufoo.com/forms/shiny-server-beta-program/">here</a>.</p>
<p>Go play with our Shiny app <a href="http://glimmer.rstudio.com/ropensci/rgbif2/">here</a> to see the kind of visualization you can do with the <code>rgbif</code> package.</p>
<p>Get the .Rmd file used to create this post <a href="https://github.com/sckott/sckott.github.com/tree/master/_drafts/2012-12-10-shiny-r.Rmd">at my github account</a> - or <a href="https://github.com/sckott/sckott.github.com/tree/master/_posts/2012-12-10-shiny-r.md">.md file</a>.</p>
<p>Written in <a href="http://daringfireball.net/projects/markdown/">Markdown</a>, with help from <a href="http://yihui.name/knitr/">knitr</a>.</p>
]]></content:encoded>
    </item>
  </channel>
</rss>
