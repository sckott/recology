<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Matrix on Recology</title>
    <link>http://localhost:1313/tags/matrix/</link>
    <description>Recent content in Matrix on Recology</description>
    <generator>Hugo -- 0.143.1</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 30 Aug 2012 08:02:00 -0800</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/matrix/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Making matrices with zeros and ones</title>
      <link>http://localhost:1313/2012/08/making-matrices/</link>
      <pubDate>Thu, 30 Aug 2012 08:02:00 -0800</pubDate>
      <guid>http://localhost:1313/2012/08/making-matrices/</guid>
      <description>&lt;p&gt;So I was trying to figure out a fast way to make matrices with randomly allocated 0 or 1 in each cell of the matrix. I reached out on Twitter, and got many responses (thanks tweeps!).&lt;/p&gt;
&lt;h3 id=&#34;here-is-the-solution-i-came-up-with&#34;&gt;Here is the solution I came up with.&lt;/h3&gt;
&lt;p&gt;See if you can tell why it would be slow.&lt;/p&gt;
&lt;p&gt;{% highlight r linenos %}
mm &amp;lt;- matrix(0, 10, 5)
apply(mm, c(1, 2), function(x) sample(c(0, 1), 1))
{% endhighlight %}&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>So I was trying to figure out a fast way to make matrices with randomly allocated 0 or 1 in each cell of the matrix. I reached out on Twitter, and got many responses (thanks tweeps!).</p>
<h3 id="here-is-the-solution-i-came-up-with">Here is the solution I came up with.</h3>
<p>See if you can tell why it would be slow.</p>
<p>{% highlight r linenos %}
mm &lt;- matrix(0, 10, 5)
apply(mm, c(1, 2), function(x) sample(c(0, 1), 1))
{% endhighlight %}</p>
<p>{% highlight text %}
[,1] [,2] [,3] [,4] [,5]
[1,]    1    0    1    0    1
[2,]    0    0    1    1    1
[3,]    0    0    0    0    1
[4,]    0    1    1    0    1
[5,]    0    1    1    1    1
[6,]    1    0    1    1    1
[7,]    0    1    0    1    0
[8,]    0    0    1    0    1
[9,]    1    0    1    1    1
[10,]    1    0    0    1    1
{% endhighlight %}</p>
<h3 id="ted-hart-distribecology-replied-first-with">Ted Hart (@distribecology) replied first with:</h3>
<p>{% highlight r linenos %}
matrix(rbinom(10 * 5, 1, 0.5), ncol = 5, nrow = 10)
{% endhighlight %}</p>
<p>{% highlight text %}
[,1] [,2] [,3] [,4] [,5]
[1,]    1    1    0    1    1
[2,]    1    0    0    1    0
[3,]    0    1    0    0    0
[4,]    0    0    1    0    0
[5,]    1    0    1    0    0
[6,]    0    0    0    0    1
[7,]    1    0    0    0    0
[8,]    0    1    0    1    0
[9,]    1    1    1    1    0
[10,]    0    1    1    0    0
{% endhighlight %}</p>
<h3 id="next-david-smith-revodavid-and-rafael-maia-hylospar-came-up-with-about-the-same-solution">Next, David Smith (@revodavid) and Rafael Maia (@hylospar) came up with about the same solution.</h3>
<p>{% highlight r linenos %}
m &lt;- 10
n &lt;- 5
matrix(sample(0:1, m * n, replace = TRUE), m, n)
{% endhighlight %}</p>
<p>{% highlight text %}
[,1] [,2] [,3] [,4] [,5]
[1,]    0    0    0    0    1
[2,]    0    0    0    0    0
[3,]    0    1    1    0    1
[4,]    1    0    0    1    0
[5,]    0    0    0    0    1
[6,]    1    0    1    1    1
[7,]    1    1    1    1    0
[8,]    0    0    0    1    1
[9,]    1    0    0    0    1
[10,]    0    1    0    1    1
{% endhighlight %}</p>
<h3 id="then-there-was-the-solution-by-luis-apiolaza-zentree">Then there was the solution by Luis Apiolaza (@zentree).</h3>
<p>{% highlight r linenos %}
m &lt;- 10
n &lt;- 5
round(matrix(runif(m * n), m, n))
{% endhighlight %}</p>
<p>{% highlight text %}
[,1] [,2] [,3] [,4] [,5]
[1,]    0    1    1    0    0
[2,]    1    0    1    1    0
[3,]    1    0    1    0    0
[4,]    1    0    0    0    1
[5,]    1    0    1    1    0
[6,]    1    0    0    0    0
[7,]    1    0    0    0    0
[8,]    1    1    1    0    0
[9,]    0    0    0    0    1
[10,]    1    0    0    1    1
{% endhighlight %}</p>
<h3 id="last-a-solution-was-proposed-using-rcpparmadillo-but-i-couldnt-get-it-to-work-on-my-machine-but-here-is-the-function-anyway-if-someone-can">Last, a solution was proposed using <code>RcppArmadillo</code>, but I couldn&rsquo;t get it to work on my machine, but here is the function anyway if someone can.</h3>
<p>{% highlight r linenos %}
library(inline)
library(RcppArmadillo)
f &lt;- cxxfunction(body = &ldquo;return wrap(arma::randu(5,10));&rdquo;, plugin = &ldquo;RcppArmadillo&rdquo;)
{% endhighlight %}</p>
<h3 id="and-here-is-the-comparison-of-systemtime-for-each-solution">And here is the comparison of system.time for each solution.</h3>
<p>{% highlight r linenos %}
mm &lt;- matrix(0, 10, 5)
m &lt;- 10
n &lt;- 5</p>
<p>system.time(replicate(1000, apply(mm, c(1, 2), function(x) sample(c(0, 1), 1))))  # @recology_
{% endhighlight %}</p>
<p>{% highlight text %}
user  system elapsed
0.470   0.002   0.471
{% endhighlight %}</p>
<p>{% highlight r linenos %}
system.time(replicate(1000, matrix(rbinom(10 * 5, 1, 0.5), ncol = 5, nrow = 10)))  # @distribecology
{% endhighlight %}</p>
<p>{% highlight text %}
user  system elapsed
0.014   0.000   0.015
{% endhighlight %}</p>
<p>{% highlight r linenos %}
system.time(replicate(1000, matrix(sample(0:1, m * n, replace = TRUE), m, n)))  # @revodavid &amp; @hylospar
{% endhighlight %}</p>
<p>{% highlight text %}
user  system elapsed
0.015   0.000   0.014
{% endhighlight %}</p>
<p>{% highlight r linenos %}
system.time(replicate(1000, round(matrix(runif(m * n), m, n)), ))  # @zentree
{% endhighlight %}</p>
<p>{% highlight text %}
user  system elapsed
0.014   0.000   0.014
{% endhighlight %}</p>
<h3 id="if-you-want-to-take-the-time-to-learn-c-or-already-know-it-the-rcpparmadillo-option-would-likely-be-the-fastest-but-i-think-imo-for-many-scientists-especially-ecologists-we-probably-dont-already-know-c-so-will-stick-to-the-next-fastest-options">If you want to take the time to learn C++ or already know it, the RcppArmadillo option would likely be the fastest, but I think (IMO) for many scientists, especially ecologists, we probably don&rsquo;t already know C++, so will stick to the next fastest options.</h3>
<h3 id="get-the-rmd-file-used-to-create-this-post-at-my-github-accounthttpsgithubcomsckottsckottgithubcomtreemaster_drafts2012-08-30-making-matricesrmd">Get the .Rmd file used to create this post <a href="https://github.com/sckott/sckott.github.com/tree/master/_drafts/2012-08-30-making-matrices.Rmd">at my github account</a>.</h3>
<h3 id="written-in-markdownhttpdaringfireballnetprojectsmarkdown-with-help-from-knitrhttpyihuinameknitr-and-nice-knitr-highlightingetc-in-in-rstudiohttprstudioorg">Written in <a href="http://daringfireball.net/projects/markdown/">Markdown</a>, with help from <a href="http://yihui.name/knitr/">knitr</a>, and nice knitr highlighting/etc. in in <a href="http://rstudio.org/">RStudio</a>.</h3>
]]></content:encoded>
    </item>
  </channel>
</rss>
