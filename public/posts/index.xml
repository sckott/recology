<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on Recology</title>
    <link>http://localhost:1313/posts/</link>
    <description>Recent content in Posts on Recology</description>
    <generator>Hugo -- 0.140.2</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 07 Jan 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Notes on A Biology Primer for Computer Scientists</title>
      <link>http://localhost:1313/2025/01/notes-biology-primer-computer-scientists/</link>
      <pubDate>Tue, 07 Jan 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2025/01/notes-biology-primer-computer-scientists/</guid>
      <description>&lt;p&gt;Since most of my education has taken place above the organism level, and since my current job concerns sub-organism processes, I want to get more familiar with those sub-organism things. So I&amp;rsquo;m reading and taking notes on my blog about the stuff I&amp;rsquo;m reading.&lt;/p&gt;
&lt;p&gt;First off is the PDF compiled by Franco Preparata from Brown University called &amp;ldquo;A Biology Primer for Computer Scientists&amp;rdquo; at &lt;a href=&#34;https://web.stanford.edu/class/cs173/papers/bioprimer.pdf&#34;&gt;https://web.stanford.edu/class/cs173/papers/bioprimer.pdf&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;section-1&#34;&gt;section 1&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;life is defined as being able to replicate, and that&amp;rsquo;s possible with DNA&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;section-2-chemical-composition&#34;&gt;section 2 chemical composition&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;chemical makeup of life is largely composed of carbon, hydrogen, nitrogen and oxygen.&lt;/li&gt;
&lt;li&gt;molecules have different binding strengths and therefore different energy levels to break them&lt;/li&gt;
&lt;li&gt;molecules are held together by many types of bonds, one of which is the covalent bond&lt;/li&gt;
&lt;li&gt;an agent that aids a chemical reaction is a catalyst; a biological catalyst is an enzyme&lt;/li&gt;
&lt;li&gt;an enzyme itself is a molecule; and enzyme has a specific shape that matches a specific reagent it will catalyze&lt;/li&gt;
&lt;li&gt;building blocks of living organisms are biomolecules; basic ones are sugars, fatty acids, amino acids, and nucleotides.&lt;/li&gt;
&lt;li&gt;two important types of sugars are ribose and deoxyribose&lt;/li&gt;
&lt;li&gt;amino acids are particularly important, of which there are 20 types&lt;/li&gt;
&lt;li&gt;amino acids make up proteins; polysaccharides made of large carbohydrates;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;section-3-nucleic-acids&#34;&gt;section 3 nucleic acids&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;building blocks of nucleic acids are nucleotides&lt;/li&gt;
&lt;li&gt;a nucleotide is made up of three components: a base B, a sugar S and a phosphoric acid P. there&amp;rsquo;s 8 different nucleotide types (G, A, C, and T in DNA, and G, A, C, U in RNA)&lt;/li&gt;
&lt;li&gt;the S sugar of each nucleotide is called ribose;&lt;/li&gt;
&lt;li&gt;nucleotides polymerize as nucleic acids, either DNA or RNA&lt;/li&gt;
&lt;li&gt;DNA Is double stranded; RNA Is single stranded&lt;/li&gt;
&lt;li&gt;in DNA the two strands orient opposite directions with 5&amp;rsquo; to 3&amp;rsquo; and the other strand going 3&amp;rsquo; to 5&#39;&lt;/li&gt;
&lt;li&gt;in DNA, each strand has nucleic acids that bind to the complementary nucleic acid in the other strand&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;section-4-fundamental-cell-processes&#34;&gt;section 4 fundamental cell processes&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;three major processes occur in the cell: DNA &lt;strong&gt;replication&lt;/strong&gt;, DNA-RNA &lt;strong&gt;transcription&lt;/strong&gt; and RNA-protein &lt;strong&gt;translation&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;section-5-dna-replication&#34;&gt;section 5 DNA replication&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;DNA replication is the process by which a double-stranded DNA sequences produces two double-stranded sequences identical to the original one&lt;/li&gt;
&lt;li&gt;replication always proceeds from the 5&amp;rsquo; end to the 3&amp;rsquo; end - therefore goes in opposite directions in each strand (leading strand is 5&amp;rsquo;-3&amp;rsquo;, lagging strand is 3&amp;rsquo;-5&#39;)&lt;/li&gt;
&lt;li&gt;DNA polymerases facilitate the replication&lt;/li&gt;
&lt;li&gt;For the leading strand a string of about 200 bases indicates where to start&lt;/li&gt;
&lt;li&gt;For the lagging strand each Okazaki fragment is initiated by an RNA string synthesized by a specific enzyme&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;section-6-dna-rna-transcription&#34;&gt;section 6 DNA-RNA transcription&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;transcription only uses the so called &amp;ldquo;genomic&amp;rdquo; strand, the one that goes from 5&amp;rsquo; to 3&#39;&lt;/li&gt;
&lt;li&gt;machinery that does transcription is called RNA-polymerase. it separates two DNA strands along a short area and transcription occurs along the short exposed strand, and DNA strands rejoin as the process proceeds&lt;/li&gt;
&lt;li&gt;In DNA replication, DNA is replicated in its entirety, whereas transcription is selective both in space (only certain substrings of DNA are transcribed) and time (depending on environment).&lt;/li&gt;
&lt;li&gt;Different types of RNA: mRNA (messenger; involved in RNA-protein translation), rRNA (ribosomal; participate in the structure of the ribosome), tRNA (transfer; assume a rigid 3d configuration acting as linkages between mRNA and protein chains), snRNA (small nuclear; excision of introns and splicing of exons)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;section-7-rna-protein-translation&#34;&gt;section 7 RNA-protein translation&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;aka Protein synthesis&lt;/li&gt;
&lt;li&gt;DNA is segmented into triplets of nucleotides; each triplet == codon; each codon is individually translated into an amino acid&lt;/li&gt;
&lt;li&gt;there are 64 codons&lt;/li&gt;
&lt;li&gt;there are 20 amino acids (so each amino acid is encoded by more than 1 codon)&lt;/li&gt;
&lt;li&gt;translation occurs in the ribosome. ribosome can be compared to a tape reader (an mRNA sequence) that also produces an output tape (a protein). tRNA is also required (and are specific to a codon/amino acid pair?)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;section-8-protein-structure&#34;&gt;section 8 protein structure&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;proteins are polymers (polypeptides)&lt;/li&gt;
&lt;li&gt;amino acids fully specify a protein, BUT it is its spatial arrangement that determines its function&lt;/li&gt;
&lt;li&gt;how polypeptides fold is not fully understood&lt;/li&gt;
&lt;li&gt;protein structure levels
&lt;ul&gt;
&lt;li&gt;primary: the linear sequence of amino acids&lt;/li&gt;
&lt;li&gt;secondary: local folding patterns such as alpha helices and beta sheets&lt;/li&gt;
&lt;li&gt;tertiary: complete 3D shape of a single polypeptide chain&lt;/li&gt;
&lt;li&gt;quaternary: arrangement of multiple polypeptide subunits within a protein complex&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description>
      <content:encoded><![CDATA[<p>Since most of my education has taken place above the organism level, and since my current job concerns sub-organism processes, I want to get more familiar with those sub-organism things. So I&rsquo;m reading and taking notes on my blog about the stuff I&rsquo;m reading.</p>
<p>First off is the PDF compiled by Franco Preparata from Brown University called &ldquo;A Biology Primer for Computer Scientists&rdquo; at <a href="https://web.stanford.edu/class/cs173/papers/bioprimer.pdf">https://web.stanford.edu/class/cs173/papers/bioprimer.pdf</a></p>
<h3 id="section-1">section 1</h3>
<ul>
<li>life is defined as being able to replicate, and that&rsquo;s possible with DNA</li>
</ul>
<h3 id="section-2-chemical-composition">section 2 chemical composition</h3>
<ul>
<li>chemical makeup of life is largely composed of carbon, hydrogen, nitrogen and oxygen.</li>
<li>molecules have different binding strengths and therefore different energy levels to break them</li>
<li>molecules are held together by many types of bonds, one of which is the covalent bond</li>
<li>an agent that aids a chemical reaction is a catalyst; a biological catalyst is an enzyme</li>
<li>an enzyme itself is a molecule; and enzyme has a specific shape that matches a specific reagent it will catalyze</li>
<li>building blocks of living organisms are biomolecules; basic ones are sugars, fatty acids, amino acids, and nucleotides.</li>
<li>two important types of sugars are ribose and deoxyribose</li>
<li>amino acids are particularly important, of which there are 20 types</li>
<li>amino acids make up proteins; polysaccharides made of large carbohydrates;</li>
</ul>
<h3 id="section-3-nucleic-acids">section 3 nucleic acids</h3>
<ul>
<li>building blocks of nucleic acids are nucleotides</li>
<li>a nucleotide is made up of three components: a base B, a sugar S and a phosphoric acid P. there&rsquo;s 8 different nucleotide types (G, A, C, and T in DNA, and G, A, C, U in RNA)</li>
<li>the S sugar of each nucleotide is called ribose;</li>
<li>nucleotides polymerize as nucleic acids, either DNA or RNA</li>
<li>DNA Is double stranded; RNA Is single stranded</li>
<li>in DNA the two strands orient opposite directions with 5&rsquo; to 3&rsquo; and the other strand going 3&rsquo; to 5'</li>
<li>in DNA, each strand has nucleic acids that bind to the complementary nucleic acid in the other strand</li>
</ul>
<h3 id="section-4-fundamental-cell-processes">section 4 fundamental cell processes</h3>
<ul>
<li>three major processes occur in the cell: DNA <strong>replication</strong>, DNA-RNA <strong>transcription</strong> and RNA-protein <strong>translation</strong>.</li>
</ul>
<h3 id="section-5-dna-replication">section 5 DNA replication</h3>
<ul>
<li>DNA replication is the process by which a double-stranded DNA sequences produces two double-stranded sequences identical to the original one</li>
<li>replication always proceeds from the 5&rsquo; end to the 3&rsquo; end - therefore goes in opposite directions in each strand (leading strand is 5&rsquo;-3&rsquo;, lagging strand is 3&rsquo;-5')</li>
<li>DNA polymerases facilitate the replication</li>
<li>For the leading strand a string of about 200 bases indicates where to start</li>
<li>For the lagging strand each Okazaki fragment is initiated by an RNA string synthesized by a specific enzyme</li>
</ul>
<h3 id="section-6-dna-rna-transcription">section 6 DNA-RNA transcription</h3>
<ul>
<li>transcription only uses the so called &ldquo;genomic&rdquo; strand, the one that goes from 5&rsquo; to 3'</li>
<li>machinery that does transcription is called RNA-polymerase. it separates two DNA strands along a short area and transcription occurs along the short exposed strand, and DNA strands rejoin as the process proceeds</li>
<li>In DNA replication, DNA is replicated in its entirety, whereas transcription is selective both in space (only certain substrings of DNA are transcribed) and time (depending on environment).</li>
<li>Different types of RNA: mRNA (messenger; involved in RNA-protein translation), rRNA (ribosomal; participate in the structure of the ribosome), tRNA (transfer; assume a rigid 3d configuration acting as linkages between mRNA and protein chains), snRNA (small nuclear; excision of introns and splicing of exons)</li>
</ul>
<h3 id="section-7-rna-protein-translation">section 7 RNA-protein translation</h3>
<ul>
<li>aka Protein synthesis</li>
<li>DNA is segmented into triplets of nucleotides; each triplet == codon; each codon is individually translated into an amino acid</li>
<li>there are 64 codons</li>
<li>there are 20 amino acids (so each amino acid is encoded by more than 1 codon)</li>
<li>translation occurs in the ribosome. ribosome can be compared to a tape reader (an mRNA sequence) that also produces an output tape (a protein). tRNA is also required (and are specific to a codon/amino acid pair?)</li>
</ul>
<h3 id="section-8-protein-structure">section 8 protein structure</h3>
<ul>
<li>proteins are polymers (polypeptides)</li>
<li>amino acids fully specify a protein, BUT it is its spatial arrangement that determines its function</li>
<li>how polypeptides fold is not fully understood</li>
<li>protein structure levels
<ul>
<li>primary: the linear sequence of amino acids</li>
<li>secondary: local folding patterns such as alpha helices and beta sheets</li>
<li>tertiary: complete 3D shape of a single polypeptide chain</li>
<li>quaternary: arrangement of multiple polypeptide subunits within a protein complex</li>
</ul>
</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>cowsay v1</title>
      <link>http://localhost:1313/2024/12/cowsay-v1/</link>
      <pubDate>Mon, 09 Dec 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2024/12/cowsay-v1/</guid>
      <description>&lt;p&gt;cowsay is a command line program written in Perl. The original version had a final release in 2016 (that&amp;rsquo;s the version of many installed cowsay programs) and there&amp;rsquo;s a number of forks of that release in Perl. There are also many many versions of cowsay in other programming languages, like &lt;a href=&#34;https://github.com/sckott/cowsay/&#34;&gt;the one I maintain&lt;/a&gt; written in R, unimaginatively called cowsay.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://localhost:1313/2014/02/cowsay/&#34;&gt;I wrote about cowsay here back in 2014&lt;/a&gt;. I didn&amp;rsquo;t think this would ever be 300+ stars popular, but here we are. Given that people seem to actually use it - or at least star it - seems worth putting some more time into it.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>cowsay is a command line program written in Perl. The original version had a final release in 2016 (that&rsquo;s the version of many installed cowsay programs) and there&rsquo;s a number of forks of that release in Perl. There are also many many versions of cowsay in other programming languages, like <a href="https://github.com/sckott/cowsay/">the one I maintain</a> written in R, unimaginatively called cowsay.</p>
<p><a href="/2014/02/cowsay/">I wrote about cowsay here back in 2014</a>. I didn&rsquo;t think this would ever be 300+ stars popular, but here we are. Given that people seem to actually use it - or at least star it - seems worth putting some more time into it.</p>
<h2 id="return-to-the-source">Return to the source</h2>
<p>I just released v1 of cowsay. At a high level, the major thing in v1 is bringing it closer to the original cowsay. That doesn&rsquo;t mean in how it&rsquo;s used - you still use it within R, and pass arguments to a function rather than flags to a command line program. Instead, the output is as close as I could get to the original cowsay. This goal was spurred on by <a href="https://github.com/sckott/cowsay/issues/67">an issue</a> - cough, sneeze - from 6 years ago.</p>
<p>The output of v1 is much closer to the original, for example:</p>
<p>in R cowsay before v1:</p>
<pre tabindex="0"><code> -----
 hello world
 ------
    \   ^__^
     \  (oo)\ ________
        (__)\         )\ /\
             ||------w|
             ||      ||
</code></pre><p>Now in v1:</p>
<pre tabindex="0"><code> ______________
&lt; Hello world! &gt;
 --------------
      \
       \

        ^__^
        (oo)\ ________
        (__)\         )\ /\
             ||------w|
             ||      ||
</code></pre><p>in Perl cli cowsay</p>
<pre tabindex="0"><code> ______________
&lt; Hello world! &gt;
 --------------
        \   ^__^
         \  (oo)\_______
            (__)\       )\/\
                ||----w |
                ||     ||
</code></pre><p>By much closer I mean:</p>
<ol>
<li>Instead of just a top and bottom line there&rsquo;s actually sides now.</li>
<li>Fixed bubble top in GitHub main at least (see below note)</li>
<li>The bubble expands with the text to contain it all within the bubble, for example:</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">library</span>(cowsay)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">library</span>(fortunes)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">say</span>(<span style="color:#e6db74">&#34;fortune&#34;</span>)
</span></span></code></pre></div><pre tabindex="0"><code> ________________________________________________________
/ The problem, as always, is what the heck does one mean \
| by &#39;outlier&#39; in these contexts. Seems to be like       |
| pornography -- &#34;I know it when I see it.&#34;  Berton      |
| Gunter quoting Justice Potter Stewart in a discussion  |
\ about tests for outliers R-help April 2005             /
 --------------------------------------------------------
      \
       \

        ^__^
        (oo)\ ________
        (__)\         )\ /\
             ||------w|
             ||      ||
</code></pre><p>A few notes:</p>
<ol>
<li>I realized in drafting this post that original cowsay uses underscores for the top of the bubble and hyphens for the bottom of the bubble whereas R cowsay was using hyphens for top and bottom. I just pushed a fix for this, so to get underscores for the bubble top install from GitHub (<code>pak::pak(&quot;sckott/cowsay&quot;)</code>).</li>
<li>With the refactoring of bubbles in v1, the &ldquo;tail&rdquo; is now above the animals b/c it was just easier that way. In a future version we&rsquo;ll try to fix that to have the tail coming down farther like original cowsay.</li>
</ol>
<p>The other thing that brings R cowsay closer to og cowsay is having <code>think()</code>, which I hadn&rsquo;t realized was a thing until finding the page in the Wayback Machine for the original cowsay. For example:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">library</span>(cowsay)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">library</span>(fortunes)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">think</span>(<span style="color:#e6db74">&#34;fortune&#34;</span>)
</span></span></code></pre></div><pre tabindex="0"><code> ________________________________________________________
( Dear Uwe, thank you very much for your unvaluable time )
( and effort.  Javier Cano thanking Uwe Ligges for       )
( solving a coding problem R-help July 2009              )
 --------------------------------------------------------
      o
       o

        ^__^
        (oo)\ ________
        (__)\         )\ /\
             ||------w|
             ||      ||
</code></pre><p><code>think()</code> differs from <code>say()</code> in having circles for the tail to the bubble and parens for the bubble sides rather than slashes.</p>
<h2 id="hand-rolled">Hand-rolled</h2>
<p>With v1 you can now hand roll cowsay output, for example:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">library</span>(cowsay)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">library</span>(fortunes)
</span></span><span style="display:flex;"><span>quote <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">as.character</span>(<span style="color:#a6e22e">fortune</span>())
</span></span><span style="display:flex;"><span>chicken <span style="color:#f92672">&lt;-</span> animals[[<span style="color:#e6db74">&#34;chicken&#34;</span>]]
</span></span><span style="display:flex;"><span>z <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">paste</span>(
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">c</span>(<span style="color:#a6e22e">bubble_say</span>(quote), <span style="color:#a6e22e">bubble_tail</span>(chicken, <span style="color:#e6db74">&#34;\\&#34;</span>), chicken),
</span></span><span style="display:flex;"><span>  collapse <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;\n&#34;</span>
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">cat</span>(z)
</span></span></code></pre></div><pre tabindex="0"><code> _______________________________________________________
/ This is a bit like asking how should I tweak my       \
| sailboat so I can explore the ocean floor.            |
| Roger Koenker                                         |
| in response to a question about tweaking the quantreg |
| package to handle probit and heckit models            |
| R-help                                                |
\ May 2013                                              /
 -------------------------------------------------------
      \
       \
         _
       _/ }
      `&gt;&#39; \
      `|   \
       |   /&#39;-.     .-.
        \&#39;     &#39;;`--&#39; .&#39;
         \&#39;.    `&#39;-./
          &#39;.`-..-;`
            `;-..&#39;
            _| _|
            /` /` [nosig]
</code></pre><p>A note about the refactored bubbles and tails: The tail horizontal position is now calculated based on the animal - so instead of always being in the same horizontal position, we attempt to place the tail close to the head of the animal.</p>
<h2 id="fin">Fin</h2>
<p>Have fun!</p>
]]></content:encoded>
    </item>
    <item>
      <title>Software rules and Quarto</title>
      <link>http://localhost:1313/2024/09/quarto-rules/</link>
      <pubDate>Thu, 26 Sep 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2024/09/quarto-rules/</guid>
      <description>&lt;p&gt;At &lt;a href=&#34;https://www.fredhutch.org/en.html&#34;&gt;work&lt;/a&gt; I&amp;rsquo;ve been using &lt;a href=&#34;https://quarto.org/docs/guide/&#34;&gt;Quarto&lt;/a&gt; quite a bit for website and books for work projects.&lt;/p&gt;
&lt;p&gt;One of the projects I&amp;rsquo;ve been working on lately that uses Quarto is the &lt;a href=&#34;http://getwilds.org/guide/&#34;&gt;WILDS Contributor Guide&lt;/a&gt; (WILDS = &lt;em&gt;Workflows Integrating Large Data and Software&lt;/em&gt;). This guide (a Quarto book) is mostly a guide for our own immediate team members, but aims to a) be a guide for any contributors to our open source software work, and b) demonstrate good open source software practices for the greater &lt;a href=&#34;https://www.fredhutch.org/en.html&#34;&gt;Fred Hutch&lt;/a&gt; community where we work.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>At <a href="https://www.fredhutch.org/en.html">work</a> I&rsquo;ve been using <a href="https://quarto.org/docs/guide/">Quarto</a> quite a bit for website and books for work projects.</p>
<p>One of the projects I&rsquo;ve been working on lately that uses Quarto is the <a href="http://getwilds.org/guide/">WILDS Contributor Guide</a> (WILDS = <em>Workflows Integrating Large Data and Software</em>). This guide (a Quarto book) is mostly a guide for our own immediate team members, but aims to a) be a guide for any contributors to our open source software work, and b) demonstrate good open source software practices for the greater <a href="https://www.fredhutch.org/en.html">Fred Hutch</a> community where we work.</p>
<p>Whenever there&rsquo;s a group of people working on the same software, it can help to have some guidelines - or rules - for how software should be built. With any group there&rsquo;s likely to be some aspects that are left up to the individual, whereas other aspects should be enforced rules.</p>
<p>There are many benefits to having everyone follow the same set of rules, including a predictable and consistent software building culture, and trust from the users of the software that the maintainers have reasonable guard rails (assuming those rules are transparent; see note below about <a href="#transparency">Transparency</a> ).</p>
<p>For the rules, how do we:</p>
<ul>
<li>enforce them with the least effort possible? this is not out of laziness for its own sake, but realizing that if it&rsquo;s not easy it may not happen</li>
<li>keep track of any changes in rules (in our case the <a href="http://getwilds.org/guide/">WILDS Guide</a>) so that what we say we do is what we actually do</li>
</ul>
<p>Searching around I haven&rsquo;t found much out there that formalizes this. There&rsquo;s some great transparent and documented stuff out there, e.g. <a href="https://thoughtbot.com/playbook#developing">Thoughtbot&rsquo;s playbook</a> - but they don&rsquo;t describe how they check that their employees do what they say they should do.</p>
<p>What we&rsquo;re doing is the following:</p>
<ul>
<li>In our <a href="http://getwilds.org/guide/">WILDS Guide</a> we have:
<ul>
<li>Easy to find rules for humans &hellip; that are defined with</li>
<li>Machine readable rules for machines</li>
</ul>
</li>
<li>For rule compliance repos will have their on GitHub Actions running various things</li>
<li>For automatable rule compliance across repos we&rsquo;re using GitHub Actions. I&rsquo;ve just started work on this automated compliance at <a href="https://github.com/getwilds/rules">https://github.com/getwilds/rules</a>. You can see <a href="https://github.com/getwilds/rules/actions/runs/10892898375/job/30226762776#step:6:13">an example</a> of one of the rule checks output</li>
<li>For rule compliance that requires human review we&rsquo;ll enfuse into the culture the actions that need to be taken</li>
</ul>
<p>This is very much a work in progress, and could be a fool&rsquo;s errand. Maybe all this rule compliance stuff will make it too hard to get work done. Maybe it will just be too complicated and the work of doing all of this isn&rsquo;t worth it; i.e., rule compliance  isn&rsquo;t the goal, but is just a tool to get our real work done and build trust in the community.</p>
<p>I&rsquo;d love to hear what&rsquo;s working - and what&rsquo;s not - for other folks. Holla at me on <a href="https://fosstodon.org/@sckottie">Mastodon</a> or <a href="https://bsky.app/profile/sckott.bsky.social">Bluesky</a>.</p>
<hr>
<p>If you&rsquo;re interested in the details &hellip;</p>
<h3 id="machine-readable">Machine readable</h3>
<p>The machine readable rules are defined using Quarto&rsquo;s <code>_variables.yml</code> file, ours is at <a href="https://github.com/getwilds/guide/blob/main/_variables.yml">https://github.com/getwilds/guide/blob/main/_variables.yml</a>. A snippet of it:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">version</span>: <span style="color:#ae81ff">1.2</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">rules</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">merge-main-release</span>: &gt;<span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    Every merge from `dev` into `main` should constitute a release, which
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    should generate a tagged version of the software and an increment to the
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    version number</span>    
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">release-tags</span>: <span style="color:#ae81ff">Code releases that correspond to specific git tags.</span>
</span></span></code></pre></div><p>The great thing about this approach is that it&rsquo;s a single file and it&rsquo;s easy for a machine to read. So a machine can watch for any changes in this file to trigger any todo&rsquo;s in other places.</p>
<p>That&rsquo;s not how I started though. My first thought was child documents, thinking that it would make it clear to have a separate &ldquo;rules&rdquo; dir in the repo with a separate child callout in a qmd file for every rule. This looked like</p>
<pre tabindex="0"><code>::: {.callout-note icon=false}

## {{ iconify carbon rule-draft }} Rule

At least two but no more than three designated project leads (specified in the [CODEOWNERS file][codeowners]).
:::
</code></pre><h3 id="appearance-of-rules">Appearance of rules</h3>
<p>I ended up using just simple Bootstrap badges with icons at the beginning of a rule to indicate that it&rsquo;s a rule. I disregarded this at first as I thought it wasn&rsquo;t grabbing the readers attention enough. But this allowed flexibility to have a rule be embedded within a paragraph or be on its own line in a bullet or not.</p>
<p><img alt="screenshot of callouts on WILDS guide" loading="lazy" src="/quarto-rules/badge.png"></p>
<p>However, my first gut feeling was to use alerts, or what Quarto calls &ldquo;callouts&rdquo;.</p>
<p><img alt="screenshot of callouts on WILDS guide" loading="lazy" src="/quarto-rules/guide-callout.png"></p>
<p>The landing page of our WILDS guide has <a href="http://getwilds.org/guide/#rules">a section describing the rules</a>.</p>
<h3 id="transparency">Transparency</h3>
<p>The building trust part of my motivation above I think means that rules need to be transparent to users. If this is done well I think it makes our lives easier as well.</p>
<p>What I mean in practice is the following. So I discussed how we&rsquo;re using badges to indicate a rule in our guide above. One way to approach this is if you click on one of the badges it brings you to another page or github repo that has more details, including more words about how it&rsquo;s implemented, and link to a automated GH Action that does the check or to docs about how a human review is done. This doesn&rsquo;t exist yet.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Refactoring notes</title>
      <link>http://localhost:1313/2024/03/refactoring-notes/</link>
      <pubDate>Wed, 20 Mar 2024 15:24:38 -0700</pubDate>
      <guid>http://localhost:1313/2024/03/refactoring-notes/</guid>
      <description>&lt;p&gt;I worked on a refactor of an R package at work the other day. Here&amp;rsquo;s some notes about that after doing the work. This IS NOT a best practices post - it&amp;rsquo;s just a collection of thoughts.&lt;/p&gt;
&lt;p&gt;For context, the package is an API client.&lt;/p&gt;
&lt;p&gt;It made sense to break the work for any given exported function into the following components, as applicable depending on the endpoint being handled (some endpoints needed just a few lines of code, so those funtions were left unchanged):&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>I worked on a refactor of an R package at work the other day. Here&rsquo;s some notes about that after doing the work. This IS NOT a best practices post - it&rsquo;s just a collection of thoughts.</p>
<p>For context, the package is an API client.</p>
<p>It made sense to break the work for any given exported function into the following components, as applicable depending on the endpoint being handled (some endpoints needed just a few lines of code, so those funtions were left unchanged):</p>
<ul>
<li>query building</li>
<li>http request (including error handling)</li>
<li>http response handling</li>
</ul>
<p>Before this separation each exported function did all three of the above items. For example, before the change the single function with all the code is called <code>fetch_items</code>. After the separation we still have the exported function <code>fetch_items</code>, but within <code>fetch_items</code> are up to three functions (as applicable) that have distinct duties:</p>
<ul>
<li><code>fetch_items_query</code>: prepare the http request components</li>
<li><code>fetch_items_http</code>: the http request handling, includes http status code checking/handling</li>
<li><code>fetch_items_process</code>: process the http response</li>
</ul>
<p>So code would be:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>fetch_items <span style="color:#f92672">&lt;-</span> <span style="color:#66d9ef">function</span>(a, b, token) {
</span></span><span style="display:flex;"><span>  request <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">fetch_items_query</span>(a, b)
</span></span><span style="display:flex;"><span>  response <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">fetch_items_http</span>(request, token)
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">fetch_items_process</span>(response)
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>You may still need to do additional refactoring for the functions used inside of <code>fetch_items</code>. In fact, the functions that do processing of the http response (i.e., <code>fetch_items_process</code>) are sometimes pretty massive and need refactoring - BUT! are waiting on examples that will touch all the code paths - womp womp womp&hellip;</p>
<p>This separation of concerns and code improves the package because:</p>
<ul>
<li><em>You can iterate on tests faster for code that&rsquo;s not doing http requests</em>. For example, the response handling function can rapidly run through a lot of tests since it doesn&rsquo;t have to wait on http requests - assuming you have responses cached in the package to run through it, which is easy enough
<ul>
<li>You can still run fast tests on tests that do http requests if you use fixtures so you&rsquo;re not doing real http request other than to record the fixtures, e.g. using package <a href="https://github.com/ropensci/vcr">vcr</a></li>
</ul>
</li>
<li><em>Separating concerns makes the code easier to reason about</em>. That is - assuming you have well named functions whose intent is clear - it&rsquo;s easier to understand code flow, etc.</li>
<li><em>Smaller functions are easier to understand</em>. This is pretty straightforward, and not specific to any particular type of code. If there&rsquo;s less going on in any one function it&rsquo;s easier to make changes to a package.</li>
<li><em>Breaking code down may reveal redundant code blocks that could be reused</em>. For example, after pulling out code from different functions you might notice that you&rsquo;re doing very similar tasks and can make a function that can be used across the exported functions rather than having repeated code.</li>
</ul>
<h3 id="dont-forget-about-failing-early">don&rsquo;t forget about failing early</h3>
<p>I had to go back and make sure fail early code wasn&rsquo;t lost in breaking up code into chunks. For example, if you are checking if a parameter is of an acceptable type, or some other critical piece is not correct/available, those things should be done first thing so the function fails early.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Moved to Hugo</title>
      <link>http://localhost:1313/2024/03/move-to-hugo/</link>
      <pubDate>Wed, 20 Mar 2024 15:22:11 -0700</pubDate>
      <guid>http://localhost:1313/2024/03/move-to-hugo/</guid>
      <description>&lt;p&gt;This blog is now using &lt;a href=&#34;https://gohugo.io&#34;&gt;Hugo&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Important - if you subscribe to the RSS for this blog you likely have to delete/remove the old one and add the new RSS link. It is:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://recology.info/index.xml&#34;&gt;https://recology.info/index.xml&lt;/a&gt;&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>This blog is now using <a href="https://gohugo.io">Hugo</a>.</p>
<p>Important - if you subscribe to the RSS for this blog you likely have to delete/remove the old one and add the new RSS link. It is:</p>
<p><a href="https://recology.info/index.xml">https://recology.info/index.xml</a></p>
]]></content:encoded>
    </item>
    <item>
      <title>Shiny file inputs</title>
      <link>http://localhost:1313/2024/03/shiny-file-inputs/</link>
      <pubDate>Fri, 08 Mar 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2024/03/shiny-file-inputs/</guid>
      <description>&lt;p&gt;I &lt;a href=&#34;http://localhost:1313/2024/03/shiny-events/&#34;&gt;wrote the other day&lt;/a&gt; about overcoming an issue with &lt;a href=&#34;https://shiny.posit.co/&#34;&gt;Shiny&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Another issue I ran into concurrently was about file inputs. The issue was that file inputs (i.e., &lt;code&gt;shiny::fileInput&lt;/code&gt;) was difficult to clear. That is, after a user uploads a file, it was easy to get some of the various parts cleared/cleaned up, but not others:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(Not Easy) The UI components of &lt;code&gt;fileInput&lt;/code&gt; (the text of the file name, the loading display)&lt;/li&gt;
&lt;li&gt;(Not Easy) The data behind the &lt;code&gt;fileInput&lt;/code&gt; handler&lt;/li&gt;
&lt;li&gt;(Easy) Displaying some feedback in the UI after handling file input&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Load libraries&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>I <a href="/2024/03/shiny-events/">wrote the other day</a> about overcoming an issue with <a href="https://shiny.posit.co/">Shiny</a>.</p>
<p>Another issue I ran into concurrently was about file inputs. The issue was that file inputs (i.e., <code>shiny::fileInput</code>) was difficult to clear. That is, after a user uploads a file, it was easy to get some of the various parts cleared/cleaned up, but not others:</p>
<ul>
<li>(Not Easy) The UI components of <code>fileInput</code> (the text of the file name, the loading display)</li>
<li>(Not Easy) The data behind the <code>fileInput</code> handler</li>
<li>(Easy) Displaying some feedback in the UI after handling file input</li>
</ul>
<p>Load libraries</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">library</span>(shiny)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">library</span>(shinyjs)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">library</span>(bslib)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">library</span>(DT)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">library</span>(vroom)
</span></span></code></pre></div><p>A helper function to handle reactive inputs</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>reactiveInput <span style="color:#f92672">&lt;-</span> <span style="color:#66d9ef">function</span>(rval, path) {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">is.null</span>(rval)) {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span>(<span style="color:#66d9ef">NULL</span>)
</span></span><span style="display:flex;"><span>  } <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> (rval <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;loaded&#39;</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span>(path)
</span></span><span style="display:flex;"><span>  } <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> (rval <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;reset&#39;</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span>(<span style="color:#66d9ef">NULL</span>)
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>A <code>bslib</code> ui component</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>ui <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">page_sidebar</span>(
</span></span><span style="display:flex;"><span>  title <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;My dashboard&#34;</span>,
</span></span><span style="display:flex;"><span>  sidebar <span style="color:#f92672">=</span> <span style="color:#a6e22e">list</span>(
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">actionButton</span>(<span style="color:#e6db74">&#34;submit&#34;</span>, <span style="color:#e6db74">&#34;Submit&#34;</span>),
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">actionButton</span>(<span style="color:#e6db74">&#34;reset&#34;</span>, <span style="color:#e6db74">&#34;Reset&#34;</span>)
</span></span><span style="display:flex;"><span>  ),
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">fileInput</span>(inputId <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;afile&#34;</span>, <span style="color:#e6db74">&#34;Upload file&#34;</span>, accept <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;.csv&#34;</span>),
</span></span><span style="display:flex;"><span>  DT<span style="color:#f92672">::</span><span style="color:#a6e22e">DTOutput</span>(<span style="color:#e6db74">&#34;result&#34;</span>),
</span></span><span style="display:flex;"><span>  shinyjs<span style="color:#f92672">::</span><span style="color:#a6e22e">useShinyjs</span>()
</span></span><span style="display:flex;"><span>)
</span></span></code></pre></div><p>Here&rsquo;s the server part that was giving me trouble.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>server <span style="color:#f92672">&lt;-</span> <span style="color:#66d9ef">function</span>(input, output) {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">observeEvent</span>(input<span style="color:#f92672">$</span>submit, {
</span></span><span style="display:flex;"><span>    output<span style="color:#f92672">$</span>result <span style="color:#f92672">&lt;-</span> DT<span style="color:#f92672">::</span><span style="color:#a6e22e">renderDataTable</span>({
</span></span><span style="display:flex;"><span>      dat <span style="color:#f92672">&lt;-</span> vroom<span style="color:#f92672">::</span><span style="color:#a6e22e">vroom</span>(
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">isolate</span>(input<span style="color:#f92672">$</span>afile<span style="color:#f92672">$</span>datapath)
</span></span><span style="display:flex;"><span>      )
</span></span><span style="display:flex;"><span>      DT<span style="color:#f92672">::</span><span style="color:#a6e22e">datatable</span>(dat)
</span></span><span style="display:flex;"><span>    })
</span></span><span style="display:flex;"><span>  })
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">observeEvent</span>(input<span style="color:#f92672">$</span>reset, {
</span></span><span style="display:flex;"><span>    shinyjs<span style="color:#f92672">::</span><span style="color:#a6e22e">reset</span>(<span style="color:#e6db74">&#34;afile&#34;</span>)
</span></span><span style="display:flex;"><span>    output<span style="color:#f92672">$</span>result <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">renderText</span>({})
</span></span><span style="display:flex;"><span>  })
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>With <code>shinyjs::reset</code> we can reset the UI components of the file input handler, and with <code>renderText</code> with an empty input we can reset the UI feedback. However, the data backing the file input handler is not reset. This led to problems in the UI where you could keep pressing submit after clicking the Reset button because the data for the last uploaded file was still there, whereas the user should get an error that they need to upload a file before clicking Submit.</p>
<p>To be able to completey reset data behind the file input handler I found out about a solution using reactive values via stackoverflow. Basically, the change involves handling file input data through a reactive value and keeping track of the state of the file input loader.</p>
<p>Here&rsquo;s the entire app that doesn&rsquo;t work</p>
<details>
  <summary>Click to expand</summary>
  <div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">library</span>(shiny)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">library</span>(shinyjs)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">library</span>(bslib)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">library</span>(DT)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">library</span>(vroom)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>ui <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">page_sidebar</span>(
</span></span><span style="display:flex;"><span>  title <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;My dashboard&#34;</span>,
</span></span><span style="display:flex;"><span>  sidebar <span style="color:#f92672">=</span> <span style="color:#a6e22e">list</span>(
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">actionButton</span>(<span style="color:#e6db74">&#34;submit&#34;</span>, <span style="color:#e6db74">&#34;Submit&#34;</span>),
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">actionButton</span>(<span style="color:#e6db74">&#34;reset&#34;</span>, <span style="color:#e6db74">&#34;Reset&#34;</span>)
</span></span><span style="display:flex;"><span>  ),
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">fileInput</span>(inputId <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;afile&#34;</span>, <span style="color:#e6db74">&#34;Upload file&#34;</span>, accept <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;.csv&#34;</span>),
</span></span><span style="display:flex;"><span>  DT<span style="color:#f92672">::</span><span style="color:#a6e22e">DTOutput</span>(<span style="color:#e6db74">&#34;result&#34;</span>),
</span></span><span style="display:flex;"><span>  shinyjs<span style="color:#f92672">::</span><span style="color:#a6e22e">useShinyjs</span>()
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>server <span style="color:#f92672">&lt;-</span> <span style="color:#66d9ef">function</span>(input, output) {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">observeEvent</span>(input<span style="color:#f92672">$</span>submit, {
</span></span><span style="display:flex;"><span>    output<span style="color:#f92672">$</span>result <span style="color:#f92672">&lt;-</span> DT<span style="color:#f92672">::</span><span style="color:#a6e22e">renderDataTable</span>({
</span></span><span style="display:flex;"><span>      dat <span style="color:#f92672">&lt;-</span> vroom<span style="color:#f92672">::</span><span style="color:#a6e22e">vroom</span>(
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">isolate</span>(input<span style="color:#f92672">$</span>afile<span style="color:#f92672">$</span>datapath)
</span></span><span style="display:flex;"><span>      )
</span></span><span style="display:flex;"><span>      DT<span style="color:#f92672">::</span><span style="color:#a6e22e">datatable</span>(dat)
</span></span><span style="display:flex;"><span>    })
</span></span><span style="display:flex;"><span>  })
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">observeEvent</span>(input<span style="color:#f92672">$</span>reset, {
</span></span><span style="display:flex;"><span>    shinyjs<span style="color:#f92672">::</span><span style="color:#a6e22e">reset</span>(<span style="color:#e6db74">&#34;afile&#34;</span>)
</span></span><span style="display:flex;"><span>    output<span style="color:#f92672">$</span>result <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">renderText</span>({})
</span></span><span style="display:flex;"><span>  })
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">shinyApp</span>(ui, server)
</span></span></code></pre></div>
</details>

<br />

<p>And here&rsquo;s the entire app that does work</p>
<details>
  <summary>Click to expand</summary>
  <div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">library</span>(shiny)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">library</span>(shinyjs)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">library</span>(bslib)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">library</span>(DT)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">library</span>(vroom)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>reactiveInput <span style="color:#f92672">&lt;-</span> <span style="color:#66d9ef">function</span>(rval, path) {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">is.null</span>(rval)) {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span>(<span style="color:#66d9ef">NULL</span>)
</span></span><span style="display:flex;"><span>  } <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> (rval <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;loaded&#39;</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span>(path)
</span></span><span style="display:flex;"><span>  } <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> (rval <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;reset&#39;</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span>(<span style="color:#66d9ef">NULL</span>)
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>ui <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">page_sidebar</span>(
</span></span><span style="display:flex;"><span>  title <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;My dashboard&#34;</span>,
</span></span><span style="display:flex;"><span>  sidebar <span style="color:#f92672">=</span> <span style="color:#a6e22e">list</span>(
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">actionButton</span>(<span style="color:#e6db74">&#34;submit&#34;</span>, <span style="color:#e6db74">&#34;Submit&#34;</span>),
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">actionButton</span>(<span style="color:#e6db74">&#34;reset&#34;</span>, <span style="color:#e6db74">&#34;Reset&#34;</span>)
</span></span><span style="display:flex;"><span>  ),
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">fileInput</span>(inputId <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;afile&#34;</span>, <span style="color:#e6db74">&#34;Upload file&#34;</span>, accept <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;.csv&#34;</span>),
</span></span><span style="display:flex;"><span>  DT<span style="color:#f92672">::</span><span style="color:#a6e22e">DTOutput</span>(<span style="color:#e6db74">&#34;result&#34;</span>),
</span></span><span style="display:flex;"><span>  shinyjs<span style="color:#f92672">::</span><span style="color:#a6e22e">useShinyjs</span>()
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>server <span style="color:#f92672">&lt;-</span> <span style="color:#66d9ef">function</span>(input, output) {
</span></span><span style="display:flex;"><span>  rv_file <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">reactiveValues</span>(file_state <span style="color:#f92672">=</span> <span style="color:#66d9ef">NULL</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  thefile <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">reactive</span>({
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">reactiveInput</span>(rv_file<span style="color:#f92672">$</span>file_state, input<span style="color:#f92672">$</span>afile<span style="color:#f92672">$</span>datapath)
</span></span><span style="display:flex;"><span>  })
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">observeEvent</span>(input<span style="color:#f92672">$</span>afile, {
</span></span><span style="display:flex;"><span>    rv_file<span style="color:#f92672">$</span>file_state <span style="color:#f92672">&lt;-</span> <span style="color:#e6db74">&#39;loaded&#39;</span>
</span></span><span style="display:flex;"><span>  })
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">observeEvent</span>(input<span style="color:#f92672">$</span>submit, {
</span></span><span style="display:flex;"><span>    output<span style="color:#f92672">$</span>result <span style="color:#f92672">&lt;-</span> DT<span style="color:#f92672">::</span><span style="color:#a6e22e">renderDataTable</span>({
</span></span><span style="display:flex;"><span>      dat <span style="color:#f92672">&lt;-</span> vroom<span style="color:#f92672">::</span><span style="color:#a6e22e">vroom</span>(
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">isolate</span>(<span style="color:#a6e22e">thefile</span>())
</span></span><span style="display:flex;"><span>      )
</span></span><span style="display:flex;"><span>      DT<span style="color:#f92672">::</span><span style="color:#a6e22e">datatable</span>(dat)
</span></span><span style="display:flex;"><span>    })
</span></span><span style="display:flex;"><span>  })
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">observeEvent</span>(input<span style="color:#f92672">$</span>reset, {
</span></span><span style="display:flex;"><span>    shinyjs<span style="color:#f92672">::</span><span style="color:#a6e22e">reset</span>(<span style="color:#e6db74">&#34;afile&#34;</span>)
</span></span><span style="display:flex;"><span>    rv_file<span style="color:#f92672">$</span>file_state <span style="color:#f92672">&lt;-</span> <span style="color:#e6db74">&#39;reset&#39;</span>
</span></span><span style="display:flex;"><span>    output<span style="color:#f92672">$</span>result <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">renderText</span>({})
</span></span><span style="display:flex;"><span>  })
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">shinyApp</span>(ui, server)
</span></span></code></pre></div>
</details>

]]></content:encoded>
    </item>
    <item>
      <title>Shiny button weirdness</title>
      <link>http://localhost:1313/2024/03/shiny-events/</link>
      <pubDate>Mon, 04 Mar 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2024/03/shiny-events/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve been working on &lt;a href=&#34;https://shiny.posit.co/&#34;&gt;Shiny&lt;/a&gt; app at work for the past few months. One of the many frustrating things about Shiny lately has been around buttons. Well, it wasn&amp;rsquo;t really about buttons, but that&amp;rsquo;s where it started.&lt;/p&gt;
&lt;p&gt;Load libraries&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(shiny)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(bslib)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;library&lt;/span&gt;(crul)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Helper function, returned a random UUID from an httpbin server&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;httpbin_uuid &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;...&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  con &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; crul&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;HttpClient&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;new&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://hb.opencpu.org&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  res &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; con&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;uuid&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  jsonlite&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;fromJSON&lt;/span&gt;(res&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;parse&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;UTF-8&amp;#34;&lt;/span&gt;))&lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt;uuid
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;A bslib ui component&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ui &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;page_sidebar&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  title &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;My dashboard&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  sidebar &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;list&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;actionButton&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;submit&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Submit&amp;#34;&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;actionButton&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;reset&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Reset&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;textInput&lt;/span&gt;(inputId &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Your name&amp;#34;&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;textOutput&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;uuid&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here&amp;rsquo;s the server part that was giving me trouble. As I said this was an inherited repo, and the server side handling for many buttons was done with &lt;code&gt;eventReactive&lt;/code&gt; as below. Using &lt;code&gt;eventReactive&lt;/code&gt; meant that button clicks only sometimes triggered the server side code.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>I&rsquo;ve been working on <a href="https://shiny.posit.co/">Shiny</a> app at work for the past few months. One of the many frustrating things about Shiny lately has been around buttons. Well, it wasn&rsquo;t really about buttons, but that&rsquo;s where it started.</p>
<p>Load libraries</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">library</span>(shiny)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">library</span>(bslib)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">library</span>(crul)
</span></span></code></pre></div><p>Helper function, returned a random UUID from an httpbin server</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>httpbin_uuid <span style="color:#f92672">&lt;-</span> <span style="color:#66d9ef">function</span>(<span style="color:#66d9ef">...</span>) {
</span></span><span style="display:flex;"><span>  con <span style="color:#f92672">&lt;-</span> crul<span style="color:#f92672">::</span>HttpClient<span style="color:#f92672">$</span><span style="color:#a6e22e">new</span>(<span style="color:#e6db74">&#34;https://hb.opencpu.org&#34;</span>)
</span></span><span style="display:flex;"><span>  res <span style="color:#f92672">&lt;-</span> con<span style="color:#f92672">$</span><span style="color:#a6e22e">get</span>(<span style="color:#e6db74">&#34;uuid&#34;</span>)
</span></span><span style="display:flex;"><span>  jsonlite<span style="color:#f92672">::</span><span style="color:#a6e22e">fromJSON</span>(res<span style="color:#f92672">$</span><span style="color:#a6e22e">parse</span>(<span style="color:#e6db74">&#34;UTF-8&#34;</span>))<span style="color:#f92672">$</span>uuid
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>A bslib ui component</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>ui <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">page_sidebar</span>(
</span></span><span style="display:flex;"><span>  title <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;My dashboard&#34;</span>,
</span></span><span style="display:flex;"><span>  sidebar <span style="color:#f92672">=</span> <span style="color:#a6e22e">list</span>(
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">actionButton</span>(<span style="color:#e6db74">&#34;submit&#34;</span>, <span style="color:#e6db74">&#34;Submit&#34;</span>),
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">actionButton</span>(<span style="color:#e6db74">&#34;reset&#34;</span>, <span style="color:#e6db74">&#34;Reset&#34;</span>)
</span></span><span style="display:flex;"><span>  ),
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">textInput</span>(inputId <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;name&#34;</span>, <span style="color:#e6db74">&#34;Your name&#34;</span>),
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">textOutput</span>(<span style="color:#e6db74">&#34;uuid&#34;</span>)
</span></span><span style="display:flex;"><span>)
</span></span></code></pre></div><p>Here&rsquo;s the server part that was giving me trouble. As I said this was an inherited repo, and the server side handling for many buttons was done with <code>eventReactive</code> as below. Using <code>eventReactive</code> meant that button clicks only sometimes triggered the server side code.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>server <span style="color:#f92672">&lt;-</span> <span style="color:#66d9ef">function</span>(input, output, session) {
</span></span><span style="display:flex;"><span>  tmp <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">eventReactive</span>(input<span style="color:#f92672">$</span>submit, {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">httpbin_uuid</span>(input<span style="color:#f92672">$</span>name)
</span></span><span style="display:flex;"><span>  })
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  output<span style="color:#f92672">$</span>uuid <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">renderText</span>({ <span style="color:#a6e22e">tmp</span>() })
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">observeEvent</span>(input<span style="color:#f92672">$</span>reset, {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">updateTextInput</span>(session, <span style="color:#e6db74">&#34;name&#34;</span>, <span style="color:#e6db74">&#34;Your name&#34;</span>, <span style="color:#e6db74">&#34;&#34;</span>)
</span></span><span style="display:flex;"><span>    output<span style="color:#f92672">$</span>uuid <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">renderText</span>({})
</span></span><span style="display:flex;"><span>  })
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Eventually I landed upon switching from <code>eventReactive</code> to <code>observeEvent</code> for a variety of reasons. And tried something like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>  <span style="color:#a6e22e">observeEvent</span>(input<span style="color:#f92672">$</span>submit, {
</span></span><span style="display:flex;"><span>    output<span style="color:#f92672">$</span>uuid <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">renderText</span>({
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">httpbin_uuid</span>(input<span style="color:#f92672">$</span>name)
</span></span><span style="display:flex;"><span>    })
</span></span><span style="display:flex;"><span>  })
</span></span></code></pre></div><p>However, keen eyes will notice that this still doesn&rsquo;t work. The final missing piece was the function <code>isolate</code>. Without <code>isolate</code> the <code>observeEvent</code> handler was being triggered on changes other than just a button click.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span>  <span style="color:#a6e22e">observeEvent</span>(input<span style="color:#f92672">$</span>submit, {
</span></span><span style="display:flex;"><span>    output<span style="color:#f92672">$</span>uuid <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">renderText</span>({
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">isolate</span>(
</span></span><span style="display:flex;"><span>      	<span style="color:#a6e22e">httpbin_uuid</span>(input<span style="color:#f92672">$</span>name)
</span></span><span style="display:flex;"><span>      )
</span></span><span style="display:flex;"><span>    })
</span></span><span style="display:flex;"><span>  })
</span></span></code></pre></div><p>Here&rsquo;s the entire app with <code>eventReactive</code> that didn&rsquo;t work:</p>
<details>
  <summary>Click to expand</summary>
  <div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">library</span>(shiny)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">library</span>(bslib)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">library</span>(crul)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>httpbin_uuid <span style="color:#f92672">&lt;-</span> <span style="color:#66d9ef">function</span>(<span style="color:#66d9ef">...</span>) {
</span></span><span style="display:flex;"><span>  con <span style="color:#f92672">&lt;-</span> crul<span style="color:#f92672">::</span>HttpClient<span style="color:#f92672">$</span><span style="color:#a6e22e">new</span>(<span style="color:#e6db74">&#34;https://hb.opencpu.org&#34;</span>)
</span></span><span style="display:flex;"><span>  res <span style="color:#f92672">&lt;-</span> con<span style="color:#f92672">$</span><span style="color:#a6e22e">get</span>(<span style="color:#e6db74">&#34;uuid&#34;</span>)
</span></span><span style="display:flex;"><span>  jsonlite<span style="color:#f92672">::</span><span style="color:#a6e22e">fromJSON</span>(res<span style="color:#f92672">$</span><span style="color:#a6e22e">parse</span>(<span style="color:#e6db74">&#34;UTF-8&#34;</span>))<span style="color:#f92672">$</span>uuid
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>ui <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">page_sidebar</span>(
</span></span><span style="display:flex;"><span>  title <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;My dashboard&#34;</span>,
</span></span><span style="display:flex;"><span>  sidebar <span style="color:#f92672">=</span> <span style="color:#a6e22e">list</span>(
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">actionButton</span>(<span style="color:#e6db74">&#34;submit&#34;</span>, <span style="color:#e6db74">&#34;Submit&#34;</span>),
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">actionButton</span>(<span style="color:#e6db74">&#34;reset&#34;</span>, <span style="color:#e6db74">&#34;Reset&#34;</span>)
</span></span><span style="display:flex;"><span>  ),
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">textInput</span>(inputId <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;name&#34;</span>, <span style="color:#e6db74">&#34;Your name&#34;</span>),
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">textOutput</span>(<span style="color:#e6db74">&#34;uuid&#34;</span>)
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>server <span style="color:#f92672">&lt;-</span> <span style="color:#66d9ef">function</span>(input, output, session) {
</span></span><span style="display:flex;"><span>  tmp <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">eventReactive</span>(input<span style="color:#f92672">$</span>submit, {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">httpbin_uuid</span>(input<span style="color:#f92672">$</span>name)
</span></span><span style="display:flex;"><span>  })
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  output<span style="color:#f92672">$</span>uuid <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">renderText</span>({ <span style="color:#a6e22e">tmp</span>() })
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">observeEvent</span>(input<span style="color:#f92672">$</span>reset, {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">updateTextInput</span>(session, <span style="color:#e6db74">&#34;name&#34;</span>, <span style="color:#e6db74">&#34;Your name&#34;</span>, <span style="color:#e6db74">&#34;&#34;</span>)
</span></span><span style="display:flex;"><span>    output<span style="color:#f92672">$</span>uuid <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">renderText</span>({})
</span></span><span style="display:flex;"><span>  })
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">shinyApp</span>(ui, server)
</span></span></code></pre></div>
</details>

<br />

<p>And here&rsquo;s the entire app with <code>obseveEvent</code> and <code>isolate</code> that worked:</p>
<details>
  <summary>Click to expand</summary>
  <div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-r" data-lang="r"><span style="display:flex;"><span><span style="color:#a6e22e">library</span>(shiny)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">library</span>(bslib)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">library</span>(crul)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>httpbin_uuid <span style="color:#f92672">&lt;-</span> <span style="color:#66d9ef">function</span>(<span style="color:#66d9ef">...</span>) {
</span></span><span style="display:flex;"><span>  con <span style="color:#f92672">&lt;-</span> crul<span style="color:#f92672">::</span>HttpClient<span style="color:#f92672">$</span><span style="color:#a6e22e">new</span>(<span style="color:#e6db74">&#34;https://hb.opencpu.org&#34;</span>)
</span></span><span style="display:flex;"><span>  res <span style="color:#f92672">&lt;-</span> con<span style="color:#f92672">$</span><span style="color:#a6e22e">get</span>(<span style="color:#e6db74">&#34;uuid&#34;</span>)
</span></span><span style="display:flex;"><span>  jsonlite<span style="color:#f92672">::</span><span style="color:#a6e22e">fromJSON</span>(res<span style="color:#f92672">$</span><span style="color:#a6e22e">parse</span>(<span style="color:#e6db74">&#34;UTF-8&#34;</span>))<span style="color:#f92672">$</span>uuid
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>ui <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">page_sidebar</span>(
</span></span><span style="display:flex;"><span>  title <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;My dashboard&#34;</span>,
</span></span><span style="display:flex;"><span>  sidebar <span style="color:#f92672">=</span> <span style="color:#a6e22e">list</span>(
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">actionButton</span>(<span style="color:#e6db74">&#34;submit&#34;</span>, <span style="color:#e6db74">&#34;Submit&#34;</span>),
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">actionButton</span>(<span style="color:#e6db74">&#34;reset&#34;</span>, <span style="color:#e6db74">&#34;Reset&#34;</span>)
</span></span><span style="display:flex;"><span>  ),
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">textInput</span>(inputId <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;name&#34;</span>, <span style="color:#e6db74">&#34;Your name&#34;</span>),
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">textOutput</span>(<span style="color:#e6db74">&#34;uuid&#34;</span>)
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>server <span style="color:#f92672">&lt;-</span> <span style="color:#66d9ef">function</span>(input, output, session) {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">observeEvent</span>(input<span style="color:#f92672">$</span>submit, {
</span></span><span style="display:flex;"><span>    output<span style="color:#f92672">$</span>uuid <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">renderText</span>({
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">isolate</span>(<span style="color:#a6e22e">httpbin_uuid</span>(input<span style="color:#f92672">$</span>name))
</span></span><span style="display:flex;"><span>    })
</span></span><span style="display:flex;"><span>  })
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">observeEvent</span>(input<span style="color:#f92672">$</span>reset, {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">updateTextInput</span>(session, <span style="color:#e6db74">&#34;name&#34;</span>, <span style="color:#e6db74">&#34;Your name&#34;</span>, <span style="color:#e6db74">&#34;&#34;</span>)
</span></span><span style="display:flex;"><span>    output<span style="color:#f92672">$</span>uuid <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">renderText</span>({})
</span></span><span style="display:flex;"><span>  })
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">shinyApp</span>(ui, server)
</span></span></code></pre></div>
</details>

]]></content:encoded>
    </item>
    <item>
      <title>Avoiding the word footgun(s)</title>
      <link>http://localhost:1313/2024/03/foot-guns/</link>
      <pubDate>Sun, 03 Mar 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2024/03/foot-guns/</guid>
      <description>&lt;p&gt;I recently opened an issue in a repository for a package I&amp;rsquo;m working on to think about potential &lt;a href=&#34;https://en.wiktionary.org/wiki/footgun&#34;&gt;footguns&lt;/a&gt; and how to avoid them. That word &amp;ldquo;footguns&amp;rdquo; got me thinking; does using phrases/metaphors for a certain topic in a way lend credibility to it? For example, we use a lot of sports metaphors in the US, especially baseball (swing for the fences, anything related to bases, curveballs, heavy hitter, etc.), and that says something about the place of baseball in our culture.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>I recently opened an issue in a repository for a package I&rsquo;m working on to think about potential <a href="https://en.wiktionary.org/wiki/footgun">footguns</a> and how to avoid them. That word &ldquo;footguns&rdquo; got me thinking; does using phrases/metaphors for a certain topic in a way lend credibility to it? For example, we use a lot of sports metaphors in the US, especially baseball (swing for the fences, anything related to bases, curveballs, heavy hitter, etc.), and that says something about the place of baseball in our culture.</p>
<p>So with that I asked on mastodon for ideas:</p>
<blockquote>
<p>Any replacement for the “foot guns” saying for code?</p>
</blockquote>
<p>The ideas were:</p>
<ul>
<li>self-sabotage</li>
<li>own-goal</li>
<li>power tools can injure</li>
<li>hoisted by their own petard</li>
<li>fire hazard</li>
<li>segfault</li>
<li>tripwire</li>
<li>landmine</li>
<li>stumbling block</li>
</ul>
<p>The person that suggested own-goal also linked to <a href="https://english.stackexchange.com/questions/199247/is-there-a-word-analogous-to-shooting-yourself-in-the-foot">this question</a> on English Language &amp; Usage stack exchange with some additional ideas, none of which I particularly liked so am not including here.</p>
<p>Of the ideas above I liked <strong>stumbling block</strong> the most, and was ready to use that moving forward, but then realized/remembered that that phrase is also sort of the translation for the word <a href="https://en.wikipedia.org/wiki/Stolperstein">Stolperstein</a>, physical concrete cubes as memorials for victims of Nazism. I don&rsquo;t think it makes sense to use stumbling blocks then.</p>
<p>After all that, I&rsquo;m not sure what to use moving forward. :shrug:</p>
]]></content:encoded>
    </item>
    <item>
      <title>Weird thoughts</title>
      <link>http://localhost:1313/2023/10/weird-thoughts/</link>
      <pubDate>Thu, 12 Oct 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2023/10/weird-thoughts/</guid>
      <description>&lt;p&gt;My parents just found this email they had printed out from me from May 19, 2006, when I was 26. I chatted about some family stuff, then had this rambling string of weird thoughts below. I thought others might appreciate a good cringe - or cringy laugh - at my expense. It&amp;rsquo;s especially funny because I&amp;rsquo;m most def an atheist. I don&amp;rsquo;t know, those Tucson sunsets really are transformative.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;… Actually, some deep thoughts:&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>My parents just found this email they had printed out from me from May 19, 2006, when I was 26. I chatted about some family stuff, then had this rambling string of weird thoughts below. I thought others might appreciate a good cringe - or cringy laugh - at my expense. It&rsquo;s especially funny because I&rsquo;m most def an atheist. I don&rsquo;t know, those Tucson sunsets really are transformative.</p>
<blockquote>
<p>… Actually, some deep thoughts:</p>
</blockquote>
<blockquote>
<p>So, what is it about a sunset that makes you feel so good? Is it that the sun is
what provides us food ultimately, and we are grateful for its good day&rsquo;s work
once again. Or is it that we know that the day is over and we have
survived it once again. Perhaps we think that it is god looking down on us and sendins us
off to lay our heads down at the pillow again. But, what if a sunset allows us
to get in touch with some more spiritual side of ourselves for a small period
of time; for the sun setting marks the division between day and night, light
and dark, and signifies maybe the division between our physical and spiritual
bodies, such that its a moment to connect with that spiritual side for a moment
before returning to the physical. Anyway&hellip;blah blah blah</p>
</blockquote>
]]></content:encoded>
    </item>
    <item>
      <title>Job searching notes</title>
      <link>http://localhost:1313/2023/10/job-searching/</link>
      <pubDate>Mon, 09 Oct 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2023/10/job-searching/</guid>
      <description>&lt;p&gt;notes to self for next job hunt (some of which may be generally useful):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;don&amp;rsquo;t apply to general tech companies anymore for many reasons.
&lt;ol&gt;
&lt;li&gt;heard back from very very few but that may be b/c I don&amp;rsquo;t know many people at general tech companies&lt;/li&gt;
&lt;li&gt;never been able to get through interviews; they&amp;rsquo;re presumably looking for computer science grads (not me)&lt;/li&gt;
&lt;li&gt;most of their missions are probably not stuff I&amp;rsquo;d be happy about at the end of the day. despite missions of doing xyz, it&amp;rsquo;s probably really about $$&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;don&amp;rsquo;t apply to pharma companies any more. there&amp;rsquo;s lots of good software jobs in that sector, but i&amp;rsquo;ve struck out 3 times, and so that&amp;rsquo;s a clear pattern my background/whatever isn&amp;rsquo;t something they want&lt;/li&gt;
&lt;li&gt;next time only apply where I have a connection that can refer me or dig around for a referral. it&amp;rsquo;s super easy to apply for jobs, especially if you don&amp;rsquo;t write a cover letter; however, the less time I spend surely the less likely I am to hear back&lt;/li&gt;
&lt;li&gt;make sure (and I&amp;rsquo;ll probably fail to do it again this time, ugh) to write down what questions I was asked, how I answered, and how to improve on that answer. then study and reference those questions and answers for the next interview&lt;/li&gt;
&lt;li&gt;its good to have multiple offers at the same time, but then deciding is harder - &amp;amp; I don&amp;rsquo;t love to negotiating - so maybe don&amp;rsquo;t worry about multiple offers at the same time next time around&lt;/li&gt;
&lt;li&gt;I have relatively low expectations in any interview b/c I don&amp;rsquo;t do technical interviews well - I also try to seek out orgs that do not have crazy technical interview processes - eg., Roche had a whiteboard technical interview that I totally bombed, but was unsurprising in hindsight since the interviewer was an ex-Googler. I&amp;rsquo;m more of a thinker than a quick responder, making it hard to do well in very fast paced (for me) tech interviews. Though I know i have been a good software engineer where I&amp;rsquo;ve worked, so these fast paced tech interviews are probably selecting for a certain kind of brain function I guess?&lt;/li&gt;
&lt;li&gt;seek out orgs with interview processes that have take home assignments - or at least timed coding tests on something like hackerrank - instead of live whiteboard/zoom tech inteviews
&lt;ul&gt;
&lt;li&gt;my last job Deck had a take home test&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.axiomdatascience.com/&#34;&gt;Axiom DS&lt;/a&gt; has a take home test approach&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://adhoc.team/&#34;&gt;AdHoc&lt;/a&gt; uses a take home test approach&lt;/li&gt;
&lt;li&gt;Invitae had a hackerrank test, not a take home but better than live coding test&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;cover letters? I still don&amp;rsquo;t know whether these are worth doing or not. the advice seems to be mixed. they sure take a lot of time, so I hope they&amp;rsquo;re not necessary for most hiring managers; given my bullet above about spending more time on fewer applications, I could find time for a cover letter on every application if ther&amp;rsquo;s not that many&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;some data about this last job search:&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>notes to self for next job hunt (some of which may be generally useful):</p>
<ul>
<li>don&rsquo;t apply to general tech companies anymore for many reasons.
<ol>
<li>heard back from very very few but that may be b/c I don&rsquo;t know many people at general tech companies</li>
<li>never been able to get through interviews; they&rsquo;re presumably looking for computer science grads (not me)</li>
<li>most of their missions are probably not stuff I&rsquo;d be happy about at the end of the day. despite missions of doing xyz, it&rsquo;s probably really about $$</li>
</ol>
</li>
<li>don&rsquo;t apply to pharma companies any more. there&rsquo;s lots of good software jobs in that sector, but i&rsquo;ve struck out 3 times, and so that&rsquo;s a clear pattern my background/whatever isn&rsquo;t something they want</li>
<li>next time only apply where I have a connection that can refer me or dig around for a referral. it&rsquo;s super easy to apply for jobs, especially if you don&rsquo;t write a cover letter; however, the less time I spend surely the less likely I am to hear back</li>
<li>make sure (and I&rsquo;ll probably fail to do it again this time, ugh) to write down what questions I was asked, how I answered, and how to improve on that answer. then study and reference those questions and answers for the next interview</li>
<li>its good to have multiple offers at the same time, but then deciding is harder - &amp; I don&rsquo;t love to negotiating - so maybe don&rsquo;t worry about multiple offers at the same time next time around</li>
<li>I have relatively low expectations in any interview b/c I don&rsquo;t do technical interviews well - I also try to seek out orgs that do not have crazy technical interview processes - eg., Roche had a whiteboard technical interview that I totally bombed, but was unsurprising in hindsight since the interviewer was an ex-Googler. I&rsquo;m more of a thinker than a quick responder, making it hard to do well in very fast paced (for me) tech interviews. Though I know i have been a good software engineer where I&rsquo;ve worked, so these fast paced tech interviews are probably selecting for a certain kind of brain function I guess?</li>
<li>seek out orgs with interview processes that have take home assignments - or at least timed coding tests on something like hackerrank - instead of live whiteboard/zoom tech inteviews
<ul>
<li>my last job Deck had a take home test</li>
<li><a href="https://www.axiomdatascience.com/">Axiom DS</a> has a take home test approach</li>
<li><a href="https://adhoc.team/">AdHoc</a> uses a take home test approach</li>
<li>Invitae had a hackerrank test, not a take home but better than live coding test</li>
</ul>
</li>
<li>cover letters? I still don&rsquo;t know whether these are worth doing or not. the advice seems to be mixed. they sure take a lot of time, so I hope they&rsquo;re not necessary for most hiring managers; given my bullet above about spending more time on fewer applications, I could find time for a cover letter on every application if ther&rsquo;s not that many</li>
</ul>
<p>some data about this last job search:</p>
<ul>
<li>48: orgs that took time to say No</li>
<li>51: orgs that didn&rsquo;t respond</li>
<li>10: orgs that interviewed me (including recruiter only)</li>
<li>1: thanks hutch!</li>
</ul>
]]></content:encoded>
    </item>
  </channel>
</rss>
